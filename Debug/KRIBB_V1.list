
KRIBB_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099b4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c90  08009b88  08009b88  0000ab88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a818  0800a818  0000c178  2**0
                  CONTENTS
  4 .ARM          00000008  0800a818  0800a818  0000b818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a820  0800a820  0000c178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a820  0800a820  0000b820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a824  0800a824  0000b824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000178  20000000  0800a828  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000678  20000178  0800a9a0  0000c178  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007f0  0800a9a0  0000c7f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c178  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017912  00000000  00000000  0000c1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003598  00000000  00000000  00023aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001558  00000000  00000000  00027058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010bc  00000000  00000000  000285b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e1f  00000000  00000000  0002966c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c6d1  00000000  00000000  0005048b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e674a  00000000  00000000  0006cb5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001532a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068b0  00000000  00000000  001532ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00159b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000178 	.word	0x20000178
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009b6c 	.word	0x08009b6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000017c 	.word	0x2000017c
 800020c:	08009b6c 	.word	0x08009b6c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b96a 	b.w	8000f64 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	460c      	mov	r4, r1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d14e      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	458c      	cmp	ip, r1
 8000cb8:	4686      	mov	lr, r0
 8000cba:	fab2 f282 	clz	r2, r2
 8000cbe:	d962      	bls.n	8000d86 <__udivmoddi4+0xde>
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0320 	rsb	r3, r2, #32
 8000cc6:	4091      	lsls	r1, r2
 8000cc8:	fa20 f303 	lsr.w	r3, r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	4319      	orrs	r1, r3
 8000cd2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f f68c 	uxth.w	r6, ip
 8000cde:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ce2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb04 f106 	mul.w	r1, r4, r6
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cfe:	f080 8112 	bcs.w	8000f26 <__udivmoddi4+0x27e>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 810f 	bls.w	8000f26 <__udivmoddi4+0x27e>
 8000d08:	3c02      	subs	r4, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	fa1f f38e 	uxth.w	r3, lr
 8000d12:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d16:	fb07 1110 	mls	r1, r7, r0, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f606 	mul.w	r6, r0, r6
 8000d22:	429e      	cmp	r6, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x94>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2e:	f080 80fc 	bcs.w	8000f2a <__udivmoddi4+0x282>
 8000d32:	429e      	cmp	r6, r3
 8000d34:	f240 80f9 	bls.w	8000f2a <__udivmoddi4+0x282>
 8000d38:	4463      	add	r3, ip
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d42:	2100      	movs	r1, #0
 8000d44:	b11d      	cbz	r5, 8000d4e <__udivmoddi4+0xa6>
 8000d46:	40d3      	lsrs	r3, r2
 8000d48:	2200      	movs	r2, #0
 8000d4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d905      	bls.n	8000d62 <__udivmoddi4+0xba>
 8000d56:	b10d      	cbz	r5, 8000d5c <__udivmoddi4+0xb4>
 8000d58:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e7f5      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d62:	fab3 f183 	clz	r1, r3
 8000d66:	2900      	cmp	r1, #0
 8000d68:	d146      	bne.n	8000df8 <__udivmoddi4+0x150>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d302      	bcc.n	8000d74 <__udivmoddi4+0xcc>
 8000d6e:	4290      	cmp	r0, r2
 8000d70:	f0c0 80f0 	bcc.w	8000f54 <__udivmoddi4+0x2ac>
 8000d74:	1a86      	subs	r6, r0, r2
 8000d76:	eb64 0303 	sbc.w	r3, r4, r3
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	2d00      	cmp	r5, #0
 8000d7e:	d0e6      	beq.n	8000d4e <__udivmoddi4+0xa6>
 8000d80:	e9c5 6300 	strd	r6, r3, [r5]
 8000d84:	e7e3      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	f040 8090 	bne.w	8000eac <__udivmoddi4+0x204>
 8000d8c:	eba1 040c 	sub.w	r4, r1, ip
 8000d90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d94:	fa1f f78c 	uxth.w	r7, ip
 8000d98:	2101      	movs	r1, #1
 8000d9a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb08 4416 	mls	r4, r8, r6, r4
 8000da6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000daa:	fb07 f006 	mul.w	r0, r7, r6
 8000dae:	4298      	cmp	r0, r3
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x11c>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x11a>
 8000dbc:	4298      	cmp	r0, r3
 8000dbe:	f200 80cd 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000dc2:	4626      	mov	r6, r4
 8000dc4:	1a1c      	subs	r4, r3, r0
 8000dc6:	fa1f f38e 	uxth.w	r3, lr
 8000dca:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dce:	fb08 4410 	mls	r4, r8, r0, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb00 f707 	mul.w	r7, r0, r7
 8000dda:	429f      	cmp	r7, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x148>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x146>
 8000de8:	429f      	cmp	r7, r3
 8000dea:	f200 80b0 	bhi.w	8000f4e <__udivmoddi4+0x2a6>
 8000dee:	4620      	mov	r0, r4
 8000df0:	1bdb      	subs	r3, r3, r7
 8000df2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df6:	e7a5      	b.n	8000d44 <__udivmoddi4+0x9c>
 8000df8:	f1c1 0620 	rsb	r6, r1, #32
 8000dfc:	408b      	lsls	r3, r1
 8000dfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000e02:	431f      	orrs	r7, r3
 8000e04:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e08:	fa04 f301 	lsl.w	r3, r4, r1
 8000e0c:	ea43 030c 	orr.w	r3, r3, ip
 8000e10:	40f4      	lsrs	r4, r6
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	0c38      	lsrs	r0, r7, #16
 8000e18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e1c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e20:	fa1f fc87 	uxth.w	ip, r7
 8000e24:	fb00 441e 	mls	r4, r0, lr, r4
 8000e28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e2c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e30:	45a1      	cmp	r9, r4
 8000e32:	fa02 f201 	lsl.w	r2, r2, r1
 8000e36:	d90a      	bls.n	8000e4e <__udivmoddi4+0x1a6>
 8000e38:	193c      	adds	r4, r7, r4
 8000e3a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e3e:	f080 8084 	bcs.w	8000f4a <__udivmoddi4+0x2a2>
 8000e42:	45a1      	cmp	r9, r4
 8000e44:	f240 8081 	bls.w	8000f4a <__udivmoddi4+0x2a2>
 8000e48:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e4c:	443c      	add	r4, r7
 8000e4e:	eba4 0409 	sub.w	r4, r4, r9
 8000e52:	fa1f f983 	uxth.w	r9, r3
 8000e56:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e5a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e5e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e62:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e66:	45a4      	cmp	ip, r4
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x1d2>
 8000e6a:	193c      	adds	r4, r7, r4
 8000e6c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e70:	d267      	bcs.n	8000f42 <__udivmoddi4+0x29a>
 8000e72:	45a4      	cmp	ip, r4
 8000e74:	d965      	bls.n	8000f42 <__udivmoddi4+0x29a>
 8000e76:	3b02      	subs	r3, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e7e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e82:	eba4 040c 	sub.w	r4, r4, ip
 8000e86:	429c      	cmp	r4, r3
 8000e88:	46ce      	mov	lr, r9
 8000e8a:	469c      	mov	ip, r3
 8000e8c:	d351      	bcc.n	8000f32 <__udivmoddi4+0x28a>
 8000e8e:	d04e      	beq.n	8000f2e <__udivmoddi4+0x286>
 8000e90:	b155      	cbz	r5, 8000ea8 <__udivmoddi4+0x200>
 8000e92:	ebb8 030e 	subs.w	r3, r8, lr
 8000e96:	eb64 040c 	sbc.w	r4, r4, ip
 8000e9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9e:	40cb      	lsrs	r3, r1
 8000ea0:	431e      	orrs	r6, r3
 8000ea2:	40cc      	lsrs	r4, r1
 8000ea4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	e750      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000eac:	f1c2 0320 	rsb	r3, r2, #32
 8000eb0:	fa20 f103 	lsr.w	r1, r0, r3
 8000eb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ebc:	4094      	lsls	r4, r2
 8000ebe:	430c      	orrs	r4, r1
 8000ec0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ec8:	fa1f f78c 	uxth.w	r7, ip
 8000ecc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ed0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ed4:	0c23      	lsrs	r3, r4, #16
 8000ed6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eda:	fb00 f107 	mul.w	r1, r0, r7
 8000ede:	4299      	cmp	r1, r3
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x24c>
 8000ee2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eea:	d22c      	bcs.n	8000f46 <__udivmoddi4+0x29e>
 8000eec:	4299      	cmp	r1, r3
 8000eee:	d92a      	bls.n	8000f46 <__udivmoddi4+0x29e>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	1a5b      	subs	r3, r3, r1
 8000ef6:	b2a4      	uxth	r4, r4
 8000ef8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000efc:	fb08 3311 	mls	r3, r8, r1, r3
 8000f00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f04:	fb01 f307 	mul.w	r3, r1, r7
 8000f08:	42a3      	cmp	r3, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x276>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f14:	d213      	bcs.n	8000f3e <__udivmoddi4+0x296>
 8000f16:	42a3      	cmp	r3, r4
 8000f18:	d911      	bls.n	8000f3e <__udivmoddi4+0x296>
 8000f1a:	3902      	subs	r1, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	1ae4      	subs	r4, r4, r3
 8000f20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f24:	e739      	b.n	8000d9a <__udivmoddi4+0xf2>
 8000f26:	4604      	mov	r4, r0
 8000f28:	e6f0      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	e706      	b.n	8000d3c <__udivmoddi4+0x94>
 8000f2e:	45c8      	cmp	r8, r9
 8000f30:	d2ae      	bcs.n	8000e90 <__udivmoddi4+0x1e8>
 8000f32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f3a:	3801      	subs	r0, #1
 8000f3c:	e7a8      	b.n	8000e90 <__udivmoddi4+0x1e8>
 8000f3e:	4631      	mov	r1, r6
 8000f40:	e7ed      	b.n	8000f1e <__udivmoddi4+0x276>
 8000f42:	4603      	mov	r3, r0
 8000f44:	e799      	b.n	8000e7a <__udivmoddi4+0x1d2>
 8000f46:	4630      	mov	r0, r6
 8000f48:	e7d4      	b.n	8000ef4 <__udivmoddi4+0x24c>
 8000f4a:	46d6      	mov	lr, sl
 8000f4c:	e77f      	b.n	8000e4e <__udivmoddi4+0x1a6>
 8000f4e:	4463      	add	r3, ip
 8000f50:	3802      	subs	r0, #2
 8000f52:	e74d      	b.n	8000df0 <__udivmoddi4+0x148>
 8000f54:	4606      	mov	r6, r0
 8000f56:	4623      	mov	r3, r4
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e70f      	b.n	8000d7c <__udivmoddi4+0xd4>
 8000f5c:	3e02      	subs	r6, #2
 8000f5e:	4463      	add	r3, ip
 8000f60:	e730      	b.n	8000dc4 <__udivmoddi4+0x11c>
 8000f62:	bf00      	nop

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <ADC_Init>:

uint16_t adc_avr_buff[ADC_CH_NUM][ADC_AVR_BUFF_MAX_NUM];

/* Public user code ----------------------------------------------------------*/
HAL_StatusTypeDef ADC_Init(SPI_HandleTypeDef *p_handle)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 8000f70:	2300      	movs	r3, #0
 8000f72:	73fb      	strb	r3, [r7, #15]
	uint16_t read_data = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	81bb      	strh	r3, [r7, #12]

	if (p_handle != NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f000 80c5 	beq.w	800110a <ADC_Init+0x1a2>
	{
		/* Regist handle */
		adc_context.spi_handle = (SPI_HandleTypeDef*) p_handle;
 8000f80:	4a65      	ldr	r2, [pc, #404]	@ (8001118 <ADC_Init+0x1b0>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]

		/* Pin Reset */
		HAL_GPIO_WritePin(ADC_RST__GPIO_Port, ADC_RST__Pin, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2140      	movs	r1, #64	@ 0x40
 8000f8a:	4864      	ldr	r0, [pc, #400]	@ (800111c <ADC_Init+0x1b4>)
 8000f8c:	f003 fb72 	bl	8004674 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000f90:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f94:	f002 fe32 	bl	8003bfc <HAL_Delay>
		HAL_GPIO_WritePin(ADC_RST__GPIO_Port, ADC_RST__Pin, GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2140      	movs	r1, #64	@ 0x40
 8000f9c:	485f      	ldr	r0, [pc, #380]	@ (800111c <ADC_Init+0x1b4>)
 8000f9e:	f003 fb69 	bl	8004674 <HAL_GPIO_WritePin>

		/* General Config */
		adc_context.state = ADC_STATE_STANDBY;
 8000fa2:	4b5d      	ldr	r3, [pc, #372]	@ (8001118 <ADC_Init+0x1b0>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	711a      	strb	r2, [r3, #4]
		adc_context.lock = false;
 8000fa8:	4b5b      	ldr	r3, [pc, #364]	@ (8001118 <ADC_Init+0x1b0>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	749a      	strb	r2, [r3, #18]
		adc_context.global_chop = true;
 8000fae:	4b5a      	ldr	r3, [pc, #360]	@ (8001118 <ADC_Init+0x1b0>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	74da      	strb	r2, [r3, #19]
		adc_context.sync_mode = ADC_SYNC_MODE_OFF;
 8000fb4:	4b58      	ldr	r3, [pc, #352]	@ (8001118 <ADC_Init+0x1b0>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	751a      	strb	r2, [r3, #20]
		adc_context.word_size.byte_num = ADC_SPI_WORD_BYTE_NUM_24BIT;
 8000fba:	4b57      	ldr	r3, [pc, #348]	@ (8001118 <ADC_Init+0x1b0>)
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	759a      	strb	r2, [r3, #22]

		/* Clock Config */
		adc_context.clock_sel = ADC_CLOCK_INTERNAL_OSC;
 8000fc0:	4b55      	ldr	r3, [pc, #340]	@ (8001118 <ADC_Init+0x1b0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	75da      	strb	r2, [r3, #23]
		adc_context.osr_mode = ADC_OSR_MODE_1024;
 8000fc6:	4b54      	ldr	r3, [pc, #336]	@ (8001118 <ADC_Init+0x1b0>)
 8000fc8:	2203      	movs	r2, #3
 8000fca:	761a      	strb	r2, [r3, #24]
		adc_context.pwr_mode = ADC_PWR_MODE_HIGH_RESOLUTION;
 8000fcc:	4b52      	ldr	r3, [pc, #328]	@ (8001118 <ADC_Init+0x1b0>)
 8000fce:	2202      	movs	r2, #2
 8000fd0:	765a      	strb	r2, [r3, #25]

		/* Reset */
		ret = _adcSendCmd(ADC_CMD_ID_RESET);
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f000 f95e 	bl	8001294 <_adcSendCmd>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	73fb      	strb	r3, [r7, #15]
		if (ret == HAL_OK)
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d104      	bne.n	8000fec <ADC_Init+0x84>
		{
			ret = _adcSendCmd(ADC_CMD_ID_STANDBY);
 8000fe2:	2002      	movs	r0, #2
 8000fe4:	f000 f956 	bl	8001294 <_adcSendCmd>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	73fb      	strb	r3, [r7, #15]
		}

		/* Read ID */
		ret = _adcReadRegister(ADC_REG_ADDR_ID, 1, &read_data);
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f000 fd3f 	bl	8001a78 <_adcReadRegister>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	73fb      	strb	r3, [r7, #15]
		if (ret == HAL_OK)
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d106      	bne.n	8001012 <ADC_Init+0xaa>
		{
			LogInfo("ADC ID: %04X", read_data); //5404 - 21508
 8001004:	89bb      	ldrh	r3, [r7, #12]
 8001006:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800100a:	4945      	ldr	r1, [pc, #276]	@ (8001120 <ADC_Init+0x1b8>)
 800100c:	4845      	ldr	r0, [pc, #276]	@ (8001124 <ADC_Init+0x1bc>)
 800100e:	f002 fd35 	bl	8003a7c <DEBUG_Printf>
		}

		ret = _adcReadRegister(ADC_REG_ADDR_STATUS, 1, &read_data);
 8001012:	f107 030c 	add.w	r3, r7, #12
 8001016:	461a      	mov	r2, r3
 8001018:	2101      	movs	r1, #1
 800101a:	2001      	movs	r0, #1
 800101c:	f000 fd2c 	bl	8001a78 <_adcReadRegister>
 8001020:	4603      	mov	r3, r0
 8001022:	73fb      	strb	r3, [r7, #15]
		if (ret == HAL_OK)
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d106      	bne.n	8001038 <ADC_Init+0xd0>
		{
			LogInfo("ADC STATUS: %04X", read_data); //0500 - 1280
 800102a:	89bb      	ldrh	r3, [r7, #12]
 800102c:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8001030:	493b      	ldr	r1, [pc, #236]	@ (8001120 <ADC_Init+0x1b8>)
 8001032:	483d      	ldr	r0, [pc, #244]	@ (8001128 <ADC_Init+0x1c0>)
 8001034:	f002 fd22 	bl	8003a7c <DEBUG_Printf>
		}

		ret = _adcReadRegister(ADC_REG_ADDR_MODE, 1, &read_data);
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	461a      	mov	r2, r3
 800103e:	2101      	movs	r1, #1
 8001040:	2002      	movs	r0, #2
 8001042:	f000 fd19 	bl	8001a78 <_adcReadRegister>
 8001046:	4603      	mov	r3, r0
 8001048:	73fb      	strb	r3, [r7, #15]
		if (ret == HAL_OK)
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d106      	bne.n	800105e <ADC_Init+0xf6>
		{
			LogInfo("ADC MODE: %04X", read_data); //0510 - 1296
 8001050:	89bb      	ldrh	r3, [r7, #12]
 8001052:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8001056:	4932      	ldr	r1, [pc, #200]	@ (8001120 <ADC_Init+0x1b8>)
 8001058:	4834      	ldr	r0, [pc, #208]	@ (800112c <ADC_Init+0x1c4>)
 800105a:	f002 fd0f 	bl	8003a7c <DEBUG_Printf>
		}

		ret = _adcReadRegister(ADC_REG_ADDR_CLOCK, 1, &read_data);
 800105e:	f107 030c 	add.w	r3, r7, #12
 8001062:	461a      	mov	r2, r3
 8001064:	2101      	movs	r1, #1
 8001066:	2003      	movs	r0, #3
 8001068:	f000 fd06 	bl	8001a78 <_adcReadRegister>
 800106c:	4603      	mov	r3, r0
 800106e:	73fb      	strb	r3, [r7, #15]
		if (ret == HAL_OK)
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d106      	bne.n	8001084 <ADC_Init+0x11c>
		{
			LogInfo("ADC CLOCK: %04X", read_data); //0F8E - 3970
 8001076:	89bb      	ldrh	r3, [r7, #12]
 8001078:	f44f 729a 	mov.w	r2, #308	@ 0x134
 800107c:	4928      	ldr	r1, [pc, #160]	@ (8001120 <ADC_Init+0x1b8>)
 800107e:	482c      	ldr	r0, [pc, #176]	@ (8001130 <ADC_Init+0x1c8>)
 8001080:	f002 fcfc 	bl	8003a7c <DEBUG_Printf>
		}

		/* Standby */
		ret = _adcSendCmd(ADC_CMD_ID_STANDBY);
 8001084:	2002      	movs	r0, #2
 8001086:	f000 f905 	bl	8001294 <_adcSendCmd>
 800108a:	4603      	mov	r3, r0
 800108c:	73fb      	strb	r3, [r7, #15]

		/* Initialize */
		adc_context.adc_num = 0;
 800108e:	4b22      	ldr	r3, [pc, #136]	@ (8001118 <ADC_Init+0x1b0>)
 8001090:	2200      	movs	r2, #0
 8001092:	851a      	strh	r2, [r3, #40]	@ 0x28
		adc_context.adc_cnt = 0;
 8001094:	4b20      	ldr	r3, [pc, #128]	@ (8001118 <ADC_Init+0x1b0>)
 8001096:	2200      	movs	r2, #0
 8001098:	855a      	strh	r2, [r3, #42]	@ 0x2a
		adc_context.adc_sum = 0;
 800109a:	491f      	ldr	r1, [pc, #124]	@ (8001118 <ADC_Init+0x1b0>)
 800109c:	f04f 0200 	mov.w	r2, #0
 80010a0:	f04f 0300 	mov.w	r3, #0
 80010a4:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

		/* Ch0 Config */
		adc_context.ch_cfg[ADC_CH_0].enable = true;
 80010a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001118 <ADC_Init+0x1b0>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	769a      	strb	r2, [r3, #26]
		adc_context.ch_cfg[ADC_CH_0].input_mode = ADC_CH_INPUT_MODE_CONN;
 80010ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001118 <ADC_Init+0x1b0>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	771a      	strb	r2, [r3, #28]
		adc_context.ch_cfg[ADC_CH_0].gain_mode = ADC_CH_GAIN_MODE_1;
 80010b4:	4b18      	ldr	r3, [pc, #96]	@ (8001118 <ADC_Init+0x1b0>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	76da      	strb	r2, [r3, #27]

		/* Ch1 Config */
		adc_context.ch_cfg[ADC_CH_1].enable = true;
 80010ba:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <ADC_Init+0x1b0>)
 80010bc:	2201      	movs	r2, #1
 80010be:	775a      	strb	r2, [r3, #29]
		adc_context.ch_cfg[ADC_CH_1].input_mode = ADC_CH_INPUT_MODE_CONN;
 80010c0:	4b15      	ldr	r3, [pc, #84]	@ (8001118 <ADC_Init+0x1b0>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	77da      	strb	r2, [r3, #31]
		adc_context.ch_cfg[ADC_CH_1].gain_mode = ADC_CH_GAIN_MODE_1;
 80010c6:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <ADC_Init+0x1b0>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	779a      	strb	r2, [r3, #30]

		/* Ch2 Config */
		adc_context.ch_cfg[ADC_CH_2].enable = true;
 80010cc:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <ADC_Init+0x1b0>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	f883 2020 	strb.w	r2, [r3, #32]
		adc_context.ch_cfg[ADC_CH_2].input_mode = ADC_CH_INPUT_MODE_CONN;
 80010d4:	4b10      	ldr	r3, [pc, #64]	@ (8001118 <ADC_Init+0x1b0>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		adc_context.ch_cfg[ADC_CH_2].gain_mode = ADC_CH_GAIN_MODE_1;
 80010dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001118 <ADC_Init+0x1b0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		/* Ch3 Config */
		adc_context.ch_cfg[ADC_CH_3].enable = true;
 80010e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001118 <ADC_Init+0x1b0>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		adc_context.ch_cfg[ADC_CH_3].input_mode = ADC_CH_INPUT_MODE_CONN;
 80010ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001118 <ADC_Init+0x1b0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		adc_context.ch_cfg[ADC_CH_3].gain_mode = ADC_CH_GAIN_MODE_1;
 80010f4:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <ADC_Init+0x1b0>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

		/* Apply Config */
		_adcSetClockCfg();
 80010fc:	f000 fb10 	bl	8001720 <_adcSetClockCfg>
		_adcSetGainCfg();
 8001100:	f000 fb80 	bl	8001804 <_adcSetGainCfg>
		_adcSetChMuxCfg();
 8001104:	f000 fbd2 	bl	80018ac <_adcSetChMuxCfg>
 8001108:	e001      	b.n	800110e <ADC_Init+0x1a6>
	}
	else
	{
		ret = HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 800110e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000000 	.word	0x20000000
 800111c:	40020800 	.word	0x40020800
 8001120:	0800a688 	.word	0x0800a688
 8001124:	08009b88 	.word	0x08009b88
 8001128:	08009ba8 	.word	0x08009ba8
 800112c:	08009bcc 	.word	0x08009bcc
 8001130:	08009bec 	.word	0x08009bec

08001134 <ADC_Start>:

HAL_StatusTypeDef ADC_Start(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_OK;
 800113a:	2300      	movs	r3, #0
 800113c:	71fb      	strb	r3, [r7, #7]

	/* Wake Up */
	ret = _adcSendCmd(ADC_CMD_ID_WAKEUP);
 800113e:	2003      	movs	r0, #3
 8001140:	f000 f8a8 	bl	8001294 <_adcSendCmd>
 8001144:	4603      	mov	r3, r0
 8001146:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001148:	79fb      	ldrb	r3, [r7, #7]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <ADC_ReqAvr>:
	*samples = adc_context.adc_num;
	*wait_time = adc_context.adc_wait_time;
}

HAL_StatusTypeDef ADC_ReqAvr(MeasAvrReq_t *p_req_info, MeasAvrResultCb_t cb_fn)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af02      	add	r7, sp, #8
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret = HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	73fb      	strb	r3, [r7, #15]
	bool clock_recfg = false;
 8001162:	2300      	movs	r3, #0
 8001164:	73bb      	strb	r3, [r7, #14]

	if ((p_req_info == NULL) || (cb_fn == NULL))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d002      	beq.n	8001172 <ADC_ReqAvr+0x1e>
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d108      	bne.n	8001184 <ADC_ReqAvr+0x30>
	{
		ret = HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	73fb      	strb	r3, [r7, #15]
		LogError("Invalid Parameter");
 8001176:	f240 12af 	movw	r2, #431	@ 0x1af
 800117a:	493e      	ldr	r1, [pc, #248]	@ (8001274 <ADC_ReqAvr+0x120>)
 800117c:	483e      	ldr	r0, [pc, #248]	@ (8001278 <ADC_ReqAvr+0x124>)
 800117e:	f002 fc7d 	bl	8003a7c <DEBUG_Printf>
 8001182:	e071      	b.n	8001268 <ADC_ReqAvr+0x114>
	}
	else
	{
		adc_context.adc_cfg.ch = p_req_info->ch;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	781a      	ldrb	r2, [r3, #0]
 8001188:	4b3c      	ldr	r3, [pc, #240]	@ (800127c <ADC_ReqAvr+0x128>)
 800118a:	719a      	strb	r2, [r3, #6]
		adc_context.adc_num = p_req_info->adc_num;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	88da      	ldrh	r2, [r3, #6]
 8001190:	4b3a      	ldr	r3, [pc, #232]	@ (800127c <ADC_ReqAvr+0x128>)
 8001192:	851a      	strh	r2, [r3, #40]	@ 0x28
		adc_context.adc_cnt = 0;
 8001194:	4b39      	ldr	r3, [pc, #228]	@ (800127c <ADC_ReqAvr+0x128>)
 8001196:	2200      	movs	r2, #0
 8001198:	855a      	strh	r2, [r3, #42]	@ 0x2a
		adc_context.cb_fn = cb_fn;
 800119a:	4a38      	ldr	r2, [pc, #224]	@ (800127c <ADC_ReqAvr+0x128>)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	6393      	str	r3, [r2, #56]	@ 0x38

		if (adc_context.ch_cfg[adc_context.adc_cfg.ch].enable != true)
 80011a0:	4b36      	ldr	r3, [pc, #216]	@ (800127c <ADC_ReqAvr+0x128>)
 80011a2:	799b      	ldrb	r3, [r3, #6]
 80011a4:	4619      	mov	r1, r3
 80011a6:	4a35      	ldr	r2, [pc, #212]	@ (800127c <ADC_ReqAvr+0x128>)
 80011a8:	460b      	mov	r3, r1
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	440b      	add	r3, r1
 80011ae:	4413      	add	r3, r2
 80011b0:	331a      	adds	r3, #26
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	f083 0301 	eor.w	r3, r3, #1
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d014      	beq.n	80011e8 <ADC_ReqAvr+0x94>
		{
			LogInfo("Enable CH %d", adc_context.adc_cfg.ch);
 80011be:	4b2f      	ldr	r3, [pc, #188]	@ (800127c <ADC_ReqAvr+0x128>)
 80011c0:	799b      	ldrb	r3, [r3, #6]
 80011c2:	f44f 72dd 	mov.w	r2, #442	@ 0x1ba
 80011c6:	492b      	ldr	r1, [pc, #172]	@ (8001274 <ADC_ReqAvr+0x120>)
 80011c8:	482d      	ldr	r0, [pc, #180]	@ (8001280 <ADC_ReqAvr+0x12c>)
 80011ca:	f002 fc57 	bl	8003a7c <DEBUG_Printf>
			adc_context.ch_cfg[adc_context.adc_cfg.ch].enable = true;
 80011ce:	4b2b      	ldr	r3, [pc, #172]	@ (800127c <ADC_ReqAvr+0x128>)
 80011d0:	799b      	ldrb	r3, [r3, #6]
 80011d2:	4619      	mov	r1, r3
 80011d4:	4a29      	ldr	r2, [pc, #164]	@ (800127c <ADC_ReqAvr+0x128>)
 80011d6:	460b      	mov	r3, r1
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	440b      	add	r3, r1
 80011dc:	4413      	add	r3, r2
 80011de:	331a      	adds	r3, #26
 80011e0:	2201      	movs	r2, #1
 80011e2:	701a      	strb	r2, [r3, #0]
			clock_recfg = true;
 80011e4:	2301      	movs	r3, #1
 80011e6:	73bb      	strb	r3, [r7, #14]
		}

		if (adc_context.osr_mode != (adcOsrMode_t) p_req_info->sps)
 80011e8:	4b24      	ldr	r3, [pc, #144]	@ (800127c <ADC_ReqAvr+0x128>)
 80011ea:	7e1a      	ldrb	r2, [r3, #24]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	791b      	ldrb	r3, [r3, #4]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d012      	beq.n	800121a <ADC_ReqAvr+0xc6>
		{
			LogInfo("Change OSR (SPS) %d ==> %d", adc_context.osr_mode, p_req_info->sps);
 80011f4:	4b21      	ldr	r3, [pc, #132]	@ (800127c <ADC_ReqAvr+0x128>)
 80011f6:	7e1b      	ldrb	r3, [r3, #24]
 80011f8:	461a      	mov	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	791b      	ldrb	r3, [r3, #4]
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	4613      	mov	r3, r2
 8001202:	f240 12c1 	movw	r2, #449	@ 0x1c1
 8001206:	491b      	ldr	r1, [pc, #108]	@ (8001274 <ADC_ReqAvr+0x120>)
 8001208:	481e      	ldr	r0, [pc, #120]	@ (8001284 <ADC_ReqAvr+0x130>)
 800120a:	f002 fc37 	bl	8003a7c <DEBUG_Printf>
			adc_context.osr_mode = p_req_info->sps;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	791a      	ldrb	r2, [r3, #4]
 8001212:	4b1a      	ldr	r3, [pc, #104]	@ (800127c <ADC_ReqAvr+0x128>)
 8001214:	761a      	strb	r2, [r3, #24]

			clock_recfg = true;
 8001216:	2301      	movs	r3, #1
 8001218:	73bb      	strb	r3, [r7, #14]
		}

		if (clock_recfg == true)
 800121a:	7bbb      	ldrb	r3, [r7, #14]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <ADC_ReqAvr+0xd4>
		{
			ret = _adcSetClockCfg();
 8001220:	f000 fa7e 	bl	8001720 <_adcSetClockCfg>
 8001224:	4603      	mov	r3, r0
 8001226:	73fb      	strb	r3, [r7, #15]
		}

		if (ret == HAL_OK)
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d116      	bne.n	800125c <ADC_ReqAvr+0x108>
		{
			/* Get first datay to init FIFO for data ready signal */
			LogDebug("ADC Init FIFO");
 800122e:	f240 12cf 	movw	r2, #463	@ 0x1cf
 8001232:	4910      	ldr	r1, [pc, #64]	@ (8001274 <ADC_ReqAvr+0x120>)
 8001234:	4814      	ldr	r0, [pc, #80]	@ (8001288 <ADC_ReqAvr+0x134>)
 8001236:	f002 fc21 	bl	8003a7c <DEBUG_Printf>
			_adcGetData(true);
 800123a:	2001      	movs	r0, #1
 800123c:	f000 f910 	bl	8001460 <_adcGetData>
			_adcGetData(true);
 8001240:	2001      	movs	r0, #1
 8001242:	f000 f90d 	bl	8001460 <_adcGetData>

			/* Read Start */
			LogDebug("ADC Read Start");
 8001246:	f44f 72ea 	mov.w	r2, #468	@ 0x1d4
 800124a:	490a      	ldr	r1, [pc, #40]	@ (8001274 <ADC_ReqAvr+0x120>)
 800124c:	480f      	ldr	r0, [pc, #60]	@ (800128c <ADC_ReqAvr+0x138>)
 800124e:	f002 fc15 	bl	8003a7c <DEBUG_Printf>
			adc_context.adc_read = true;
 8001252:	4b0a      	ldr	r3, [pc, #40]	@ (800127c <ADC_ReqAvr+0x128>)
 8001254:	2201      	movs	r2, #1
 8001256:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 800125a:	e005      	b.n	8001268 <ADC_ReqAvr+0x114>
		}
		else
		{
			LogError("ADC Meas Setting failed");
 800125c:	f240 12d9 	movw	r2, #473	@ 0x1d9
 8001260:	4904      	ldr	r1, [pc, #16]	@ (8001274 <ADC_ReqAvr+0x120>)
 8001262:	480b      	ldr	r0, [pc, #44]	@ (8001290 <ADC_ReqAvr+0x13c>)
 8001264:	f002 fc0a 	bl	8003a7c <DEBUG_Printf>
		}
	}

	return ret;
 8001268:	7bfb      	ldrb	r3, [r7, #15]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	0800a694 	.word	0x0800a694
 8001278:	08009c38 	.word	0x08009c38
 800127c:	20000000 	.word	0x20000000
 8001280:	08009c5c 	.word	0x08009c5c
 8001284:	08009c7c 	.word	0x08009c7c
 8001288:	08009ca8 	.word	0x08009ca8
 800128c:	08009cc8 	.word	0x08009cc8
 8001290:	08009ce8 	.word	0x08009ce8

08001294 <_adcSendCmd>:
	adc_context.adc_cnt = 0;
	adc_context.adc_sum = 0;
}

HAL_StatusTypeDef _adcSendCmd(adcCmdId_t cmd)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	@ 0x28
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret = HAL_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	uint16_t tx_buff[6] = { 0x00, };
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
	int16_t rx_buff[6] = { 0x00, };
 80012b0:	f107 0308 	add.w	r3, r7, #8
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]

	uint16_t send_cmd = 0x0000;
 80012bc:	2300      	movs	r3, #0
 80012be:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t cmd_resp = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint16_t crc = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	843b      	strh	r3, [r7, #32]

	switch (cmd)
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	2b04      	cmp	r3, #4
 80012ce:	d865      	bhi.n	800139c <_adcSendCmd+0x108>
 80012d0:	a201      	add	r2, pc, #4	@ (adr r2, 80012d8 <_adcSendCmd+0x44>)
 80012d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d6:	bf00      	nop
 80012d8:	080012ed 	.word	0x080012ed
 80012dc:	08001307 	.word	0x08001307
 80012e0:	08001325 	.word	0x08001325
 80012e4:	08001359 	.word	0x08001359
 80012e8:	0800137b 	.word	0x0800137b
	{
	case ADC_CMD_ID_RESET:
		send_cmd = ADC_CMD_RESET;
 80012ec:	2311      	movs	r3, #17
 80012ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
		cmd_resp = ADC_CMD_RESP_RESET;
 80012f0:	f64f 7354 	movw	r3, #65364	@ 0xff54
 80012f4:	847b      	strh	r3, [r7, #34]	@ 0x22
		LogInfo("ADC Send Command Reset: %04X", send_cmd); //0011 - 17
 80012f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80012f8:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 80012fc:	494d      	ldr	r1, [pc, #308]	@ (8001434 <_adcSendCmd+0x1a0>)
 80012fe:	484e      	ldr	r0, [pc, #312]	@ (8001438 <_adcSendCmd+0x1a4>)
 8001300:	f002 fbbc 	bl	8003a7c <DEBUG_Printf>
		break;
 8001304:	e055      	b.n	80013b2 <_adcSendCmd+0x11e>

	case ADC_CMD_ID_STANDBY:
		send_cmd = ADC_CMD_STANDBY;
 8001306:	2322      	movs	r3, #34	@ 0x22
 8001308:	84bb      	strh	r3, [r7, #36]	@ 0x24
		cmd_resp = ADC_CMD_RESP_STANDBY;
 800130a:	2322      	movs	r3, #34	@ 0x22
 800130c:	847b      	strh	r3, [r7, #34]	@ 0x22
		adc_context.state = ADC_STATE_STANDBY;
 800130e:	4b4b      	ldr	r3, [pc, #300]	@ (800143c <_adcSendCmd+0x1a8>)
 8001310:	2200      	movs	r2, #0
 8001312:	711a      	strb	r2, [r3, #4]
		LogInfo("ADC Send Command Standby: %04X", send_cmd); // 0022 - 34
 8001314:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001316:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800131a:	4946      	ldr	r1, [pc, #280]	@ (8001434 <_adcSendCmd+0x1a0>)
 800131c:	4848      	ldr	r0, [pc, #288]	@ (8001440 <_adcSendCmd+0x1ac>)
 800131e:	f002 fbad 	bl	8003a7c <DEBUG_Printf>
		break;
 8001322:	e046      	b.n	80013b2 <_adcSendCmd+0x11e>

	case ADC_CMD_ID_WAKEUP:
		send_cmd = ADC_CMD_WAKEUP;
 8001324:	2333      	movs	r3, #51	@ 0x33
 8001326:	84bb      	strh	r3, [r7, #36]	@ 0x24
		cmd_resp = ADC_CMD_RESP_WAKEUP;
 8001328:	2333      	movs	r3, #51	@ 0x33
 800132a:	847b      	strh	r3, [r7, #34]	@ 0x22
		if (adc_context.global_chop == false)
 800132c:	4b43      	ldr	r3, [pc, #268]	@ (800143c <_adcSendCmd+0x1a8>)
 800132e:	7cdb      	ldrb	r3, [r3, #19]
 8001330:	f083 0301 	eor.w	r3, r3, #1
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <_adcSendCmd+0xae>
		{
			adc_context.state = ADC_STATE_CONTINOUS;
 800133a:	4b40      	ldr	r3, [pc, #256]	@ (800143c <_adcSendCmd+0x1a8>)
 800133c:	2201      	movs	r2, #1
 800133e:	711a      	strb	r2, [r3, #4]
 8001340:	e002      	b.n	8001348 <_adcSendCmd+0xb4>
		}
		else
		{
			adc_context.state = ADC_STATE_GLOBAL_CHOP;
 8001342:	4b3e      	ldr	r3, [pc, #248]	@ (800143c <_adcSendCmd+0x1a8>)
 8001344:	2202      	movs	r2, #2
 8001346:	711a      	strb	r2, [r3, #4]
		}
		LogInfo("ADC Send Command Wakeup: %04X", send_cmd); //
 8001348:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800134a:	f240 220d 	movw	r2, #525	@ 0x20d
 800134e:	4939      	ldr	r1, [pc, #228]	@ (8001434 <_adcSendCmd+0x1a0>)
 8001350:	483c      	ldr	r0, [pc, #240]	@ (8001444 <_adcSendCmd+0x1b0>)
 8001352:	f002 fb93 	bl	8003a7c <DEBUG_Printf>
		break;
 8001356:	e02c      	b.n	80013b2 <_adcSendCmd+0x11e>

	case ADC_CMD_ID_LOCK:
		send_cmd = ADC_CMD_LOCK;
 8001358:	f240 5355 	movw	r3, #1365	@ 0x555
 800135c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		cmd_resp = ADC_CMD_RESP_LOCK;
 800135e:	f240 5355 	movw	r3, #1365	@ 0x555
 8001362:	847b      	strh	r3, [r7, #34]	@ 0x22
		adc_context.lock = true;
 8001364:	4b35      	ldr	r3, [pc, #212]	@ (800143c <_adcSendCmd+0x1a8>)
 8001366:	2201      	movs	r2, #1
 8001368:	749a      	strb	r2, [r3, #18]
		LogInfo("ADC Send Command Lock: %04X", send_cmd);
 800136a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800136c:	f44f 7205 	mov.w	r2, #532	@ 0x214
 8001370:	4930      	ldr	r1, [pc, #192]	@ (8001434 <_adcSendCmd+0x1a0>)
 8001372:	4835      	ldr	r0, [pc, #212]	@ (8001448 <_adcSendCmd+0x1b4>)
 8001374:	f002 fb82 	bl	8003a7c <DEBUG_Printf>
		break;
 8001378:	e01b      	b.n	80013b2 <_adcSendCmd+0x11e>

	case ADC_CMD_ID_UNLOCK:
		send_cmd = ADC_CMD_UNLOCK;
 800137a:	f240 6355 	movw	r3, #1621	@ 0x655
 800137e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		cmd_resp = ADC_CMD_RESP_UNLOCK;
 8001380:	f240 6355 	movw	r3, #1621	@ 0x655
 8001384:	847b      	strh	r3, [r7, #34]	@ 0x22
		adc_context.lock = false;
 8001386:	4b2d      	ldr	r3, [pc, #180]	@ (800143c <_adcSendCmd+0x1a8>)
 8001388:	2200      	movs	r2, #0
 800138a:	749a      	strb	r2, [r3, #18]
		LogInfo("ADC Send Command Unlock: %04X", send_cmd);
 800138c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800138e:	f240 221b 	movw	r2, #539	@ 0x21b
 8001392:	4928      	ldr	r1, [pc, #160]	@ (8001434 <_adcSendCmd+0x1a0>)
 8001394:	482d      	ldr	r0, [pc, #180]	@ (800144c <_adcSendCmd+0x1b8>)
 8001396:	f002 fb71 	bl	8003a7c <DEBUG_Printf>
		break;
 800139a:	e00a      	b.n	80013b2 <_adcSendCmd+0x11e>

	default:
		ret = HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		LogInfo("Not supported command %04X", send_cmd);
 80013a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80013a4:	f44f 7208 	mov.w	r2, #544	@ 0x220
 80013a8:	4922      	ldr	r1, [pc, #136]	@ (8001434 <_adcSendCmd+0x1a0>)
 80013aa:	4829      	ldr	r0, [pc, #164]	@ (8001450 <_adcSendCmd+0x1bc>)
 80013ac:	f002 fb66 	bl	8003a7c <DEBUG_Printf>
		break;
 80013b0:	bf00      	nop
	}

	/*
	 * Make CMD Array: [CMD] [CRC]
	 * */
	tx_buff[0] = send_cmd;
 80013b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80013b4:	82bb      	strh	r3, [r7, #20]
	tx_buff[1] = crc;
 80013b6:	8c3b      	ldrh	r3, [r7, #32]
 80013b8:	82fb      	strh	r3, [r7, #22]

	if (ret == HAL_OK)
 80013ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10a      	bne.n	80013d8 <_adcSendCmd+0x144>
	{
		ret = _adcTransmitReceive(&tx_buff[0], &rx_buff[0], 6);
 80013c2:	f107 0108 	add.w	r1, r7, #8
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	2206      	movs	r2, #6
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 fc1f 	bl	8001c10 <_adcTransmitReceive>
 80013d2:	4603      	mov	r3, r0
 80013d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	if (ret == HAL_OK)
 80013d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d11c      	bne.n	800141a <_adcSendCmd+0x186>
	{
		if (cmd_resp == rx_buff[0])
 80013e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80013e2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d10b      	bne.n	8001402 <_adcSendCmd+0x16e>
		{
			ret = HAL_OK;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			LogInfo("ADC Command valid response: %04X", rx_buff[0]);
 80013f0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80013f4:	f44f 720d 	mov.w	r2, #564	@ 0x234
 80013f8:	490e      	ldr	r1, [pc, #56]	@ (8001434 <_adcSendCmd+0x1a0>)
 80013fa:	4816      	ldr	r0, [pc, #88]	@ (8001454 <_adcSendCmd+0x1c0>)
 80013fc:	f002 fb3e 	bl	8003a7c <DEBUG_Printf>
 8001400:	e011      	b.n	8001426 <_adcSendCmd+0x192>
		}
		else
		{
			ret = HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			LogError("ADC Command wrong response: %04X", rx_buff[0]);
 8001408:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800140c:	f240 2239 	movw	r2, #569	@ 0x239
 8001410:	4908      	ldr	r1, [pc, #32]	@ (8001434 <_adcSendCmd+0x1a0>)
 8001412:	4811      	ldr	r0, [pc, #68]	@ (8001458 <_adcSendCmd+0x1c4>)
 8001414:	f002 fb32 	bl	8003a7c <DEBUG_Printf>
 8001418:	e005      	b.n	8001426 <_adcSendCmd+0x192>
		}
	}
	else
	{
		LogError("ADC Command response receive failed");
 800141a:	f240 223e 	movw	r2, #574	@ 0x23e
 800141e:	4905      	ldr	r1, [pc, #20]	@ (8001434 <_adcSendCmd+0x1a0>)
 8001420:	480e      	ldr	r0, [pc, #56]	@ (800145c <_adcSendCmd+0x1c8>)
 8001422:	f002 fb2b 	bl	8003a7c <DEBUG_Printf>
	}

	return ret;
 8001426:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800142a:	4618      	mov	r0, r3
 800142c:	3728      	adds	r7, #40	@ 0x28
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	0800a6a0 	.word	0x0800a6a0
 8001438:	08009d14 	.word	0x08009d14
 800143c:	20000000 	.word	0x20000000
 8001440:	08009d44 	.word	0x08009d44
 8001444:	08009d74 	.word	0x08009d74
 8001448:	08009da4 	.word	0x08009da4
 800144c:	08009dd0 	.word	0x08009dd0
 8001450:	08009e00 	.word	0x08009e00
 8001454:	08009e2c 	.word	0x08009e2c
 8001458:	08009e60 	.word	0x08009e60
 800145c:	08009e94 	.word	0x08009e94

08001460 <_adcGetData>:

HAL_StatusTypeDef _adcGetData(bool first_read)
{
 8001460:	b5b0      	push	{r4, r5, r7, lr}
 8001462:	b092      	sub	sp, #72	@ 0x48
 8001464:	af04      	add	r7, sp, #16
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret = HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	uint16_t tx_buff[6] = {0x00,};
 8001470:	f107 0318 	add.w	r3, r7, #24
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
	int16_t rx_buff[6] = {0x00,};
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
	static float lsb = 0;
	static uint8_t data_idx = 0;
	float adc_result = 0;
 8001488:	f04f 0300 	mov.w	r3, #0
 800148c:	633b      	str	r3, [r7, #48]	@ 0x30
	int32_t adc_result2 = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float adc_avr = 0;
 8001492:	f04f 0300 	mov.w	r3, #0
 8001496:	62bb      	str	r3, [r7, #40]	@ 0x28
	int32_t adc_avr2 = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	627b      	str	r3, [r7, #36]	@ 0x24

	tx_buff[0] = ADC_CMD_NULL;
 800149c:	2300      	movs	r3, #0
 800149e:	833b      	strh	r3, [r7, #24]
	ret = _adcTransmitReceive(&tx_buff[0], &rx_buff[0], 6); //3
 80014a0:	f107 010c 	add.w	r1, r7, #12
 80014a4:	f107 0318 	add.w	r3, r7, #24
 80014a8:	2206      	movs	r2, #6
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 fbb0 	bl	8001c10 <_adcTransmitReceive>
 80014b0:	4603      	mov	r3, r0
 80014b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (ret == HAL_OK)
 80014b6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f040 8108 	bne.w	80016d0 <_adcGetData+0x270>
	{
		LogInfo("Get Ch Data: %04X %04X %04X %04X %04X", rx_buff[0], rx_buff[1], rx_buff[2], rx_buff[3], rx_buff[4]); /* [STATUS] [CH0 DATA] [CH1 DATA] */
 80014c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014c4:	461c      	mov	r4, r3
 80014c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014ca:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80014ce:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80014d2:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 80014d6:	9003      	str	r0, [sp, #12]
 80014d8:	9102      	str	r1, [sp, #8]
 80014da:	9201      	str	r2, [sp, #4]
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	4623      	mov	r3, r4
 80014e0:	f240 2256 	movw	r2, #598	@ 0x256
 80014e4:	4982      	ldr	r1, [pc, #520]	@ (80016f0 <_adcGetData+0x290>)
 80014e6:	4883      	ldr	r0, [pc, #524]	@ (80016f4 <_adcGetData+0x294>)
 80014e8:	f002 fac8 	bl	8003a7c <DEBUG_Printf>

		if (first_read == false)
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	f083 0301 	eor.w	r3, r3, #1
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 809d 	beq.w	8001634 <_adcGetData+0x1d4>
		{
			adc_result = (float)((rx_buff[data_idx]) * lsb); //(int16_t)
 80014fa:	4b7f      	ldr	r3, [pc, #508]	@ (80016f8 <_adcGetData+0x298>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	3338      	adds	r3, #56	@ 0x38
 8001502:	443b      	add	r3, r7
 8001504:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8001508:	ee07 3a90 	vmov	s15, r3
 800150c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001510:	4b7a      	ldr	r3, [pc, #488]	@ (80016fc <_adcGetData+0x29c>)
 8001512:	edd3 7a00 	vldr	s15, [r3]
 8001516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800151a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
			adc_result2 = (int32_t)((rx_buff[data_idx]) * lsb * 1000); //(int16_t)
 800151e:	4b76      	ldr	r3, [pc, #472]	@ (80016f8 <_adcGetData+0x298>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	3338      	adds	r3, #56	@ 0x38
 8001526:	443b      	add	r3, r7
 8001528:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 800152c:	ee07 3a90 	vmov	s15, r3
 8001530:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001534:	4b71      	ldr	r3, [pc, #452]	@ (80016fc <_adcGetData+0x29c>)
 8001536:	edd3 7a00 	vldr	s15, [r3]
 800153a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800153e:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8001700 <_adcGetData+0x2a0>
 8001542:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001546:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800154a:	ee17 3a90 	vmov	r3, s15
 800154e:	62fb      	str	r3, [r7, #44]	@ 0x2c
			LogInfo("ADC Result: %d mV", adc_result2);
 8001550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001552:	f44f 7217 	mov.w	r2, #604	@ 0x25c
 8001556:	4966      	ldr	r1, [pc, #408]	@ (80016f0 <_adcGetData+0x290>)
 8001558:	486a      	ldr	r0, [pc, #424]	@ (8001704 <_adcGetData+0x2a4>)
 800155a:	f002 fa8f 	bl	8003a7c <DEBUG_Printf>

			adc_context.adc_sum += adc_result;
 800155e:	4b6a      	ldr	r3, [pc, #424]	@ (8001708 <_adcGetData+0x2a8>)
 8001560:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001564:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001566:	f7ff f807 	bl	8000578 <__aeabi_f2d>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4620      	mov	r0, r4
 8001570:	4629      	mov	r1, r5
 8001572:	f7fe fea3 	bl	80002bc <__adddf3>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4963      	ldr	r1, [pc, #396]	@ (8001708 <_adcGetData+0x2a8>)
 800157c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

			if (++adc_context.adc_cnt >= adc_context.adc_num)
 8001580:	4b61      	ldr	r3, [pc, #388]	@ (8001708 <_adcGetData+0x2a8>)
 8001582:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001584:	3301      	adds	r3, #1
 8001586:	b29a      	uxth	r2, r3
 8001588:	4b5f      	ldr	r3, [pc, #380]	@ (8001708 <_adcGetData+0x2a8>)
 800158a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800158c:	4b5e      	ldr	r3, [pc, #376]	@ (8001708 <_adcGetData+0x2a8>)
 800158e:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8001590:	4b5d      	ldr	r3, [pc, #372]	@ (8001708 <_adcGetData+0x2a8>)
 8001592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001594:	429a      	cmp	r2, r3
 8001596:	f0c0 80a1 	bcc.w	80016dc <_adcGetData+0x27c>
			{
				adc_avr = (float)adc_context.adc_sum / adc_context.adc_cnt;
 800159a:	4b5b      	ldr	r3, [pc, #364]	@ (8001708 <_adcGetData+0x2a8>)
 800159c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80015a0:	4610      	mov	r0, r2
 80015a2:	4619      	mov	r1, r3
 80015a4:	f7ff fb18 	bl	8000bd8 <__aeabi_d2f>
 80015a8:	ee06 0a90 	vmov	s13, r0
 80015ac:	4b56      	ldr	r3, [pc, #344]	@ (8001708 <_adcGetData+0x2a8>)
 80015ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015b0:	ee07 3a90 	vmov	s15, r3
 80015b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015bc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
				adc_avr2 = (int32_t)((adc_context.adc_sum / adc_context.adc_cnt)*1000);
 80015c0:	4b51      	ldr	r3, [pc, #324]	@ (8001708 <_adcGetData+0x2a8>)
 80015c2:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80015c6:	4b50      	ldr	r3, [pc, #320]	@ (8001708 <_adcGetData+0x2a8>)
 80015c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ffc2 	bl	8000554 <__aeabi_i2d>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4620      	mov	r0, r4
 80015d6:	4629      	mov	r1, r5
 80015d8:	f7ff f950 	bl	800087c <__aeabi_ddiv>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4610      	mov	r0, r2
 80015e2:	4619      	mov	r1, r3
 80015e4:	f04f 0200 	mov.w	r2, #0
 80015e8:	4b48      	ldr	r3, [pc, #288]	@ (800170c <_adcGetData+0x2ac>)
 80015ea:	f7ff f81d 	bl	8000628 <__aeabi_dmul>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4610      	mov	r0, r2
 80015f4:	4619      	mov	r1, r3
 80015f6:	f7ff fac7 	bl	8000b88 <__aeabi_d2iz>
 80015fa:	4603      	mov	r3, r0
 80015fc:	627b      	str	r3, [r7, #36]	@ 0x24
				LogInfo("ADC Average: %d mV", adc_avr2);
 80015fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001600:	f44f 7219 	mov.w	r2, #612	@ 0x264
 8001604:	493a      	ldr	r1, [pc, #232]	@ (80016f0 <_adcGetData+0x290>)
 8001606:	4842      	ldr	r0, [pc, #264]	@ (8001710 <_adcGetData+0x2b0>)
 8001608:	f002 fa38 	bl	8003a7c <DEBUG_Printf>
				adc_context.adc_sum = 0;
 800160c:	493e      	ldr	r1, [pc, #248]	@ (8001708 <_adcGetData+0x2a8>)
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	f04f 0300 	mov.w	r3, #0
 8001616:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

				adc_context.cb_fn(adc_avr);
 800161a:	4b3b      	ldr	r3, [pc, #236]	@ (8001708 <_adcGetData+0x2a8>)
 800161c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800161e:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8001622:	4798      	blx	r3
				adc_context.adc_read = false;
 8001624:	4b38      	ldr	r3, [pc, #224]	@ (8001708 <_adcGetData+0x2a8>)
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
				adc_context.adc_cnt = 0;
 800162c:	4b36      	ldr	r3, [pc, #216]	@ (8001708 <_adcGetData+0x2a8>)
 800162e:	2200      	movs	r2, #0
 8001630:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001632:	e053      	b.n	80016dc <_adcGetData+0x27c>
			}
		}
		else
		{
			lsb = (float)1200 / pow(2, adc_context.ch_cfg[adc_context.adc_cfg.ch].gain_mode) / pow(2, 15);
 8001634:	4b34      	ldr	r3, [pc, #208]	@ (8001708 <_adcGetData+0x2a8>)
 8001636:	799b      	ldrb	r3, [r3, #6]
 8001638:	4619      	mov	r1, r3
 800163a:	4a33      	ldr	r2, [pc, #204]	@ (8001708 <_adcGetData+0x2a8>)
 800163c:	460b      	mov	r3, r1
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	440b      	add	r3, r1
 8001642:	4413      	add	r3, r2
 8001644:	331b      	adds	r3, #27
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe ff73 	bl	8000534 <__aeabi_ui2d>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	ec43 2b11 	vmov	d1, r2, r3
 8001656:	ed9f 0b24 	vldr	d0, [pc, #144]	@ 80016e8 <_adcGetData+0x288>
 800165a:	f007 fb29 	bl	8008cb0 <pow>
 800165e:	ec53 2b10 	vmov	r2, r3, d0
 8001662:	f04f 0000 	mov.w	r0, #0
 8001666:	492b      	ldr	r1, [pc, #172]	@ (8001714 <_adcGetData+0x2b4>)
 8001668:	f7ff f908 	bl	800087c <__aeabi_ddiv>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	4b27      	ldr	r3, [pc, #156]	@ (8001718 <_adcGetData+0x2b8>)
 800167a:	f7ff f8ff 	bl	800087c <__aeabi_ddiv>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4610      	mov	r0, r2
 8001684:	4619      	mov	r1, r3
 8001686:	f7ff faa7 	bl	8000bd8 <__aeabi_d2f>
 800168a:	4603      	mov	r3, r0
 800168c:	4a1b      	ldr	r2, [pc, #108]	@ (80016fc <_adcGetData+0x29c>)
 800168e:	6013      	str	r3, [r2, #0]
			if (adc_context.adc_cfg.ch == ADC_CH_0)
 8001690:	4b1d      	ldr	r3, [pc, #116]	@ (8001708 <_adcGetData+0x2a8>)
 8001692:	799b      	ldrb	r3, [r3, #6]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d103      	bne.n	80016a0 <_adcGetData+0x240>
			{
				data_idx = 1;
 8001698:	4b17      	ldr	r3, [pc, #92]	@ (80016f8 <_adcGetData+0x298>)
 800169a:	2201      	movs	r2, #1
 800169c:	701a      	strb	r2, [r3, #0]
 800169e:	e01d      	b.n	80016dc <_adcGetData+0x27c>
			}
			else if (adc_context.adc_cfg.ch == ADC_CH_1)
 80016a0:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <_adcGetData+0x2a8>)
 80016a2:	799b      	ldrb	r3, [r3, #6]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d103      	bne.n	80016b0 <_adcGetData+0x250>
			{
				data_idx = 2;
 80016a8:	4b13      	ldr	r3, [pc, #76]	@ (80016f8 <_adcGetData+0x298>)
 80016aa:	2202      	movs	r2, #2
 80016ac:	701a      	strb	r2, [r3, #0]
 80016ae:	e015      	b.n	80016dc <_adcGetData+0x27c>
			}
			else if (adc_context.adc_cfg.ch == ADC_CH_2)
 80016b0:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <_adcGetData+0x2a8>)
 80016b2:	799b      	ldrb	r3, [r3, #6]
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d103      	bne.n	80016c0 <_adcGetData+0x260>
			{
				data_idx = 3;
 80016b8:	4b0f      	ldr	r3, [pc, #60]	@ (80016f8 <_adcGetData+0x298>)
 80016ba:	2203      	movs	r2, #3
 80016bc:	701a      	strb	r2, [r3, #0]
 80016be:	e00d      	b.n	80016dc <_adcGetData+0x27c>
			}
			else if (adc_context.adc_cfg.ch == ADC_CH_3)
 80016c0:	4b11      	ldr	r3, [pc, #68]	@ (8001708 <_adcGetData+0x2a8>)
 80016c2:	799b      	ldrb	r3, [r3, #6]
 80016c4:	2b03      	cmp	r3, #3
 80016c6:	d109      	bne.n	80016dc <_adcGetData+0x27c>
			{
				data_idx = 4;
 80016c8:	4b0b      	ldr	r3, [pc, #44]	@ (80016f8 <_adcGetData+0x298>)
 80016ca:	2204      	movs	r2, #4
 80016cc:	701a      	strb	r2, [r3, #0]
 80016ce:	e005      	b.n	80016dc <_adcGetData+0x27c>
			}
		}
	}
	else
	{
		LogError("Read Status and ADC Result failed");
 80016d0:	f240 2283 	movw	r2, #643	@ 0x283
 80016d4:	4906      	ldr	r1, [pc, #24]	@ (80016f0 <_adcGetData+0x290>)
 80016d6:	4811      	ldr	r0, [pc, #68]	@ (800171c <_adcGetData+0x2bc>)
 80016d8:	f002 f9d0 	bl	8003a7c <DEBUG_Printf>
	}

	return ret;
 80016dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3738      	adds	r7, #56	@ 0x38
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bdb0      	pop	{r4, r5, r7, pc}
 80016e8:	00000000 	.word	0x00000000
 80016ec:	40000000 	.word	0x40000000
 80016f0:	0800a6ac 	.word	0x0800a6ac
 80016f4:	08009ecc 	.word	0x08009ecc
 80016f8:	20000194 	.word	0x20000194
 80016fc:	20000198 	.word	0x20000198
 8001700:	447a0000 	.word	0x447a0000
 8001704:	08009f04 	.word	0x08009f04
 8001708:	20000000 	.word	0x20000000
 800170c:	408f4000 	.word	0x408f4000
 8001710:	08009f28 	.word	0x08009f28
 8001714:	4092c000 	.word	0x4092c000
 8001718:	40e00000 	.word	0x40e00000
 800171c:	08009f4c 	.word	0x08009f4c

08001720 <_adcSetClockCfg>:
	return ret;
}
*/

HAL_StatusTypeDef _adcSetClockCfg(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	71fb      	strb	r3, [r7, #7]

	uint16_t send_cfg = 0x00;
 800172a:	2300      	movs	r3, #0
 800172c:	80bb      	strh	r3, [r7, #4]

	/* Ch Enable */
	send_cfg |= BF_VAL(adc_context.ch_cfg[ADC_CH_0].enable, ADC_CH0_EN_BCNT, ADC_CH0_EN_BOFF);
 800172e:	4b31      	ldr	r3, [pc, #196]	@ (80017f4 <_adcSetClockCfg+0xd4>)
 8001730:	7e9b      	ldrb	r3, [r3, #26]
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	b29b      	uxth	r3, r3
 8001736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800173a:	b29a      	uxth	r2, r3
 800173c:	88bb      	ldrh	r3, [r7, #4]
 800173e:	4313      	orrs	r3, r2
 8001740:	80bb      	strh	r3, [r7, #4]
	send_cfg |= BF_VAL(adc_context.ch_cfg[ADC_CH_1].enable, ADC_CH1_EN_BCNT, ADC_CH1_EN_BOFF);
 8001742:	4b2c      	ldr	r3, [pc, #176]	@ (80017f4 <_adcSetClockCfg+0xd4>)
 8001744:	7f5b      	ldrb	r3, [r3, #29]
 8001746:	025b      	lsls	r3, r3, #9
 8001748:	b29b      	uxth	r3, r3
 800174a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800174e:	b29a      	uxth	r2, r3
 8001750:	88bb      	ldrh	r3, [r7, #4]
 8001752:	4313      	orrs	r3, r2
 8001754:	80bb      	strh	r3, [r7, #4]
	send_cfg |= BF_VAL(adc_context.ch_cfg[ADC_CH_2].enable, ADC_CH2_EN_BCNT, ADC_CH2_EN_BOFF);
 8001756:	4b27      	ldr	r3, [pc, #156]	@ (80017f4 <_adcSetClockCfg+0xd4>)
 8001758:	f893 3020 	ldrb.w	r3, [r3, #32]
 800175c:	029b      	lsls	r3, r3, #10
 800175e:	b29b      	uxth	r3, r3
 8001760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001764:	b29a      	uxth	r2, r3
 8001766:	88bb      	ldrh	r3, [r7, #4]
 8001768:	4313      	orrs	r3, r2
 800176a:	80bb      	strh	r3, [r7, #4]
	send_cfg |= BF_VAL(adc_context.ch_cfg[ADC_CH_3].enable, ADC_CH3_EN_BCNT, ADC_CH3_EN_BOFF);
 800176c:	4b21      	ldr	r3, [pc, #132]	@ (80017f4 <_adcSetClockCfg+0xd4>)
 800176e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001772:	02db      	lsls	r3, r3, #11
 8001774:	b29b      	uxth	r3, r3
 8001776:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800177a:	b29a      	uxth	r2, r3
 800177c:	88bb      	ldrh	r3, [r7, #4]
 800177e:	4313      	orrs	r3, r2
 8001780:	80bb      	strh	r3, [r7, #4]

	/* Clock Select */
	send_cfg |= BF_VAL(adc_context.clock_sel, ADC_CLK_SEL_BCNT, ADC_CLK_SEL_BOFF);
 8001782:	4b1c      	ldr	r3, [pc, #112]	@ (80017f4 <_adcSetClockCfg+0xd4>)
 8001784:	7ddb      	ldrb	r3, [r3, #23]
 8001786:	01db      	lsls	r3, r3, #7
 8001788:	b29b      	uxth	r3, r3
 800178a:	b2db      	uxtb	r3, r3
 800178c:	b29a      	uxth	r2, r3
 800178e:	88bb      	ldrh	r3, [r7, #4]
 8001790:	4313      	orrs	r3, r2
 8001792:	80bb      	strh	r3, [r7, #4]

	/* OSR Config */
	send_cfg |= BF_VAL(adc_context.osr_mode, ADC_OSR_MODE_BCNT, ADC_OSR_MODE_BOFF);
 8001794:	4b17      	ldr	r3, [pc, #92]	@ (80017f4 <_adcSetClockCfg+0xd4>)
 8001796:	7e1b      	ldrb	r3, [r3, #24]
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	b29b      	uxth	r3, r3
 800179c:	f003 031c 	and.w	r3, r3, #28
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	88bb      	ldrh	r3, [r7, #4]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	80bb      	strh	r3, [r7, #4]

	/* Power mode Config */
	send_cfg |= BF_VAL(adc_context.pwr_mode, ADC_PWR_MODE_BCNT, ADC_PWR_MODE_BOFF);
 80017a8:	4b12      	ldr	r3, [pc, #72]	@ (80017f4 <_adcSetClockCfg+0xd4>)
 80017aa:	7e5b      	ldrb	r3, [r3, #25]
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	88bb      	ldrh	r3, [r7, #4]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	80bb      	strh	r3, [r7, #4]

	ret = _adcWriteRegister(ADC_REG_ADDR_CLOCK, send_cfg);
 80017b8:	88bb      	ldrh	r3, [r7, #4]
 80017ba:	4619      	mov	r1, r3
 80017bc:	2003      	movs	r0, #3
 80017be:	f000 f8d1 	bl	8001964 <_adcWriteRegister>
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]

	if (ret == HAL_OK)
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d107      	bne.n	80017dc <_adcSetClockCfg+0xbc>
	{
		LogInfo("ADC Set Clock Config Success: %04X", send_cfg); //0F0E - 3854
 80017cc:	88bb      	ldrh	r3, [r7, #4]
 80017ce:	f240 22e9 	movw	r2, #745	@ 0x2e9
 80017d2:	4909      	ldr	r1, [pc, #36]	@ (80017f8 <_adcSetClockCfg+0xd8>)
 80017d4:	4809      	ldr	r0, [pc, #36]	@ (80017fc <_adcSetClockCfg+0xdc>)
 80017d6:	f002 f951 	bl	8003a7c <DEBUG_Printf>
 80017da:	e005      	b.n	80017e8 <_adcSetClockCfg+0xc8>
	}
	else
	{
		LogInfo("ADC Set Clock Config Failed");
 80017dc:	f240 22ed 	movw	r2, #749	@ 0x2ed
 80017e0:	4905      	ldr	r1, [pc, #20]	@ (80017f8 <_adcSetClockCfg+0xd8>)
 80017e2:	4807      	ldr	r0, [pc, #28]	@ (8001800 <_adcSetClockCfg+0xe0>)
 80017e4:	f002 f94a 	bl	8003a7c <DEBUG_Printf>
	}

	return ret;
 80017e8:	79fb      	ldrb	r3, [r7, #7]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000000 	.word	0x20000000
 80017f8:	0800a6b8 	.word	0x0800a6b8
 80017fc:	08009f80 	.word	0x08009f80
 8001800:	08009fb4 	.word	0x08009fb4

08001804 <_adcSetGainCfg>:

HAL_StatusTypeDef _adcSetGainCfg(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	71fb      	strb	r3, [r7, #7]

	uint16_t send_cfg = 0x00;
 800180e:	2300      	movs	r3, #0
 8001810:	80bb      	strh	r3, [r7, #4]

	/* Clock Config */
	send_cfg |= BF_VAL(adc_context.ch_cfg[ADC_CH_0].gain_mode, ADC_GAIN_CFG_CH0_BCNT, ADC_GAIN_CFG_CH0_BOFF);
 8001812:	4b22      	ldr	r3, [pc, #136]	@ (800189c <_adcSetGainCfg+0x98>)
 8001814:	7edb      	ldrb	r3, [r3, #27]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	b29a      	uxth	r2, r3
 800181c:	88bb      	ldrh	r3, [r7, #4]
 800181e:	4313      	orrs	r3, r2
 8001820:	80bb      	strh	r3, [r7, #4]
	send_cfg |= BF_VAL(adc_context.ch_cfg[ADC_CH_1].gain_mode, ADC_GAIN_CFG_CH1_BCNT, ADC_GAIN_CFG_CH1_BOFF);
 8001822:	4b1e      	ldr	r3, [pc, #120]	@ (800189c <_adcSetGainCfg+0x98>)
 8001824:	7f9b      	ldrb	r3, [r3, #30]
 8001826:	011b      	lsls	r3, r3, #4
 8001828:	b29b      	uxth	r3, r3
 800182a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800182e:	b29a      	uxth	r2, r3
 8001830:	88bb      	ldrh	r3, [r7, #4]
 8001832:	4313      	orrs	r3, r2
 8001834:	80bb      	strh	r3, [r7, #4]
	send_cfg |= BF_VAL(adc_context.ch_cfg[ADC_CH_2].gain_mode, ADC_GAIN_CFG_CH2_BCNT, ADC_GAIN_CFG_CH2_BOFF);
 8001836:	4b19      	ldr	r3, [pc, #100]	@ (800189c <_adcSetGainCfg+0x98>)
 8001838:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800183c:	021b      	lsls	r3, r3, #8
 800183e:	b29b      	uxth	r3, r3
 8001840:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001844:	b29a      	uxth	r2, r3
 8001846:	88bb      	ldrh	r3, [r7, #4]
 8001848:	4313      	orrs	r3, r2
 800184a:	80bb      	strh	r3, [r7, #4]
	send_cfg |= BF_VAL(adc_context.ch_cfg[ADC_CH_3].gain_mode, ADC_GAIN_CFG_CH3_BCNT, ADC_GAIN_CFG_CH3_BOFF);
 800184c:	4b13      	ldr	r3, [pc, #76]	@ (800189c <_adcSetGainCfg+0x98>)
 800184e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001852:	031b      	lsls	r3, r3, #12
 8001854:	b29b      	uxth	r3, r3
 8001856:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800185a:	b29a      	uxth	r2, r3
 800185c:	88bb      	ldrh	r3, [r7, #4]
 800185e:	4313      	orrs	r3, r2
 8001860:	80bb      	strh	r3, [r7, #4]

	ret = _adcWriteRegister(ADC_REG_ADDR_GAIN, send_cfg);
 8001862:	88bb      	ldrh	r3, [r7, #4]
 8001864:	4619      	mov	r1, r3
 8001866:	2004      	movs	r0, #4
 8001868:	f000 f87c 	bl	8001964 <_adcWriteRegister>
 800186c:	4603      	mov	r3, r0
 800186e:	71fb      	strb	r3, [r7, #7]

	if (ret == HAL_OK)
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d107      	bne.n	8001886 <_adcSetGainCfg+0x82>
	{
		LogInfo("ADC Set Gain Config Success: %04X", send_cfg); //0000
 8001876:	88bb      	ldrh	r3, [r7, #4]
 8001878:	f240 3203 	movw	r2, #771	@ 0x303
 800187c:	4908      	ldr	r1, [pc, #32]	@ (80018a0 <_adcSetGainCfg+0x9c>)
 800187e:	4809      	ldr	r0, [pc, #36]	@ (80018a4 <_adcSetGainCfg+0xa0>)
 8001880:	f002 f8fc 	bl	8003a7c <DEBUG_Printf>
 8001884:	e005      	b.n	8001892 <_adcSetGainCfg+0x8e>
	}
	else
	{
		LogInfo("ADC Set Gain Config Failed");
 8001886:	f240 3207 	movw	r2, #775	@ 0x307
 800188a:	4905      	ldr	r1, [pc, #20]	@ (80018a0 <_adcSetGainCfg+0x9c>)
 800188c:	4806      	ldr	r0, [pc, #24]	@ (80018a8 <_adcSetGainCfg+0xa4>)
 800188e:	f002 f8f5 	bl	8003a7c <DEBUG_Printf>
	}

	return ret;
 8001892:	79fb      	ldrb	r3, [r7, #7]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000000 	.word	0x20000000
 80018a0:	0800a6c8 	.word	0x0800a6c8
 80018a4:	08009fe0 	.word	0x08009fe0
 80018a8:	0800a014 	.word	0x0800a014

080018ac <_adcSetChMuxCfg>:

HAL_StatusTypeDef _adcSetChMuxCfg(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret = HAL_OK;
 80018b2:	2300      	movs	r3, #0
 80018b4:	71fb      	strb	r3, [r7, #7]

	uint16_t send_cfg = 0x00;
 80018b6:	2300      	movs	r3, #0
 80018b8:	80bb      	strh	r3, [r7, #4]
	uint8_t input_mode[ADC_CH_NUM] = {0, };
 80018ba:	2300      	movs	r3, #0
 80018bc:	603b      	str	r3, [r7, #0]

	input_mode[0] = adc_context.ch_cfg[ADC_CH_0].input_mode;
 80018be:	4b25      	ldr	r3, [pc, #148]	@ (8001954 <_adcSetChMuxCfg+0xa8>)
 80018c0:	7f1b      	ldrb	r3, [r3, #28]
 80018c2:	703b      	strb	r3, [r7, #0]
	input_mode[1] = adc_context.ch_cfg[ADC_CH_1].input_mode;
 80018c4:	4b23      	ldr	r3, [pc, #140]	@ (8001954 <_adcSetChMuxCfg+0xa8>)
 80018c6:	7fdb      	ldrb	r3, [r3, #31]
 80018c8:	707b      	strb	r3, [r7, #1]
	input_mode[2] = adc_context.ch_cfg[ADC_CH_2].input_mode;
 80018ca:	4b22      	ldr	r3, [pc, #136]	@ (8001954 <_adcSetChMuxCfg+0xa8>)
 80018cc:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80018d0:	70bb      	strb	r3, [r7, #2]
	input_mode[3] = adc_context.ch_cfg[ADC_CH_3].input_mode;
 80018d2:	4b20      	ldr	r3, [pc, #128]	@ (8001954 <_adcSetChMuxCfg+0xa8>)
 80018d4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80018d8:	70fb      	strb	r3, [r7, #3]

	/* Ch MUX Config */
	for (uint8_t idx = 0; idx < 4; idx++) //5
 80018da:	2300      	movs	r3, #0
 80018dc:	71bb      	strb	r3, [r7, #6]
 80018de:	e030      	b.n	8001942 <_adcSetChMuxCfg+0x96>
	{
		send_cfg = BF_VAL(input_mode[idx], ADC_CH_CFG_MUX_BCNT, ADC_CH_CFG_MUX_BOFF);
 80018e0:	79bb      	ldrb	r3, [r7, #6]
 80018e2:	3308      	adds	r3, #8
 80018e4:	443b      	add	r3, r7
 80018e6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	f003 0306 	and.w	r3, r3, #6
 80018f2:	80bb      	strh	r3, [r7, #4]
		ret = _adcWriteRegister(ADC_REG_ADDR_CH0_CFG + 5*idx, send_cfg);
 80018f4:	79bb      	ldrb	r3, [r7, #6]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	461a      	mov	r2, r3
 80018fa:	0092      	lsls	r2, r2, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	b29b      	uxth	r3, r3
 8001900:	3309      	adds	r3, #9
 8001902:	b29b      	uxth	r3, r3
 8001904:	88ba      	ldrh	r2, [r7, #4]
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f000 f82b 	bl	8001964 <_adcWriteRegister>
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]

		if (ret == HAL_OK)
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d10a      	bne.n	800192e <_adcSetChMuxCfg+0x82>
		{
			LogInfo("ADC Set MUX CH%d Config Success: %04X", idx, send_cfg); // CH1234 success : 0000
 8001918:	79ba      	ldrb	r2, [r7, #6]
 800191a:	88bb      	ldrh	r3, [r7, #4]
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	4613      	mov	r3, r2
 8001920:	f240 3221 	movw	r2, #801	@ 0x321
 8001924:	490c      	ldr	r1, [pc, #48]	@ (8001958 <_adcSetChMuxCfg+0xac>)
 8001926:	480d      	ldr	r0, [pc, #52]	@ (800195c <_adcSetChMuxCfg+0xb0>)
 8001928:	f002 f8a8 	bl	8003a7c <DEBUG_Printf>
 800192c:	e006      	b.n	800193c <_adcSetChMuxCfg+0x90>
		}
		else
		{
			LogError("ADC Set MUX CH%d Config Failed");
 800192e:	f240 3225 	movw	r2, #805	@ 0x325
 8001932:	4909      	ldr	r1, [pc, #36]	@ (8001958 <_adcSetChMuxCfg+0xac>)
 8001934:	480a      	ldr	r0, [pc, #40]	@ (8001960 <_adcSetChMuxCfg+0xb4>)
 8001936:	f002 f8a1 	bl	8003a7c <DEBUG_Printf>
			break;
 800193a:	e005      	b.n	8001948 <_adcSetChMuxCfg+0x9c>
	for (uint8_t idx = 0; idx < 4; idx++) //5
 800193c:	79bb      	ldrb	r3, [r7, #6]
 800193e:	3301      	adds	r3, #1
 8001940:	71bb      	strb	r3, [r7, #6]
 8001942:	79bb      	ldrb	r3, [r7, #6]
 8001944:	2b03      	cmp	r3, #3
 8001946:	d9cb      	bls.n	80018e0 <_adcSetChMuxCfg+0x34>
		}
	}

	return ret;
 8001948:	79fb      	ldrb	r3, [r7, #7]
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000000 	.word	0x20000000
 8001958:	0800a6d8 	.word	0x0800a6d8
 800195c:	0800a040 	.word	0x0800a040
 8001960:	0800a078 	.word	0x0800a078

08001964 <_adcWriteRegister>:

HAL_StatusTypeDef _adcWriteRegister(uint16_t reg, uint16_t data)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af02      	add	r7, sp, #8
 800196a:	4603      	mov	r3, r0
 800196c:	460a      	mov	r2, r1
 800196e:	80fb      	strh	r3, [r7, #6]
 8001970:	4613      	mov	r3, r2
 8001972:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 8001974:	2300      	movs	r3, #0
 8001976:	75fb      	strb	r3, [r7, #23]
	uint16_t send_data[3] = {0x00,};
 8001978:	f107 030c 	add.w	r3, r7, #12
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	809a      	strh	r2, [r3, #4]
	int16_t resp_data = 0x00;
 8001982:	2300      	movs	r3, #0
 8001984:	817b      	strh	r3, [r7, #10]
	uint16_t save_data = 0x00;
 8001986:	2300      	movs	r3, #0
 8001988:	813b      	strh	r3, [r7, #8]
	uint16_t resp_chk;

	send_data[0] = ADC_CMD_WREG_HEAD;
 800198a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800198e:	81bb      	strh	r3, [r7, #12]
	send_data[0] |= BF_VAL(reg, ADC_CMD_W_R_REG_ADDR_BCNT, ADC_CMD_W_R_REG_ADDR_BOFF);
 8001990:	89ba      	ldrh	r2, [r7, #12]
 8001992:	88fb      	ldrh	r3, [r7, #6]
 8001994:	01db      	lsls	r3, r3, #7
 8001996:	b29b      	uxth	r3, r3
 8001998:	f403 53fc 	and.w	r3, r3, #8064	@ 0x1f80
 800199c:	b29b      	uxth	r3, r3
 800199e:	4313      	orrs	r3, r2
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	81bb      	strh	r3, [r7, #12]
	send_data[1] = data;
 80019a4:	88bb      	ldrh	r3, [r7, #4]
 80019a6:	81fb      	strh	r3, [r7, #14]

	ret = _adcTransmit(&send_data[0], 3);
 80019a8:	f107 030c 	add.w	r3, r7, #12
 80019ac:	2103      	movs	r1, #3
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 f9b2 	bl	8001d18 <_adcTransmit>
 80019b4:	4603      	mov	r3, r0
 80019b6:	75fb      	strb	r3, [r7, #23]

	if (ret == HAL_OK)
 80019b8:	7dfb      	ldrb	r3, [r7, #23]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d107      	bne.n	80019ce <_adcWriteRegister+0x6a>
	{
		ret = _adcReceive(&resp_data, 1);
 80019be:	f107 030a 	add.w	r3, r7, #10
 80019c2:	2101      	movs	r1, #1
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 f9f5 	bl	8001db4 <_adcReceive>
 80019ca:	4603      	mov	r3, r0
 80019cc:	75fb      	strb	r3, [r7, #23]
	}

	if (ret == HAL_OK)
 80019ce:	7dfb      	ldrb	r3, [r7, #23]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d129      	bne.n	8001a28 <_adcWriteRegister+0xc4>
	{
		resp_chk = BF_GET(resp_data, ADC_CMD_W_R_REG_ADDR_BCNT, ADC_CMD_W_R_REG_ADDR_BOFF);
 80019d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	09db      	lsrs	r3, r3, #7
 80019dc:	b29b      	uxth	r3, r3
 80019de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019e2:	82bb      	strh	r3, [r7, #20]
		if (reg != resp_chk)
 80019e4:	88fa      	ldrh	r2, [r7, #6]
 80019e6:	8abb      	ldrh	r3, [r7, #20]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d00b      	beq.n	8001a04 <_adcWriteRegister+0xa0>
		{
			LogError("Register Write failed, cmd don't match: %04X | %04X", reg, resp_chk);
 80019ec:	88fa      	ldrh	r2, [r7, #6]
 80019ee:	8abb      	ldrh	r3, [r7, #20]
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	4613      	mov	r3, r2
 80019f4:	f240 3245 	movw	r2, #837	@ 0x345
 80019f8:	491b      	ldr	r1, [pc, #108]	@ (8001a68 <_adcWriteRegister+0x104>)
 80019fa:	481c      	ldr	r0, [pc, #112]	@ (8001a6c <_adcWriteRegister+0x108>)
 80019fc:	f002 f83e 	bl	8003a7c <DEBUG_Printf>

			ret = HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	75fb      	strb	r3, [r7, #23]
		}

		resp_chk = BF_GET(resp_data, ADC_CMD_W_R_DATA_NUM_BCNT, ADC_CMD_W_R_DATA_NUM_BOFF);
 8001a04:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a0e:	82bb      	strh	r3, [r7, #20]
		if ( resp_chk != 0)
 8001a10:	8abb      	ldrh	r3, [r7, #20]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d008      	beq.n	8001a28 <_adcWriteRegister+0xc4>
		{
			LogError("Register Write failed, len don't match: 0 | %d", resp_chk);
 8001a16:	8abb      	ldrh	r3, [r7, #20]
 8001a18:	f240 324d 	movw	r2, #845	@ 0x34d
 8001a1c:	4912      	ldr	r1, [pc, #72]	@ (8001a68 <_adcWriteRegister+0x104>)
 8001a1e:	4814      	ldr	r0, [pc, #80]	@ (8001a70 <_adcWriteRegister+0x10c>)
 8001a20:	f002 f82c 	bl	8003a7c <DEBUG_Printf>

			ret = HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (ret == HAL_OK)
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d117      	bne.n	8001a5e <_adcWriteRegister+0xfa>
	{
		ret = _adcReadRegister(reg, 1, &save_data);
 8001a2e:	f107 0208 	add.w	r2, r7, #8
 8001a32:	88fb      	ldrh	r3, [r7, #6]
 8001a34:	2101      	movs	r1, #1
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 f81e 	bl	8001a78 <_adcReadRegister>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	75fb      	strb	r3, [r7, #23]

		if (data != save_data)
 8001a40:	893b      	ldrh	r3, [r7, #8]
 8001a42:	88ba      	ldrh	r2, [r7, #4]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d00a      	beq.n	8001a5e <_adcWriteRegister+0xfa>
		{
			LogError("Write & Read data don't match: %04X | %04X", data, save_data);
 8001a48:	88bb      	ldrh	r3, [r7, #4]
 8001a4a:	893a      	ldrh	r2, [r7, #8]
 8001a4c:	9200      	str	r2, [sp, #0]
 8001a4e:	f240 3259 	movw	r2, #857	@ 0x359
 8001a52:	4905      	ldr	r1, [pc, #20]	@ (8001a68 <_adcWriteRegister+0x104>)
 8001a54:	4807      	ldr	r0, [pc, #28]	@ (8001a74 <_adcWriteRegister+0x110>)
 8001a56:	f002 f811 	bl	8003a7c <DEBUG_Printf>

			ret = HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	75fb      	strb	r3, [r7, #23]
		}
	}

	return ret;
 8001a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	0800a6e8 	.word	0x0800a6e8
 8001a6c:	0800a0a8 	.word	0x0800a0a8
 8001a70:	0800a0f0 	.word	0x0800a0f0
 8001a74:	0800a130 	.word	0x0800a130

08001a78 <_adcReadRegister>:

HAL_StatusTypeDef _adcReadRegister(uint16_t reg, uint8_t len, uint16_t *p_data)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b0ce      	sub	sp, #312	@ 0x138
 8001a7c:	af02      	add	r7, sp, #8
 8001a7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001a82:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001a8c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8001a90:	4602      	mov	r2, r0
 8001a92:	801a      	strh	r2, [r3, #0]
 8001a94:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001a98:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8001a9c:	460a      	mov	r2, r1
 8001a9e:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ret = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
	uint8_t read_len = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
	uint16_t send_data[ADC_SPI_WORD_MIN_BUFF_SIZE] = {0x00,};
 8001aac:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001ab0:	2230      	movs	r2, #48	@ 0x30
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f006 f925 	bl	8007d04 <memset>
	int16_t read_data[ADC_SPI_WORD_MAX_BUFF_SIZE] = {0x00,};
 8001aba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001abe:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	23f0      	movs	r3, #240	@ 0xf0
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	2100      	movs	r1, #0
 8001aca:	f006 f91b 	bl	8007d04 <memset>

	if (len > ADC_CMD_RREG_MAX_LEN)
 8001ace:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001ad2:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b0a      	cmp	r3, #10
 8001ada:	d90d      	bls.n	8001af8 <_adcReadRegister+0x80>
	{
		read_len = ADC_CMD_RREG_MAX_LEN - 1;
 8001adc:	2309      	movs	r3, #9
 8001ade:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
		LogWarn("Read len changed: %d -> %d", read_len, ADC_CMD_RREG_MAX_LEN);
 8001ae2:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8001ae6:	220a      	movs	r2, #10
 8001ae8:	9200      	str	r2, [sp, #0]
 8001aea:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8001aee:	4946      	ldr	r1, [pc, #280]	@ (8001c08 <_adcReadRegister+0x190>)
 8001af0:	4846      	ldr	r0, [pc, #280]	@ (8001c0c <_adcReadRegister+0x194>)
 8001af2:	f001 ffc3 	bl	8003a7c <DEBUG_Printf>
 8001af6:	e01c      	b.n	8001b32 <_adcReadRegister+0xba>
	}
	else if (len == 0)
 8001af8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001afc:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10d      	bne.n	8001b22 <_adcReadRegister+0xaa>
	{
		read_len = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
		LogWarn("Read len changed: %d -> %d", read_len, 1);
 8001b0c:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8001b10:	2201      	movs	r2, #1
 8001b12:	9200      	str	r2, [sp, #0]
 8001b14:	f240 3271 	movw	r2, #881	@ 0x371
 8001b18:	493b      	ldr	r1, [pc, #236]	@ (8001c08 <_adcReadRegister+0x190>)
 8001b1a:	483c      	ldr	r0, [pc, #240]	@ (8001c0c <_adcReadRegister+0x194>)
 8001b1c:	f001 ffae 	bl	8003a7c <DEBUG_Printf>
 8001b20:	e007      	b.n	8001b32 <_adcReadRegister+0xba>
	}
	else
	{
		read_len = len - 1;
 8001b22:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001b26:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
	}

	send_data[0] = ADC_CMD_RREG_HEAD;
 8001b32:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001b36:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
	send_data[0] |= BF_VAL(reg, ADC_CMD_W_R_REG_ADDR_BCNT, ADC_CMD_W_R_REG_ADDR_BOFF);
 8001b3a:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	@ 0xfc
 8001b3e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001b42:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	01db      	lsls	r3, r3, #7
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	f403 53fc 	and.w	r3, r3, #8064	@ 0x1f80
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	4313      	orrs	r3, r2
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
	send_data[0] |= BF_VAL(read_len, ADC_CMD_W_R_DATA_NUM_BCNT, ADC_CMD_W_R_DATA_NUM_BOFF);
 8001b5a:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	@ 0xfc
 8001b5e:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc

	ret = _adcTransmit(&send_data[0], 2);
 8001b72:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001b76:	2102      	movs	r1, #2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 f8cd 	bl	8001d18 <_adcTransmit>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

	if (ret == HAL_OK)
 8001b84:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10d      	bne.n	8001ba8 <_adcReadRegister+0x130>
	{
		ret = _adcReceive(&read_data[0], len);
 8001b8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001b90:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8001b94:	781a      	ldrb	r2, [r3, #0]
 8001b96:	f107 030c 	add.w	r3, r7, #12
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f000 f909 	bl	8001db4 <_adcReceive>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
	}

	if (ret == HAL_OK)
 8001ba8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d124      	bne.n	8001bfa <_adcReadRegister+0x182>
	{
		if (len > 1)
 8001bb0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001bb4:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d912      	bls.n	8001be4 <_adcReadRegister+0x16c>
		{
			/* [ACK] [DATA 1] [DATA 2] ... [DATA N] [CRC] */
			memcpy(p_data, &read_data[1], 2 * (len + 2));
 8001bbe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001bc2:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	3302      	adds	r3, #2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	461a      	mov	r2, r3
 8001bce:	f107 030c 	add.w	r3, r7, #12
 8001bd2:	1c99      	adds	r1, r3, #2
 8001bd4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001bd8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001bdc:	6818      	ldr	r0, [r3, #0]
 8001bde:	f006 f90c 	bl	8007dfa <memcpy>
 8001be2:	e00a      	b.n	8001bfa <_adcReadRegister+0x182>
		}
		else
		{
			memcpy(p_data, &read_data[0], 2);
 8001be4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001be8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001bec:	881a      	ldrh	r2, [r3, #0]
 8001bee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001bf2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	801a      	strh	r2, [r3, #0]
		}
	}

	return ret;
 8001bfa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	0800a6fc 	.word	0x0800a6fc
 8001c0c:	0800a16c 	.word	0x0800a16c

08001c10 <_adcTransmitReceive>:

#define USE_SPI_TXRX_FUNC	0
HAL_StatusTypeDef _adcTransmitReceive(uint16_t *p_tx_data, int16_t *p_rx_data, uint8_t len)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b0aa      	sub	sp, #168	@ 0xa8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret = HAL_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	uint8_t tx_buff[ADC_SPI_WORD_MIN_BUFF_SIZE] = {0, };
 8001c24:	2300      	movs	r3, #0
 8001c26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001c2a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	60da      	str	r2, [r3, #12]
 8001c38:	611a      	str	r2, [r3, #16]
	uint8_t rx_buff[ADC_SPI_WORD_MAX_BUFF_SIZE] = {0, };
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	f107 0318 	add.w	r3, r7, #24
 8001c42:	2274      	movs	r2, #116	@ 0x74
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f006 f85c 	bl	8007d04 <memset>
	uint8_t word_size = adc_context.word_size.byte_num;
 8001c4c:	4b30      	ldr	r3, [pc, #192]	@ (8001d10 <_adcTransmitReceive+0x100>)
 8001c4e:	7d9b      	ldrb	r3, [r3, #22]
 8001c50:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6

	if (adc_context.spi_handle != NULL)
 8001c54:	4b2e      	ldr	r3, [pc, #184]	@ (8001d10 <_adcTransmitReceive+0x100>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d024      	beq.n	8001ca6 <_adcTransmitReceive+0x96>
	{
		/* Make Packet */
		_makeWordPacket(p_tx_data, len, &tx_buff[0]);
 8001c5c:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	4619      	mov	r1, r3
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f000 f8f1 	bl	8001e4c <_makeWordPacket>

		/* Send Data */
		ADC_SPI_Select();
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2110      	movs	r1, #16
 8001c6e:	4829      	ldr	r0, [pc, #164]	@ (8001d14 <_adcTransmitReceive+0x104>)
 8001c70:	f002 fd00 	bl	8004674 <HAL_GPIO_WritePin>
#if USE_SPI_TXRX_FUNC == 1
		ret = HAL_SPI_TransmitReceive(adc_context.spi_handle, &tx_buff[0], &rx_buff[0], word_size * len, 500);
#else
		ret = HAL_SPI_Transmit(adc_context.spi_handle, &tx_buff[0], word_size * len, 500);
 8001c74:	4b26      	ldr	r3, [pc, #152]	@ (8001d10 <_adcTransmitReceive+0x100>)
 8001c76:	6818      	ldr	r0, [r3, #0]
 8001c78:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	fb12 f303 	smulbb	r3, r2, r3
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8001c8c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001c90:	f004 f92b 	bl	8005eea <HAL_SPI_Transmit>
 8001c94:	4603      	mov	r3, r0
 8001c96:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
		ADC_SPI_Deselect();
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	2110      	movs	r1, #16
 8001c9e:	481d      	ldr	r0, [pc, #116]	@ (8001d14 <_adcTransmitReceive+0x104>)
 8001ca0:	f002 fce8 	bl	8004674 <HAL_GPIO_WritePin>
 8001ca4:	e002      	b.n	8001cac <_adcTransmitReceive+0x9c>
#endif
	}
	else
	{
		ret = HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	}

#if USE_SPI_TXRX_FUNC == 1
#else
	if (ret == HAL_OK)
 8001cac:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d117      	bne.n	8001ce4 <_adcTransmitReceive+0xd4>
	{
		ADC_SPI_Select();
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2110      	movs	r1, #16
 8001cb8:	4816      	ldr	r0, [pc, #88]	@ (8001d14 <_adcTransmitReceive+0x104>)
 8001cba:	f002 fcdb 	bl	8004674 <HAL_GPIO_WritePin>
		ret = HAL_SPI_Receive(adc_context.spi_handle, &rx_buff[0], word_size * len, 500);
 8001cbe:	4b14      	ldr	r3, [pc, #80]	@ (8001d10 <_adcTransmitReceive+0x100>)
 8001cc0:	6818      	ldr	r0, [r3, #0]
 8001cc2:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	fb12 f303 	smulbb	r3, r2, r3
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	f107 0114 	add.w	r1, r7, #20
 8001cd6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001cda:	f004 fa49 	bl	8006170 <HAL_SPI_Receive>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	}
#endif

	if (ret == HAL_OK)
 8001ce4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d106      	bne.n	8001cfa <_adcTransmitReceive+0xea>
	{
		/* Parse Packet */
		_parseWordPacket(&rx_buff[0], len, p_rx_data);
 8001cec:	79f9      	ldrb	r1, [r7, #7]
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 f8e5 	bl	8001ec4 <_parseWordPacket>
	}

	ADC_SPI_Deselect();
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	2110      	movs	r1, #16
 8001cfe:	4805      	ldr	r0, [pc, #20]	@ (8001d14 <_adcTransmitReceive+0x104>)
 8001d00:	f002 fcb8 	bl	8004674 <HAL_GPIO_WritePin>

	return ret;
 8001d04:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	37a8      	adds	r7, #168	@ 0xa8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000000 	.word	0x20000000
 8001d14:	40020000 	.word	0x40020000

08001d18 <_adcTransmit>:

HAL_StatusTypeDef _adcTransmit(uint16_t *p_data, uint8_t len)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	@ 0x28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef ret = HAL_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t tx_buff[ADC_SPI_WORD_MIN_BUFF_SIZE] = {0, };
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	f107 0310 	add.w	r3, r7, #16
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	609a      	str	r2, [r3, #8]
 8001d3a:	60da      	str	r2, [r3, #12]
 8001d3c:	611a      	str	r2, [r3, #16]
	uint8_t word_size = adc_context.word_size.byte_num;
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dac <_adcTransmit+0x94>)
 8001d40:	7d9b      	ldrb	r3, [r3, #22]
 8001d42:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	if (adc_context.spi_handle != NULL)
 8001d46:	4b19      	ldr	r3, [pc, #100]	@ (8001dac <_adcTransmit+0x94>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d01f      	beq.n	8001d8e <_adcTransmit+0x76>
	{
		/* Make Packet */
		_makeWordPacket(p_data, len, &tx_buff[0]);
 8001d4e:	f107 020c 	add.w	r2, r7, #12
 8001d52:	78fb      	ldrb	r3, [r7, #3]
 8001d54:	4619      	mov	r1, r3
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f878 	bl	8001e4c <_makeWordPacket>

		/* Send Data */
		ADC_SPI_Select();
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2110      	movs	r1, #16
 8001d60:	4813      	ldr	r0, [pc, #76]	@ (8001db0 <_adcTransmit+0x98>)
 8001d62:	f002 fc87 	bl	8004674 <HAL_GPIO_WritePin>
		ret = HAL_SPI_Transmit(adc_context.spi_handle, &tx_buff[0], word_size * len, 500);
 8001d66:	4b11      	ldr	r3, [pc, #68]	@ (8001dac <_adcTransmit+0x94>)
 8001d68:	6818      	ldr	r0, [r3, #0]
 8001d6a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	78fb      	ldrb	r3, [r7, #3]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	fb12 f303 	smulbb	r3, r2, r3
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	f107 010c 	add.w	r1, r7, #12
 8001d7e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001d82:	f004 f8b2 	bl	8005eea <HAL_SPI_Transmit>
 8001d86:	4603      	mov	r3, r0
 8001d88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001d8c:	e002      	b.n	8001d94 <_adcTransmit+0x7c>
	}
	else
	{
		ret = HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	ADC_SPI_Deselect();
 8001d94:	2201      	movs	r2, #1
 8001d96:	2110      	movs	r1, #16
 8001d98:	4805      	ldr	r0, [pc, #20]	@ (8001db0 <_adcTransmit+0x98>)
 8001d9a:	f002 fc6b 	bl	8004674 <HAL_GPIO_WritePin>

	return ret;
 8001d9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3728      	adds	r7, #40	@ 0x28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000000 	.word	0x20000000
 8001db0:	40020000 	.word	0x40020000

08001db4 <_adcReceive>:

HAL_StatusTypeDef _adcReceive(int16_t *p_data, uint8_t len)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b0a2      	sub	sp, #136	@ 0x88
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef ret = HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	uint8_t rx_buff[ADC_SPI_WORD_MAX_BUFF_SIZE] = {0, };
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	f107 0310 	add.w	r3, r7, #16
 8001dce:	2274      	movs	r2, #116	@ 0x74
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f005 ff96 	bl	8007d04 <memset>
	uint8_t word_size = adc_context.word_size.byte_num;
 8001dd8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e44 <_adcReceive+0x90>)
 8001dda:	7d9b      	ldrb	r3, [r3, #22]
 8001ddc:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

	if (adc_context.spi_handle != NULL)
 8001de0:	4b18      	ldr	r3, [pc, #96]	@ (8001e44 <_adcReceive+0x90>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d01f      	beq.n	8001e28 <_adcReceive+0x74>
	{
		/* Read Data */
		ADC_SPI_Select();
 8001de8:	2200      	movs	r2, #0
 8001dea:	2110      	movs	r1, #16
 8001dec:	4816      	ldr	r0, [pc, #88]	@ (8001e48 <_adcReceive+0x94>)
 8001dee:	f002 fc41 	bl	8004674 <HAL_GPIO_WritePin>
		ret = HAL_SPI_Receive(adc_context.spi_handle, &rx_buff[0], word_size * len, 500);
 8001df2:	4b14      	ldr	r3, [pc, #80]	@ (8001e44 <_adcReceive+0x90>)
 8001df4:	6818      	ldr	r0, [r3, #0]
 8001df6:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	78fb      	ldrb	r3, [r7, #3]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	fb12 f303 	smulbb	r3, r2, r3
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	f107 010c 	add.w	r1, r7, #12
 8001e0a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001e0e:	f004 f9af 	bl	8006170 <HAL_SPI_Receive>
 8001e12:	4603      	mov	r3, r0
 8001e14:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

		/* Parse Packet */
		_parseWordPacket(&rx_buff[0], len, p_data);
 8001e18:	78f9      	ldrb	r1, [r7, #3]
 8001e1a:	f107 030c 	add.w	r3, r7, #12
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f000 f84f 	bl	8001ec4 <_parseWordPacket>
 8001e26:	e002      	b.n	8001e2e <_adcReceive+0x7a>
	}
	else
	{
		ret = HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	}

	ADC_SPI_Deselect();
 8001e2e:	2201      	movs	r2, #1
 8001e30:	2110      	movs	r1, #16
 8001e32:	4805      	ldr	r0, [pc, #20]	@ (8001e48 <_adcReceive+0x94>)
 8001e34:	f002 fc1e 	bl	8004674 <HAL_GPIO_WritePin>

	return ret;
 8001e38:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3788      	adds	r7, #136	@ 0x88
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000000 	.word	0x20000000
 8001e48:	40020000 	.word	0x40020000

08001e4c <_makeWordPacket>:

void _makeWordPacket(uint16_t *p_data, uint8_t len, uint8_t *p_result)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b087      	sub	sp, #28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	460b      	mov	r3, r1
 8001e56:	607a      	str	r2, [r7, #4]
 8001e58:	72fb      	strb	r3, [r7, #11]
	uint8_t word_size = adc_context.word_size.byte_num;
 8001e5a:	4b19      	ldr	r3, [pc, #100]	@ (8001ec0 <_makeWordPacket+0x74>)
 8001e5c:	7d9b      	ldrb	r3, [r3, #22]
 8001e5e:	75bb      	strb	r3, [r7, #22]

	for (uint8_t idx = 0; idx < len; idx++)
 8001e60:	2300      	movs	r3, #0
 8001e62:	75fb      	strb	r3, [r7, #23]
 8001e64:	e020      	b.n	8001ea8 <_makeWordPacket+0x5c>
	{
		p_result[word_size * idx] = (p_data[idx] >> 8) & 0xFF;
 8001e66:	7dfb      	ldrb	r3, [r7, #23]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	b299      	uxth	r1, r3
 8001e74:	7dbb      	ldrb	r3, [r7, #22]
 8001e76:	7dfa      	ldrb	r2, [r7, #23]
 8001e78:	fb02 f303 	mul.w	r3, r2, r3
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4413      	add	r3, r2
 8001e82:	b2ca      	uxtb	r2, r1
 8001e84:	701a      	strb	r2, [r3, #0]
		p_result[word_size * idx + 1] = p_data[idx] & 0xFF;
 8001e86:	7dfb      	ldrb	r3, [r7, #23]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	8819      	ldrh	r1, [r3, #0]
 8001e90:	7dbb      	ldrb	r3, [r7, #22]
 8001e92:	7dfa      	ldrb	r2, [r7, #23]
 8001e94:	fb02 f303 	mul.w	r3, r2, r3
 8001e98:	3301      	adds	r3, #1
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	b2ca      	uxtb	r2, r1
 8001ea0:	701a      	strb	r2, [r3, #0]
	for (uint8_t idx = 0; idx < len; idx++)
 8001ea2:	7dfb      	ldrb	r3, [r7, #23]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	75fb      	strb	r3, [r7, #23]
 8001ea8:	7dfa      	ldrb	r2, [r7, #23]
 8001eaa:	7afb      	ldrb	r3, [r7, #11]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d3da      	bcc.n	8001e66 <_makeWordPacket+0x1a>

		/* padding.. */
	}
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	371c      	adds	r7, #28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	20000000 	.word	0x20000000

08001ec4 <_parseWordPacket>:

void _parseWordPacket(uint8_t *p_data, uint8_t len, int16_t *p_result)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b087      	sub	sp, #28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	607a      	str	r2, [r7, #4]
 8001ed0:	72fb      	strb	r3, [r7, #11]
	uint8_t word_size = adc_context.word_size.byte_num;
 8001ed2:	4b17      	ldr	r3, [pc, #92]	@ (8001f30 <_parseWordPacket+0x6c>)
 8001ed4:	7d9b      	ldrb	r3, [r3, #22]
 8001ed6:	75bb      	strb	r3, [r7, #22]

	for (uint8_t idx = 0; idx < len; idx++)
 8001ed8:	2300      	movs	r3, #0
 8001eda:	75fb      	strb	r3, [r7, #23]
 8001edc:	e01c      	b.n	8001f18 <_parseWordPacket+0x54>
	{
		p_result[idx] = (((p_data[word_size * idx] << 8) & 0xFF00) | (p_data[word_size * idx + 1] & 0xFF));
 8001ede:	7dbb      	ldrb	r3, [r7, #22]
 8001ee0:	7dfa      	ldrb	r2, [r7, #23]
 8001ee2:	fb02 f303 	mul.w	r3, r2, r3
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4413      	add	r3, r2
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	021b      	lsls	r3, r3, #8
 8001ef0:	b219      	sxth	r1, r3
 8001ef2:	7dbb      	ldrb	r3, [r7, #22]
 8001ef4:	7dfa      	ldrb	r2, [r7, #23]
 8001ef6:	fb02 f303 	mul.w	r3, r2, r3
 8001efa:	3301      	adds	r3, #1
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	4413      	add	r3, r2
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	b21a      	sxth	r2, r3
 8001f04:	7dfb      	ldrb	r3, [r7, #23]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	4403      	add	r3, r0
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	b212      	sxth	r2, r2
 8001f10:	801a      	strh	r2, [r3, #0]
	for (uint8_t idx = 0; idx < len; idx++)
 8001f12:	7dfb      	ldrb	r3, [r7, #23]
 8001f14:	3301      	adds	r3, #1
 8001f16:	75fb      	strb	r3, [r7, #23]
 8001f18:	7dfa      	ldrb	r2, [r7, #23]
 8001f1a:	7afb      	ldrb	r3, [r7, #11]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d3de      	bcc.n	8001ede <_parseWordPacket+0x1a>
	}
}
 8001f20:	bf00      	nop
 8001f22:	bf00      	nop
 8001f24:	371c      	adds	r7, #28
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	20000000 	.word	0x20000000

08001f34 <DAC_Init>:
dacContext_t dac_context;


/* Public user code ----------------------------------------------------------*/
HAL_StatusTypeDef DAC_Init(I2C_HandleTypeDef *p_handle)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	73fb      	strb	r3, [r7, #15]

	if (p_handle != NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00d      	beq.n	8001f62 <DAC_Init+0x2e>
	{
		/* Regist handle */
		dac_context.i2c_handle = (I2C_HandleTypeDef*) p_handle;
 8001f46:	4a51      	ldr	r2, [pc, #324]	@ (800208c <DAC_Init+0x158>)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6013      	str	r3, [r2, #0]

		ret = HAL_I2C_IsDeviceReady(dac_context.i2c_handle, DAC63204_ADDRESS, 64, HAL_MAX_DELAY);
 8001f4c:	4b4f      	ldr	r3, [pc, #316]	@ (800208c <DAC_Init+0x158>)
 8001f4e:	6818      	ldr	r0, [r3, #0]
 8001f50:	f04f 33ff 	mov.w	r3, #4294967295
 8001f54:	2240      	movs	r2, #64	@ 0x40
 8001f56:	2190      	movs	r1, #144	@ 0x90
 8001f58:	f002 fe02 	bl	8004b60 <HAL_I2C_IsDeviceReady>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	73fb      	strb	r3, [r7, #15]
 8001f60:	e001      	b.n	8001f66 <DAC_Init+0x32>
	}
	else
	{
		ret = HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	73fb      	strb	r3, [r7, #15]
	}

	if (ret != HAL_ERROR)
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	f000 808a 	beq.w	8002082 <DAC_Init+0x14e>
	{
		ret = _dacReset();
 8001f6e:	f000 f929 	bl	80021c4 <_dacReset>
 8001f72:	4603      	mov	r3, r0
 8001f74:	73fb      	strb	r3, [r7, #15]

		/* Chip Setting */
		/* Power-up
		 * voltage output on all channels
		 * enables internal reference */
		ret = _dacWrite(DAC_REG_ADDR_COMMON_CFG, 0x1249);
 8001f76:	f241 2149 	movw	r1, #4681	@ 0x1249
 8001f7a:	201f      	movs	r0, #31
 8001f7c:	f000 f940 	bl	8002200 <_dacWrite>
 8001f80:	4603      	mov	r3, r0
 8001f82:	73fb      	strb	r3, [r7, #15]

		/* Set channel 0-3 gain setting
		 * 1.5x internal reference (1.8 V) */
		ret = _dacWrite(DAC_REG_ADDR_DAC_0_VOUT_CMP_CFG, 0x0800); //0x0800 = 2048
 8001f84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f88:	2003      	movs	r0, #3
 8001f8a:	f000 f939 	bl	8002200 <_dacWrite>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	73fb      	strb	r3, [r7, #15]
		ret = _dacWrite(DAC_REG_ADDR_DAC_1_VOUT_CMP_CFG, 0x0800);
 8001f92:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f96:	2009      	movs	r0, #9
 8001f98:	f000 f932 	bl	8002200 <_dacWrite>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	73fb      	strb	r3, [r7, #15]
		ret = _dacWrite(DAC_REG_ADDR_DAC_2_VOUT_CMP_CFG, 0x0800);
 8001fa0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001fa4:	200f      	movs	r0, #15
 8001fa6:	f000 f92b 	bl	8002200 <_dacWrite>
 8001faa:	4603      	mov	r3, r0
 8001fac:	73fb      	strb	r3, [r7, #15]
		ret = _dacWrite(DAC_REG_ADDR_DAC_3_VOUT_CMP_CFG, 0x0800);
 8001fae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001fb2:	2015      	movs	r0, #21
 8001fb4:	f000 f924 	bl	8002200 <_dacWrite>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	73fb      	strb	r3, [r7, #15]

		/* Configure GPI
		 * for Margin-High
		 * Low trigger for all channels */
		ret = _dacWrite(DAC_REG_ADDR_GPIO_CFG, 0x01F5);
 8001fbc:	f240 11f5 	movw	r1, #501	@ 0x1f5
 8001fc0:	2024      	movs	r0, #36	@ 0x24
 8001fc2:	f000 f91d 	bl	8002200 <_dacWrite>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	73fb      	strb	r3, [r7, #15]

		/* Set Channel 0 */
		/* Slew rate and Code step
		 * CODE_STEP: 2 LSB
		 * SLEW_RATE: 60.72 µs/step */
		ret = _dacWrite(DAC_REG_ADDR_DAC_0_FUNC_CFG, 0x0017);
 8001fca:	2117      	movs	r1, #23
 8001fcc:	2006      	movs	r0, #6
 8001fce:	f000 f917 	bl	8002200 <_dacWrite>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	73fb      	strb	r3, [r7, #15]
		/* DAC margin high code
		 * OUTPUT RANGE: 1.8 V
		 * MIRGIN_HIGE: 1.164 V
		 * the 10-bit hex code for 1.164 V is 0x296 With 16-bit left alignment this becomes 0xA540 */
		ret = _dacWrite(DAC_REG_ADDR_DAC_0_MARGIN_HIGH, 0xA540);
 8001fd6:	f24a 5140 	movw	r1, #42304	@ 0xa540
 8001fda:	2001      	movs	r0, #1
 8001fdc:	f000 f910 	bl	8002200 <_dacWrite>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	73fb      	strb	r3, [r7, #15]
		/* DAC margin low code
		 * OUTPUT RANGE: 1.8 V
		 * MIRGIN_LOW: 36 mV
		 * the 10-bit hex code for 36 mV is 0x14. With 16-bit left alignment, this becomes 0x0500 */
		ret = _dacWrite(DAC_REG_ADDR_DAC_0_MARGIN_LOW, 0x0500);
 8001fe4:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8001fe8:	2002      	movs	r0, #2
 8001fea:	f000 f909 	bl	8002200 <_dacWrite>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	73fb      	strb	r3, [r7, #15]

		/* Set Channel 1 */
		ret = _dacWrite(DAC_REG_ADDR_DAC_1_FUNC_CFG, 0x0017);
 8001ff2:	2117      	movs	r1, #23
 8001ff4:	200c      	movs	r0, #12
 8001ff6:	f000 f903 	bl	8002200 <_dacWrite>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	73fb      	strb	r3, [r7, #15]
		ret = _dacWrite(DAC_REG_ADDR_DAC_1_MARGIN_HIGH, 0xA540);
 8001ffe:	f24a 5140 	movw	r1, #42304	@ 0xa540
 8002002:	2007      	movs	r0, #7
 8002004:	f000 f8fc 	bl	8002200 <_dacWrite>
 8002008:	4603      	mov	r3, r0
 800200a:	73fb      	strb	r3, [r7, #15]
		ret = _dacWrite(DAC_REG_ADDR_DAC_1_MARGIN_LOW, 0x0500);
 800200c:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8002010:	2008      	movs	r0, #8
 8002012:	f000 f8f5 	bl	8002200 <_dacWrite>
 8002016:	4603      	mov	r3, r0
 8002018:	73fb      	strb	r3, [r7, #15]

		/* Set Channel 2 */
		ret = _dacWrite(DAC_REG_ADDR_DAC_2_FUNC_CFG, 0x0017);
 800201a:	2117      	movs	r1, #23
 800201c:	2012      	movs	r0, #18
 800201e:	f000 f8ef 	bl	8002200 <_dacWrite>
 8002022:	4603      	mov	r3, r0
 8002024:	73fb      	strb	r3, [r7, #15]
		ret = _dacWrite(DAC_REG_ADDR_DAC_2_MARGIN_HIGH, 0xA540);
 8002026:	f24a 5140 	movw	r1, #42304	@ 0xa540
 800202a:	200d      	movs	r0, #13
 800202c:	f000 f8e8 	bl	8002200 <_dacWrite>
 8002030:	4603      	mov	r3, r0
 8002032:	73fb      	strb	r3, [r7, #15]
		ret = _dacWrite(DAC_REG_ADDR_DAC_2_MARGIN_LOW, 0x0500);
 8002034:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8002038:	200e      	movs	r0, #14
 800203a:	f000 f8e1 	bl	8002200 <_dacWrite>
 800203e:	4603      	mov	r3, r0
 8002040:	73fb      	strb	r3, [r7, #15]

		/* Set Channel 3 */
		ret = _dacWrite(DAC_REG_ADDR_DAC_3_FUNC_CFG, 0x0017);
 8002042:	2117      	movs	r1, #23
 8002044:	2018      	movs	r0, #24
 8002046:	f000 f8db 	bl	8002200 <_dacWrite>
 800204a:	4603      	mov	r3, r0
 800204c:	73fb      	strb	r3, [r7, #15]
		ret = _dacWrite(DAC_REG_ADDR_DAC_3_MARGIN_HIGH, 0xA540);
 800204e:	f24a 5140 	movw	r1, #42304	@ 0xa540
 8002052:	2013      	movs	r0, #19
 8002054:	f000 f8d4 	bl	8002200 <_dacWrite>
 8002058:	4603      	mov	r3, r0
 800205a:	73fb      	strb	r3, [r7, #15]
		ret = _dacWrite(DAC_REG_ADDR_DAC_3_MARGIN_LOW, 0x0500);
 800205c:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8002060:	2014      	movs	r0, #20
 8002062:	f000 f8cd 	bl	8002200 <_dacWrite>
 8002066:	4603      	mov	r3, r0
 8002068:	73fb      	strb	r3, [r7, #15]

		/* Init Interface */
		ret = _dacWrite(DAC_REG_ADDR_INTERFACE_CFG, 0x0000);
 800206a:	2100      	movs	r1, #0
 800206c:	2026      	movs	r0, #38	@ 0x26
 800206e:	f000 f8c7 	bl	8002200 <_dacWrite>
 8002072:	4603      	mov	r3, r0
 8002074:	73fb      	strb	r3, [r7, #15]

		/* Save to NVM */
		ret = _dacWrite(DAC_REG_ADDR_COMMON_TRIGGER, 0x0002);
 8002076:	2102      	movs	r1, #2
 8002078:	2020      	movs	r0, #32
 800207a:	f000 f8c1 	bl	8002200 <_dacWrite>
 800207e:	4603      	mov	r3, r0
 8002080:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8002082:	7bfb      	ldrb	r3, [r7, #15]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	2000019c 	.word	0x2000019c

08002090 <DAC_SetData>:

HAL_StatusTypeDef DAC_SetData(DAC_chSel_t channel, uint16_t data)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af02      	add	r7, sp, #8
 8002096:	4603      	mov	r3, r0
 8002098:	460a      	mov	r2, r1
 800209a:	71fb      	strb	r3, [r7, #7]
 800209c:	4613      	mov	r3, r2
 800209e:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	73fb      	strb	r3, [r7, #15]
	uint16_t write_data = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	81bb      	strh	r3, [r7, #12]

	if (data > 0xFF0) //FF0 = 4080
 80020a8:	88bb      	ldrh	r3, [r7, #4]
 80020aa:	f5b3 6f7f 	cmp.w	r3, #4080	@ 0xff0
 80020ae:	d90c      	bls.n	80020ca <DAC_SetData+0x3a>
	{
		write_data = 0xFF0;
 80020b0:	f44f 637f 	mov.w	r3, #4080	@ 0xff0
 80020b4:	81bb      	strh	r3, [r7, #12]
		LogWarn("Invalid DAC Set value, Value changed. %04X ==> %04X", data, write_data);
 80020b6:	88ba      	ldrh	r2, [r7, #4]
 80020b8:	89bb      	ldrh	r3, [r7, #12]
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	4613      	mov	r3, r2
 80020be:	229e      	movs	r2, #158	@ 0x9e
 80020c0:	493b      	ldr	r1, [pc, #236]	@ (80021b0 <DAC_SetData+0x120>)
 80020c2:	483c      	ldr	r0, [pc, #240]	@ (80021b4 <DAC_SetData+0x124>)
 80020c4:	f001 fcda 	bl	8003a7c <DEBUG_Printf>
 80020c8:	e002      	b.n	80020d0 <DAC_SetData+0x40>
	}
	else
	{
		write_data = (data << 4) & 0xFFF0; //FFF0 = 65520
 80020ca:	88bb      	ldrh	r3, [r7, #4]
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	81bb      	strh	r3, [r7, #12]
	}

	if (dac_context.i2c_handle != NULL)
 80020d0:	4b39      	ldr	r3, [pc, #228]	@ (80021b8 <DAC_SetData+0x128>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d064      	beq.n	80021a2 <DAC_SetData+0x112>
	{
		switch (channel)
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	2b05      	cmp	r3, #5
 80020dc:	d84b      	bhi.n	8002176 <DAC_SetData+0xe6>
 80020de:	a201      	add	r2, pc, #4	@ (adr r2, 80020e4 <DAC_SetData+0x54>)
 80020e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e4:	080020fd 	.word	0x080020fd
 80020e8:	0800210d 	.word	0x0800210d
 80020ec:	0800211d 	.word	0x0800211d
 80020f0:	0800212d 	.word	0x0800212d
 80020f4:	08002177 	.word	0x08002177
 80020f8:	0800213d 	.word	0x0800213d
		{
		case DAC_CH_0:
			ret = _dacWrite(DAC_REG_ADDR_DAC_0_DATA, write_data);
 80020fc:	89bb      	ldrh	r3, [r7, #12]
 80020fe:	4619      	mov	r1, r3
 8002100:	2019      	movs	r0, #25
 8002102:	f000 f87d 	bl	8002200 <_dacWrite>
 8002106:	4603      	mov	r3, r0
 8002108:	73fb      	strb	r3, [r7, #15]
			break;
 800210a:	e037      	b.n	800217c <DAC_SetData+0xec>

		case DAC_CH_1:
			ret = _dacWrite(DAC_REG_ADDR_DAC_1_DATA, write_data);
 800210c:	89bb      	ldrh	r3, [r7, #12]
 800210e:	4619      	mov	r1, r3
 8002110:	201a      	movs	r0, #26
 8002112:	f000 f875 	bl	8002200 <_dacWrite>
 8002116:	4603      	mov	r3, r0
 8002118:	73fb      	strb	r3, [r7, #15]
			break;
 800211a:	e02f      	b.n	800217c <DAC_SetData+0xec>

		case DAC_CH_2:
			ret = _dacWrite(DAC_REG_ADDR_DAC_2_DATA, write_data);
 800211c:	89bb      	ldrh	r3, [r7, #12]
 800211e:	4619      	mov	r1, r3
 8002120:	201b      	movs	r0, #27
 8002122:	f000 f86d 	bl	8002200 <_dacWrite>
 8002126:	4603      	mov	r3, r0
 8002128:	73fb      	strb	r3, [r7, #15]
			break;
 800212a:	e027      	b.n	800217c <DAC_SetData+0xec>

		case DAC_CH_3:
			ret = _dacWrite(DAC_REG_ADDR_DAC_3_DATA, write_data);
 800212c:	89bb      	ldrh	r3, [r7, #12]
 800212e:	4619      	mov	r1, r3
 8002130:	201c      	movs	r0, #28
 8002132:	f000 f865 	bl	8002200 <_dacWrite>
 8002136:	4603      	mov	r3, r0
 8002138:	73fb      	strb	r3, [r7, #15]
			break;
 800213a:	e01f      	b.n	800217c <DAC_SetData+0xec>

		case DAC_CH_ALL:
			ret = _dacWrite(DAC_REG_ADDR_DAC_0_DATA, write_data);
 800213c:	89bb      	ldrh	r3, [r7, #12]
 800213e:	4619      	mov	r1, r3
 8002140:	2019      	movs	r0, #25
 8002142:	f000 f85d 	bl	8002200 <_dacWrite>
 8002146:	4603      	mov	r3, r0
 8002148:	73fb      	strb	r3, [r7, #15]
			ret = _dacWrite(DAC_REG_ADDR_DAC_1_DATA, write_data);
 800214a:	89bb      	ldrh	r3, [r7, #12]
 800214c:	4619      	mov	r1, r3
 800214e:	201a      	movs	r0, #26
 8002150:	f000 f856 	bl	8002200 <_dacWrite>
 8002154:	4603      	mov	r3, r0
 8002156:	73fb      	strb	r3, [r7, #15]
			ret = _dacWrite(DAC_REG_ADDR_DAC_2_DATA, write_data);
 8002158:	89bb      	ldrh	r3, [r7, #12]
 800215a:	4619      	mov	r1, r3
 800215c:	201b      	movs	r0, #27
 800215e:	f000 f84f 	bl	8002200 <_dacWrite>
 8002162:	4603      	mov	r3, r0
 8002164:	73fb      	strb	r3, [r7, #15]
			ret = _dacWrite(DAC_REG_ADDR_DAC_3_DATA, write_data);
 8002166:	89bb      	ldrh	r3, [r7, #12]
 8002168:	4619      	mov	r1, r3
 800216a:	201c      	movs	r0, #28
 800216c:	f000 f848 	bl	8002200 <_dacWrite>
 8002170:	4603      	mov	r3, r0
 8002172:	73fb      	strb	r3, [r7, #15]
			break;
 8002174:	e002      	b.n	800217c <DAC_SetData+0xec>

		default:
			ret = HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	73fb      	strb	r3, [r7, #15]
			break;
 800217a:	bf00      	nop
		}

		if (ret == HAL_OK)
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d109      	bne.n	8002196 <DAC_SetData+0x106>
		{
			LogDebug("DAC Set ch: %d, data: %04X\r\n", channel, data);
 8002182:	79fa      	ldrb	r2, [r7, #7]
 8002184:	88bb      	ldrh	r3, [r7, #4]
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	4613      	mov	r3, r2
 800218a:	22c7      	movs	r2, #199	@ 0xc7
 800218c:	4908      	ldr	r1, [pc, #32]	@ (80021b0 <DAC_SetData+0x120>)
 800218e:	480b      	ldr	r0, [pc, #44]	@ (80021bc <DAC_SetData+0x12c>)
 8002190:	f001 fc74 	bl	8003a7c <DEBUG_Printf>
 8002194:	e007      	b.n	80021a6 <DAC_SetData+0x116>
		}
		else
		{
			LogError("DAC Set failed\r\n");
 8002196:	22cb      	movs	r2, #203	@ 0xcb
 8002198:	4905      	ldr	r1, [pc, #20]	@ (80021b0 <DAC_SetData+0x120>)
 800219a:	4809      	ldr	r0, [pc, #36]	@ (80021c0 <DAC_SetData+0x130>)
 800219c:	f001 fc6e 	bl	8003a7c <DEBUG_Printf>
 80021a0:	e001      	b.n	80021a6 <DAC_SetData+0x116>
		}
	}
	else
	{
		ret = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	0800a710 	.word	0x0800a710
 80021b4:	0800a198 	.word	0x0800a198
 80021b8:	2000019c 	.word	0x2000019c
 80021bc:	0800a1dc 	.word	0x0800a1dc
 80021c0:	0800a20c 	.word	0x0800a20c

080021c4 <_dacReset>:
	return ret;
}

/* Private user code ---------------------------------------------------------*/
HAL_StatusTypeDef _dacReset(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret = HAL_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_data[2] = { 0, };
 80021ce:	2300      	movs	r3, #0
 80021d0:	80bb      	strh	r3, [r7, #4]

	/* Make packet */
	tx_data[0] = 0x00;
 80021d2:	2300      	movs	r3, #0
 80021d4:	713b      	strb	r3, [r7, #4]
	tx_data[1] = 0x06;
 80021d6:	2306      	movs	r3, #6
 80021d8:	717b      	strb	r3, [r7, #5]

	ret = HAL_I2C_Master_Transmit(dac_context.i2c_handle, DAC63204_ADDRESS,	&tx_data[0], 2, 50);
 80021da:	4b08      	ldr	r3, [pc, #32]	@ (80021fc <_dacReset+0x38>)
 80021dc:	6818      	ldr	r0, [r3, #0]
 80021de:	1d3a      	adds	r2, r7, #4
 80021e0:	2332      	movs	r3, #50	@ 0x32
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	2302      	movs	r3, #2
 80021e6:	2190      	movs	r1, #144	@ 0x90
 80021e8:	f002 fbbc 	bl	8004964 <HAL_I2C_Master_Transmit>
 80021ec:	4603      	mov	r3, r0
 80021ee:	71fb      	strb	r3, [r7, #7]

	return ret;
 80021f0:	79fb      	ldrb	r3, [r7, #7]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	2000019c 	.word	0x2000019c

08002200 <_dacWrite>:


HAL_StatusTypeDef _dacWrite(uint8_t reg, uint16_t data)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af02      	add	r7, sp, #8
 8002206:	4603      	mov	r3, r0
 8002208:	460a      	mov	r2, r1
 800220a:	71fb      	strb	r3, [r7, #7]
 800220c:	4613      	mov	r3, r2
 800220e:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_data[3] = { 0, };
 8002214:	4b0f      	ldr	r3, [pc, #60]	@ (8002254 <_dacWrite+0x54>)
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	81bb      	strh	r3, [r7, #12]
 800221a:	2300      	movs	r3, #0
 800221c:	73bb      	strb	r3, [r7, #14]

	/* Make packet */
	tx_data[0] = reg;
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data >> 8) & 0xFF;
 8002222:	88bb      	ldrh	r3, [r7, #4]
 8002224:	0a1b      	lsrs	r3, r3, #8
 8002226:	b29b      	uxth	r3, r3
 8002228:	b2db      	uxtb	r3, r3
 800222a:	737b      	strb	r3, [r7, #13]
	tx_data[2] = data & 0xFF;
 800222c:	88bb      	ldrh	r3, [r7, #4]
 800222e:	b2db      	uxtb	r3, r3
 8002230:	73bb      	strb	r3, [r7, #14]

	ret = HAL_I2C_Master_Transmit(dac_context.i2c_handle, DAC63204_ADDRESS,	&tx_data[0], 3, 50);
 8002232:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <_dacWrite+0x58>)
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	f107 020c 	add.w	r2, r7, #12
 800223a:	2332      	movs	r3, #50	@ 0x32
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	2303      	movs	r3, #3
 8002240:	2190      	movs	r1, #144	@ 0x90
 8002242:	f002 fb8f 	bl	8004964 <HAL_I2C_Master_Transmit>
 8002246:	4603      	mov	r3, r0
 8002248:	73fb      	strb	r3, [r7, #15]

	return ret;
 800224a:	7bfb      	ldrb	r3, [r7, #15]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	0800a230 	.word	0x0800a230
 8002258:	2000019c 	.word	0x2000019c

0800225c <LED_TASK_Init>:
	{LED_MEAS_STATE_DONE,    "DONE"    },
};

/* Public user code ----------------------------------------------------------*/
void LED_TASK_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
	_ledTaskInit();
 8002260:	f000 fb26 	bl	80028b0 <_ledTaskInit>
	_ledTaskMeasCfgInit();
 8002264:	f000 fb4e 	bl	8002904 <_ledTaskMeasCfgInit>
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}

0800226c <LED_TASK_Start>:

	return ret;
}

void LED_TASK_Start(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	71fb      	strb	r3, [r7, #7]

	if (led_task.task_state != LED_TASK_STATE_RUN)
 8002276:	4b10      	ldr	r3, [pc, #64]	@ (80022b8 <LED_TASK_Start+0x4c>)
 8002278:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800227c:	2b01      	cmp	r3, #1
 800227e:	d017      	beq.n	80022b0 <LED_TASK_Start+0x44>
	{
		/* Activate ADC */
		ret = ADC_Start();
 8002280:	f7fe ff58 	bl	8001134 <ADC_Start>
 8002284:	4603      	mov	r3, r0
 8002286:	71fb      	strb	r3, [r7, #7]

		if (ret == HAL_OK)
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d108      	bne.n	80022a0 <LED_TASK_Start+0x34>
		{
			LogInfo("ADC Start Success");
 800228e:	22ca      	movs	r2, #202	@ 0xca
 8002290:	490a      	ldr	r1, [pc, #40]	@ (80022bc <LED_TASK_Start+0x50>)
 8002292:	480b      	ldr	r0, [pc, #44]	@ (80022c0 <LED_TASK_Start+0x54>)
 8002294:	f001 fbf2 	bl	8003a7c <DEBUG_Printf>
			_taskStateChanger(LED_TASK_STATE_RUN);
 8002298:	2001      	movs	r0, #1
 800229a:	f000 f971 	bl	8002580 <_taskStateChanger>
		{
			LogError("ADC Start Failed");
			_taskStateChanger(LED_TASK_STATE_IDLE);
		}
	}
}
 800229e:	e007      	b.n	80022b0 <LED_TASK_Start+0x44>
			LogError("ADC Start Failed");
 80022a0:	22d0      	movs	r2, #208	@ 0xd0
 80022a2:	4906      	ldr	r1, [pc, #24]	@ (80022bc <LED_TASK_Start+0x50>)
 80022a4:	4807      	ldr	r0, [pc, #28]	@ (80022c4 <LED_TASK_Start+0x58>)
 80022a6:	f001 fbe9 	bl	8003a7c <DEBUG_Printf>
			_taskStateChanger(LED_TASK_STATE_IDLE);
 80022aa:	2000      	movs	r0, #0
 80022ac:	f000 f968 	bl	8002580 <_taskStateChanger>
}
 80022b0:	bf00      	nop
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	20000040 	.word	0x20000040
 80022bc:	0800a71c 	.word	0x0800a71c
 80022c0:	0800a258 	.word	0x0800a258
 80022c4:	0800a27c 	.word	0x0800a27c

080022c8 <LED_TASK>:
		_measStateChanger(LED_MEAS_STATE_STANDBY);
	}
}

void LED_TASK(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
	switch(led_task.task_state)
 80022cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002300 <LED_TASK+0x38>)
 80022ce:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d010      	beq.n	80022f8 <LED_TASK+0x30>
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d000      	beq.n	80022dc <LED_TASK+0x14>
		_ledMeasOperation();

		break;

	default:
		break;
 80022da:	e00e      	b.n	80022fa <LED_TASK+0x32>
		if(led_task.meas_state != LED_MEAS_STATE_WAIT_START_CMD)
 80022dc:	4b08      	ldr	r3, [pc, #32]	@ (8002300 <LED_TASK+0x38>)
 80022de:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d005      	beq.n	80022f2 <LED_TASK+0x2a>
			led_task.time_cnt += 1;
 80022e6:	4b06      	ldr	r3, [pc, #24]	@ (8002300 <LED_TASK+0x38>)
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	3301      	adds	r3, #1
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	4b04      	ldr	r3, [pc, #16]	@ (8002300 <LED_TASK+0x38>)
 80022f0:	801a      	strh	r2, [r3, #0]
		_ledMeasOperation();
 80022f2:	f000 f807 	bl	8002304 <_ledMeasOperation>
		break;
 80022f6:	e000      	b.n	80022fa <LED_TASK+0x32>
		break;
 80022f8:	bf00      	nop
	}
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000040 	.word	0x20000040

08002304 <_ledMeasOperation>:
	_measStateChanger(LED_MEAS_STATE_DONE);
}

/* Private user code ---------------------------------------------------------*/
HAL_StatusTypeDef _ledMeasOperation(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret = HAL_OK;
 800230a:	2300      	movs	r3, #0
 800230c:	71fb      	strb	r3, [r7, #7]

	/******************************* [ MODE 1 ] *******************************/
	if (led_task.meas_mode == LED_MEAS_MODE_1)
 800230e:	4b92      	ldr	r3, [pc, #584]	@ (8002558 <_ledMeasOperation+0x254>)
 8002310:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002314:	2b00      	cmp	r3, #0
 8002316:	f040 80b1 	bne.w	800247c <_ledMeasOperation+0x178>
	{
		switch (led_task.meas_state)
 800231a:	4b8f      	ldr	r3, [pc, #572]	@ (8002558 <_ledMeasOperation+0x254>)
 800231c:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8002320:	2b04      	cmp	r3, #4
 8002322:	f200 810b 	bhi.w	800253c <_ledMeasOperation+0x238>
 8002326:	a201      	add	r2, pc, #4	@ (adr r2, 800232c <_ledMeasOperation+0x28>)
 8002328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232c:	0800253d 	.word	0x0800253d
 8002330:	08002341 	.word	0x08002341
 8002334:	080023b7 	.word	0x080023b7
 8002338:	080023f5 	.word	0x080023f5
 800233c:	0800246b 	.word	0x0800246b
			case LED_MEAS_STATE_WAIT_START_CMD:
				/* Wait for Command */
				break;

			case LED_MEAS_STATE_STANDBY:
				if(led_task.time_cnt < led_task.meas_cfg.wait_time)
 8002340:	4b85      	ldr	r3, [pc, #532]	@ (8002558 <_ledMeasOperation+0x254>)
 8002342:	881a      	ldrh	r2, [r3, #0]
 8002344:	4b84      	ldr	r3, [pc, #528]	@ (8002558 <_ledMeasOperation+0x254>)
 8002346:	899b      	ldrh	r3, [r3, #12]
 8002348:	429a      	cmp	r2, r3
 800234a:	d20e      	bcs.n	800236a <_ledMeasOperation+0x66>
				{
					/* LED ON */
	//				_opperateLEDOn();
					_ledOnOff(led_task.led_schedule[led_task.schedule_idx].led_ch, true);
 800234c:	4b82      	ldr	r3, [pc, #520]	@ (8002558 <_ledMeasOperation+0x254>)
 800234e:	789b      	ldrb	r3, [r3, #2]
 8002350:	4a81      	ldr	r2, [pc, #516]	@ (8002558 <_ledMeasOperation+0x254>)
 8002352:	3304      	adds	r3, #4
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	789b      	ldrb	r3, [r3, #2]
 800235a:	2101      	movs	r1, #1
 800235c:	4618      	mov	r0, r3
 800235e:	f000 f9ff 	bl	8002760 <_ledOnOff>
					_measStateChanger(LED_MEAS_STATE_STANDBY);
 8002362:	2001      	movs	r0, #1
 8002364:	f000 f952 	bl	800260c <_measStateChanger>
					led_task.time_cnt = 0;

					LogInfo("LED SCHEDULE [%d] [LED CH: %d]", led_task.schedule_idx, led_task.led_schedule[led_task.schedule_idx].led_ch);
					//led_task.led_schedule[led_task.schedule_idx].led_ch
				}
				break;
 8002368:	e0ea      	b.n	8002540 <_ledMeasOperation+0x23c>
				else if(led_task.time_cnt >= led_task.meas_cfg.wait_time)
 800236a:	4b7b      	ldr	r3, [pc, #492]	@ (8002558 <_ledMeasOperation+0x254>)
 800236c:	881a      	ldrh	r2, [r3, #0]
 800236e:	4b7a      	ldr	r3, [pc, #488]	@ (8002558 <_ledMeasOperation+0x254>)
 8002370:	899b      	ldrh	r3, [r3, #12]
 8002372:	429a      	cmp	r2, r3
 8002374:	f0c0 80e4 	bcc.w	8002540 <_ledMeasOperation+0x23c>
					ret = ADC_ReqAvr(&led_task.meas_cfg, _ledTaskAvrReqCallback);
 8002378:	4978      	ldr	r1, [pc, #480]	@ (800255c <_ledMeasOperation+0x258>)
 800237a:	4879      	ldr	r0, [pc, #484]	@ (8002560 <_ledMeasOperation+0x25c>)
 800237c:	f7fe feea 	bl	8001154 <ADC_ReqAvr>
 8002380:	4603      	mov	r3, r0
 8002382:	71fb      	strb	r3, [r7, #7]
					_measStateChanger(LED_MEAS_STATE_MEAS);
 8002384:	2002      	movs	r0, #2
 8002386:	f000 f941 	bl	800260c <_measStateChanger>
					led_task.time_cnt = 0;
 800238a:	4b73      	ldr	r3, [pc, #460]	@ (8002558 <_ledMeasOperation+0x254>)
 800238c:	2200      	movs	r2, #0
 800238e:	801a      	strh	r2, [r3, #0]
					LogInfo("LED SCHEDULE [%d] [LED CH: %d]", led_task.schedule_idx, led_task.led_schedule[led_task.schedule_idx].led_ch);
 8002390:	4b71      	ldr	r3, [pc, #452]	@ (8002558 <_ledMeasOperation+0x254>)
 8002392:	789b      	ldrb	r3, [r3, #2]
 8002394:	4619      	mov	r1, r3
 8002396:	4b70      	ldr	r3, [pc, #448]	@ (8002558 <_ledMeasOperation+0x254>)
 8002398:	789b      	ldrb	r3, [r3, #2]
 800239a:	4a6f      	ldr	r2, [pc, #444]	@ (8002558 <_ledMeasOperation+0x254>)
 800239c:	3304      	adds	r3, #4
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	789b      	ldrb	r3, [r3, #2]
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	460b      	mov	r3, r1
 80023a8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80023ac:	496d      	ldr	r1, [pc, #436]	@ (8002564 <_ledMeasOperation+0x260>)
 80023ae:	486e      	ldr	r0, [pc, #440]	@ (8002568 <_ledMeasOperation+0x264>)
 80023b0:	f001 fb64 	bl	8003a7c <DEBUG_Printf>
				break;
 80023b4:	e0c4      	b.n	8002540 <_ledMeasOperation+0x23c>

			case LED_MEAS_STATE_MEAS:
				/* Wait for Measure Done Callback.. */
				if (led_task.time_cnt > LED_MEAS_CFG_DEFAULT_MEAS_TIMEOUT_MS)
 80023b6:	4b68      	ldr	r3, [pc, #416]	@ (8002558 <_ledMeasOperation+0x254>)
 80023b8:	881b      	ldrh	r3, [r3, #0]
 80023ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023be:	4293      	cmp	r3, r2
 80023c0:	d90c      	bls.n	80023dc <_ledMeasOperation+0xd8>
				{
					LogError("Timeout");
 80023c2:	f240 1267 	movw	r2, #359	@ 0x167
 80023c6:	4967      	ldr	r1, [pc, #412]	@ (8002564 <_ledMeasOperation+0x260>)
 80023c8:	4868      	ldr	r0, [pc, #416]	@ (800256c <_ledMeasOperation+0x268>)
 80023ca:	f001 fb57 	bl	8003a7c <DEBUG_Printf>
					led_task.time_cnt = 0;
 80023ce:	4b62      	ldr	r3, [pc, #392]	@ (8002558 <_ledMeasOperation+0x254>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	801a      	strh	r2, [r3, #0]

					_measStateChanger(LED_MEAS_STATE_ERROR);
 80023d4:	2004      	movs	r0, #4
 80023d6:	f000 f919 	bl	800260c <_measStateChanger>
				else if (led_task.meas_done == true)
				{
					_measStateChanger(LED_MEAS_STATE_DONE);
					led_task.meas_done = false;
				}
				break;
 80023da:	e0b3      	b.n	8002544 <_ledMeasOperation+0x240>
				else if (led_task.meas_done == true)
 80023dc:	4b5e      	ldr	r3, [pc, #376]	@ (8002558 <_ledMeasOperation+0x254>)
 80023de:	7c1b      	ldrb	r3, [r3, #16]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 80af 	beq.w	8002544 <_ledMeasOperation+0x240>
					_measStateChanger(LED_MEAS_STATE_DONE);
 80023e6:	2003      	movs	r0, #3
 80023e8:	f000 f910 	bl	800260c <_measStateChanger>
					led_task.meas_done = false;
 80023ec:	4b5a      	ldr	r3, [pc, #360]	@ (8002558 <_ledMeasOperation+0x254>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	741a      	strb	r2, [r3, #16]
				break;
 80023f2:	e0a7      	b.n	8002544 <_ledMeasOperation+0x240>

			case LED_MEAS_STATE_DONE:
				/* LED OFF */
				_ledOnOff(led_task.led_schedule[led_task.schedule_idx].led_ch, false);
 80023f4:	4b58      	ldr	r3, [pc, #352]	@ (8002558 <_ledMeasOperation+0x254>)
 80023f6:	789b      	ldrb	r3, [r3, #2]
 80023f8:	4a57      	ldr	r2, [pc, #348]	@ (8002558 <_ledMeasOperation+0x254>)
 80023fa:	3304      	adds	r3, #4
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	789b      	ldrb	r3, [r3, #2]
 8002402:	2100      	movs	r1, #0
 8002404:	4618      	mov	r0, r3
 8002406:	f000 f9ab 	bl	8002760 <_ledOnOff>

				/* Select Next Schedule */
				if(++led_task.schedule_idx >= led_task.led_schedule_len)
 800240a:	4b53      	ldr	r3, [pc, #332]	@ (8002558 <_ledMeasOperation+0x254>)
 800240c:	789b      	ldrb	r3, [r3, #2]
 800240e:	3301      	adds	r3, #1
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4b51      	ldr	r3, [pc, #324]	@ (8002558 <_ledMeasOperation+0x254>)
 8002414:	709a      	strb	r2, [r3, #2]
 8002416:	4b50      	ldr	r3, [pc, #320]	@ (8002558 <_ledMeasOperation+0x254>)
 8002418:	789a      	ldrb	r2, [r3, #2]
 800241a:	4b4f      	ldr	r3, [pc, #316]	@ (8002558 <_ledMeasOperation+0x254>)
 800241c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002420:	429a      	cmp	r2, r3
 8002422:	d31b      	bcc.n	800245c <_ledMeasOperation+0x158>
				{
					led_task.schedule_idx = 0;
 8002424:	4b4c      	ldr	r3, [pc, #304]	@ (8002558 <_ledMeasOperation+0x254>)
 8002426:	2200      	movs	r2, #0
 8002428:	709a      	strb	r2, [r3, #2]
					led_task.time_cnt = 0;
 800242a:	4b4b      	ldr	r3, [pc, #300]	@ (8002558 <_ledMeasOperation+0x254>)
 800242c:	2200      	movs	r2, #0
 800242e:	801a      	strh	r2, [r3, #0]

					/* Send Result */
					LogInfo("Send Result to MMI");
 8002430:	f44f 72bf 	mov.w	r2, #382	@ 0x17e
 8002434:	494b      	ldr	r1, [pc, #300]	@ (8002564 <_ledMeasOperation+0x260>)
 8002436:	484e      	ldr	r0, [pc, #312]	@ (8002570 <_ledMeasOperation+0x26c>)
 8002438:	f001 fb20 	bl	8003a7c <DEBUG_Printf>
					MMI_M1ResultSender(&led_task.m1_result[0], led_task.led_schedule_len);
 800243c:	4b46      	ldr	r3, [pc, #280]	@ (8002558 <_ledMeasOperation+0x254>)
 800243e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002442:	4619      	mov	r1, r3
 8002444:	484b      	ldr	r0, [pc, #300]	@ (8002574 <_ledMeasOperation+0x270>)
 8002446:	f001 f927 	bl	8003698 <MMI_M1ResultSender>

					memset(&led_task.m1_result[0], 0, sizeof(MeasM1Result_t));
 800244a:	2208      	movs	r2, #8
 800244c:	2100      	movs	r1, #0
 800244e:	4849      	ldr	r0, [pc, #292]	@ (8002574 <_ledMeasOperation+0x270>)
 8002450:	f005 fc58 	bl	8007d04 <memset>
					_measStateChanger(LED_MEAS_STATE_WAIT_START_CMD);
 8002454:	2000      	movs	r0, #0
 8002456:	f000 f8d9 	bl	800260c <_measStateChanger>
				{
					led_task.time_cnt = 0;
					_measStateChanger(LED_MEAS_STATE_STANDBY);
				}
//				_opperateLEDOff();
				break;
 800245a:	e078      	b.n	800254e <_ledMeasOperation+0x24a>
					led_task.time_cnt = 0;
 800245c:	4b3e      	ldr	r3, [pc, #248]	@ (8002558 <_ledMeasOperation+0x254>)
 800245e:	2200      	movs	r2, #0
 8002460:	801a      	strh	r2, [r3, #0]
					_measStateChanger(LED_MEAS_STATE_STANDBY);
 8002462:	2001      	movs	r0, #1
 8002464:	f000 f8d2 	bl	800260c <_measStateChanger>
				break;
 8002468:	e071      	b.n	800254e <_ledMeasOperation+0x24a>

			case LED_MEAS_STATE_ERROR:
				LogError("ADC Measureing Failed, Go to initial state");
 800246a:	f240 128d 	movw	r2, #397	@ 0x18d
 800246e:	493d      	ldr	r1, [pc, #244]	@ (8002564 <_ledMeasOperation+0x260>)
 8002470:	4841      	ldr	r0, [pc, #260]	@ (8002578 <_ledMeasOperation+0x274>)
 8002472:	f001 fb03 	bl	8003a7c <DEBUG_Printf>
				_ledTaskInit();
 8002476:	f000 fa1b 	bl	80028b0 <_ledTaskInit>
				break;
 800247a:	e068      	b.n	800254e <_ledMeasOperation+0x24a>
			default:
				break;
		}
	}
	/******************************* [ MODE 3 ] *******************************/
	else if (led_task.meas_mode == LED_MEAS_MODE_3)
 800247c:	4b36      	ldr	r3, [pc, #216]	@ (8002558 <_ledMeasOperation+0x254>)
 800247e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002482:	2b01      	cmp	r3, #1
 8002484:	d163      	bne.n	800254e <_ledMeasOperation+0x24a>
	{
		switch (led_task.meas_state)
 8002486:	4b34      	ldr	r3, [pc, #208]	@ (8002558 <_ledMeasOperation+0x254>)
 8002488:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800248c:	2b04      	cmp	r3, #4
 800248e:	d85b      	bhi.n	8002548 <_ledMeasOperation+0x244>
 8002490:	a201      	add	r2, pc, #4	@ (adr r2, 8002498 <_ledMeasOperation+0x194>)
 8002492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002496:	bf00      	nop
 8002498:	08002549 	.word	0x08002549
 800249c:	080024ad 	.word	0x080024ad
 80024a0:	080024c7 	.word	0x080024c7
 80024a4:	08002503 	.word	0x08002503
 80024a8:	0800252b 	.word	0x0800252b
			case LED_MEAS_STATE_WAIT_START_CMD:
				/* Wait for Command */
				break;

			case LED_MEAS_STATE_STANDBY:
				ret = ADC_ReqAvr(&led_task.meas_cfg, _ledTaskAvrReqCallback);
 80024ac:	492b      	ldr	r1, [pc, #172]	@ (800255c <_ledMeasOperation+0x258>)
 80024ae:	482c      	ldr	r0, [pc, #176]	@ (8002560 <_ledMeasOperation+0x25c>)
 80024b0:	f7fe fe50 	bl	8001154 <ADC_ReqAvr>
 80024b4:	4603      	mov	r3, r0
 80024b6:	71fb      	strb	r3, [r7, #7]

				_measStateChanger(LED_MEAS_STATE_MEAS);
 80024b8:	2002      	movs	r0, #2
 80024ba:	f000 f8a7 	bl	800260c <_measStateChanger>
				led_task.time_cnt = 0;
 80024be:	4b26      	ldr	r3, [pc, #152]	@ (8002558 <_ledMeasOperation+0x254>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	801a      	strh	r2, [r3, #0]
				break;
 80024c4:	e043      	b.n	800254e <_ledMeasOperation+0x24a>

			case LED_MEAS_STATE_MEAS:
				/* Wait for Measure Done Callback.. */
				if (led_task.time_cnt > LED_MEAS_CFG_DEFAULT_MEAS_TIMEOUT_MS)
 80024c6:	4b24      	ldr	r3, [pc, #144]	@ (8002558 <_ledMeasOperation+0x254>)
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d90c      	bls.n	80024ec <_ledMeasOperation+0x1e8>
				{
					LogError("Timeout");
 80024d2:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80024d6:	4923      	ldr	r1, [pc, #140]	@ (8002564 <_ledMeasOperation+0x260>)
 80024d8:	4824      	ldr	r0, [pc, #144]	@ (800256c <_ledMeasOperation+0x268>)
 80024da:	f001 facf 	bl	8003a7c <DEBUG_Printf>
					led_task.time_cnt = 0;
 80024de:	4b1e      	ldr	r3, [pc, #120]	@ (8002558 <_ledMeasOperation+0x254>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	801a      	strh	r2, [r3, #0]

					_measStateChanger(LED_MEAS_STATE_ERROR);
 80024e4:	2004      	movs	r0, #4
 80024e6:	f000 f891 	bl	800260c <_measStateChanger>
				else if (led_task.meas_done == true)
				{
					_measStateChanger(LED_MEAS_STATE_DONE);
					led_task.meas_done = false;
				}
				break;
 80024ea:	e02f      	b.n	800254c <_ledMeasOperation+0x248>
				else if (led_task.meas_done == true)
 80024ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002558 <_ledMeasOperation+0x254>)
 80024ee:	7c1b      	ldrb	r3, [r3, #16]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d02b      	beq.n	800254c <_ledMeasOperation+0x248>
					_measStateChanger(LED_MEAS_STATE_DONE);
 80024f4:	2003      	movs	r0, #3
 80024f6:	f000 f889 	bl	800260c <_measStateChanger>
					led_task.meas_done = false;
 80024fa:	4b17      	ldr	r3, [pc, #92]	@ (8002558 <_ledMeasOperation+0x254>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	741a      	strb	r2, [r3, #16]
				break;
 8002500:	e024      	b.n	800254c <_ledMeasOperation+0x248>

			case LED_MEAS_STATE_DONE:
				/* Send Result */
				LogInfo("Send Result to MMI");
 8002502:	f240 12b7 	movw	r2, #439	@ 0x1b7
 8002506:	4917      	ldr	r1, [pc, #92]	@ (8002564 <_ledMeasOperation+0x260>)
 8002508:	4819      	ldr	r0, [pc, #100]	@ (8002570 <_ledMeasOperation+0x26c>)
 800250a:	f001 fab7 	bl	8003a7c <DEBUG_Printf>
				MMI_M3ResultSender(&led_task.m3_result);
 800250e:	481b      	ldr	r0, [pc, #108]	@ (800257c <_ledMeasOperation+0x278>)
 8002510:	f001 f933 	bl	800377a <MMI_M3ResultSender>

				led_task.m3_result.avr_adc = 0.0f;
 8002514:	4b10      	ldr	r3, [pc, #64]	@ (8002558 <_ledMeasOperation+0x254>)
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	645a      	str	r2, [r3, #68]	@ 0x44
				led_task.time_cnt = 0;
 800251c:	4b0e      	ldr	r3, [pc, #56]	@ (8002558 <_ledMeasOperation+0x254>)
 800251e:	2200      	movs	r2, #0
 8002520:	801a      	strh	r2, [r3, #0]
				_measStateChanger(LED_MEAS_STATE_WAIT_START_CMD);
 8002522:	2000      	movs	r0, #0
 8002524:	f000 f872 	bl	800260c <_measStateChanger>
				break;
 8002528:	e011      	b.n	800254e <_ledMeasOperation+0x24a>

			case LED_MEAS_STATE_ERROR:
				LogError("ADC Measureing Failed, Go to initial state");
 800252a:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 800252e:	490d      	ldr	r1, [pc, #52]	@ (8002564 <_ledMeasOperation+0x260>)
 8002530:	4811      	ldr	r0, [pc, #68]	@ (8002578 <_ledMeasOperation+0x274>)
 8002532:	f001 faa3 	bl	8003a7c <DEBUG_Printf>
				_ledTaskInit();
 8002536:	f000 f9bb 	bl	80028b0 <_ledTaskInit>
				break;
 800253a:	e008      	b.n	800254e <_ledMeasOperation+0x24a>
				break;
 800253c:	bf00      	nop
 800253e:	e006      	b.n	800254e <_ledMeasOperation+0x24a>
				break;
 8002540:	bf00      	nop
 8002542:	e004      	b.n	800254e <_ledMeasOperation+0x24a>
				break;
 8002544:	bf00      	nop
 8002546:	e002      	b.n	800254e <_ledMeasOperation+0x24a>

			default:
				break;
 8002548:	bf00      	nop
 800254a:	e000      	b.n	800254e <_ledMeasOperation+0x24a>
				break;
 800254c:	bf00      	nop
		}
	}

	return ret;
 800254e:	79fb      	ldrb	r3, [r7, #7]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20000040 	.word	0x20000040
 800255c:	08002939 	.word	0x08002939
 8002560:	20000044 	.word	0x20000044
 8002564:	0800a72c 	.word	0x0800a72c
 8002568:	0800a2e8 	.word	0x0800a2e8
 800256c:	0800a318 	.word	0x0800a318
 8002570:	0800a334 	.word	0x0800a334
 8002574:	20000064 	.word	0x20000064
 8002578:	0800a358 	.word	0x0800a358
 800257c:	20000084 	.word	0x20000084

08002580 <_taskStateChanger>:

void _taskStateChanger(ledTaskState_t state)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af02      	add	r7, sp, #8
 8002586:	4603      	mov	r3, r0
 8002588:	71fb      	strb	r3, [r7, #7]
	if (led_task.task_state != state)
 800258a:	4b1b      	ldr	r3, [pc, #108]	@ (80025f8 <_taskStateChanger+0x78>)
 800258c:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8002590:	79fa      	ldrb	r2, [r7, #7]
 8002592:	429a      	cmp	r2, r3
 8002594:	d02c      	beq.n	80025f0 <_taskStateChanger+0x70>
	{
		LogInfo("**********************************");
 8002596:	f44f 72e8 	mov.w	r2, #464	@ 0x1d0
 800259a:	4918      	ldr	r1, [pc, #96]	@ (80025fc <_taskStateChanger+0x7c>)
 800259c:	4818      	ldr	r0, [pc, #96]	@ (8002600 <_taskStateChanger+0x80>)
 800259e:	f001 fa6d 	bl	8003a7c <DEBUG_Printf>
		LogInfo("[TASK STATE] %s ======> %s", ledTaskStateInfo[led_task.task_state].name, ledTaskStateInfo[state].name);
 80025a2:	4b15      	ldr	r3, [pc, #84]	@ (80025f8 <_taskStateChanger+0x78>)
 80025a4:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80025a8:	461a      	mov	r2, r3
 80025aa:	4613      	mov	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	4413      	add	r3, r2
 80025b4:	4a13      	ldr	r2, [pc, #76]	@ (8002604 <_taskStateChanger+0x84>)
 80025b6:	4413      	add	r3, r2
 80025b8:	1c59      	adds	r1, r3, #1
 80025ba:	79fa      	ldrb	r2, [r7, #7]
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	4413      	add	r3, r2
 80025c6:	4a0f      	ldr	r2, [pc, #60]	@ (8002604 <_taskStateChanger+0x84>)
 80025c8:	4413      	add	r3, r2
 80025ca:	3301      	adds	r3, #1
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	460b      	mov	r3, r1
 80025d0:	f240 12d1 	movw	r2, #465	@ 0x1d1
 80025d4:	4909      	ldr	r1, [pc, #36]	@ (80025fc <_taskStateChanger+0x7c>)
 80025d6:	480c      	ldr	r0, [pc, #48]	@ (8002608 <_taskStateChanger+0x88>)
 80025d8:	f001 fa50 	bl	8003a7c <DEBUG_Printf>
		LogInfo("**********************************");
 80025dc:	f44f 72e9 	mov.w	r2, #466	@ 0x1d2
 80025e0:	4906      	ldr	r1, [pc, #24]	@ (80025fc <_taskStateChanger+0x7c>)
 80025e2:	4807      	ldr	r0, [pc, #28]	@ (8002600 <_taskStateChanger+0x80>)
 80025e4:	f001 fa4a 	bl	8003a7c <DEBUG_Printf>
		led_task.task_state = state;
 80025e8:	4a03      	ldr	r2, [pc, #12]	@ (80025f8 <_taskStateChanger+0x78>)
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	f882 3049 	strb.w	r3, [r2, #73]	@ 0x49
	}
}
 80025f0:	bf00      	nop
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20000040 	.word	0x20000040
 80025fc:	0800a740 	.word	0x0800a740
 8002600:	0800a394 	.word	0x0800a394
 8002604:	2000009c 	.word	0x2000009c
 8002608:	0800a3c8 	.word	0x0800a3c8

0800260c <_measStateChanger>:

void _measStateChanger(ledMeasState_t state)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af02      	add	r7, sp, #8
 8002612:	4603      	mov	r3, r0
 8002614:	71fb      	strb	r3, [r7, #7]
	if (led_task.meas_state != state)
 8002616:	4b18      	ldr	r3, [pc, #96]	@ (8002678 <_measStateChanger+0x6c>)
 8002618:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800261c:	79fa      	ldrb	r2, [r7, #7]
 800261e:	429a      	cmp	r2, r3
 8002620:	d026      	beq.n	8002670 <_measStateChanger+0x64>
	{
		LogInfo("[MEAS STATE] %s ===> %s", ledMeasStateInfo[led_task.meas_state].name, ledMeasStateInfo[state].name);
 8002622:	4b15      	ldr	r3, [pc, #84]	@ (8002678 <_measStateChanger+0x6c>)
 8002624:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8002628:	461a      	mov	r2, r3
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	4413      	add	r3, r2
 8002634:	4a11      	ldr	r2, [pc, #68]	@ (800267c <_measStateChanger+0x70>)
 8002636:	4413      	add	r3, r2
 8002638:	1c59      	adds	r1, r3, #1
 800263a:	79fa      	ldrb	r2, [r7, #7]
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	4413      	add	r3, r2
 8002646:	4a0d      	ldr	r2, [pc, #52]	@ (800267c <_measStateChanger+0x70>)
 8002648:	4413      	add	r3, r2
 800264a:	3301      	adds	r3, #1
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	460b      	mov	r3, r1
 8002650:	f240 12db 	movw	r2, #475	@ 0x1db
 8002654:	490a      	ldr	r1, [pc, #40]	@ (8002680 <_measStateChanger+0x74>)
 8002656:	480b      	ldr	r0, [pc, #44]	@ (8002684 <_measStateChanger+0x78>)
 8002658:	f001 fa10 	bl	8003a7c <DEBUG_Printf>
		LogInfo("---------------------------------");
 800265c:	f44f 72ee 	mov.w	r2, #476	@ 0x1dc
 8002660:	4907      	ldr	r1, [pc, #28]	@ (8002680 <_measStateChanger+0x74>)
 8002662:	4809      	ldr	r0, [pc, #36]	@ (8002688 <_measStateChanger+0x7c>)
 8002664:	f001 fa0a 	bl	8003a7c <DEBUG_Printf>
		led_task.meas_state = state;
 8002668:	4a03      	ldr	r2, [pc, #12]	@ (8002678 <_measStateChanger+0x6c>)
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	f882 304a 	strb.w	r3, [r2, #74]	@ 0x4a
	}
}
 8002670:	bf00      	nop
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	20000040 	.word	0x20000040
 800267c:	200000b4 	.word	0x200000b4
 8002680:	0800a754 	.word	0x0800a754
 8002684:	0800a3f4 	.word	0x0800a3f4
 8002688:	0800a41c 	.word	0x0800a41c

0800268c <_ledScheduleSet>:

HAL_StatusTypeDef _ledScheduleSet(MeasSchedule_t *p_schdeule, uint8_t schedule_len)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af02      	add	r7, sp, #8
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	460b      	mov	r3, r1
 8002696:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef ret = HAL_OK;
 8002698:	2300      	movs	r3, #0
 800269a:	73fb      	strb	r3, [r7, #15]

	uint8_t idx = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	73bb      	strb	r3, [r7, #14]

	if(schedule_len > LED_SCHEDULE_LEN_MAX)
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	d901      	bls.n	80026aa <_ledScheduleSet+0x1e>
	{
		schedule_len = LED_SCHEDULE_LEN_MAX;
 80026a6:	2304      	movs	r3, #4
 80026a8:	70fb      	strb	r3, [r7, #3]
	}

	led_task.led_schedule_len = schedule_len;
 80026aa:	4a2a      	ldr	r2, [pc, #168]	@ (8002754 <_ledScheduleSet+0xc8>)
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	f882 3022 	strb.w	r3, [r2, #34]	@ 0x22

	for (idx = 0; idx < schedule_len; idx++)
 80026b2:	2300      	movs	r3, #0
 80026b4:	73bb      	strb	r3, [r7, #14]
 80026b6:	e042      	b.n	800273e <_ledScheduleSet+0xb2>
	{
		/* Copy Initial setting */
		led_task.led_schedule[idx].led_ch = p_schdeule[idx].led_ch;
 80026b8:	7bbb      	ldrb	r3, [r7, #14]
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	441a      	add	r2, r3
 80026c0:	7bbb      	ldrb	r3, [r7, #14]
 80026c2:	7811      	ldrb	r1, [r2, #0]
 80026c4:	4a23      	ldr	r2, [pc, #140]	@ (8002754 <_ledScheduleSet+0xc8>)
 80026c6:	3304      	adds	r3, #4
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	460a      	mov	r2, r1
 80026ce:	709a      	strb	r2, [r3, #2]
		led_task.led_schedule[idx].led_data = p_schdeule[idx].led_data;
 80026d0:	7bbb      	ldrb	r3, [r7, #14]
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	441a      	add	r2, r3
 80026d8:	7bbb      	ldrb	r3, [r7, #14]
 80026da:	8851      	ldrh	r1, [r2, #2]
 80026dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002754 <_ledScheduleSet+0xc8>)
 80026de:	3304      	adds	r3, #4
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	460a      	mov	r2, r1
 80026e6:	809a      	strh	r2, [r3, #4]
		LogInfo("%d LED Set to %04X", p_schdeule[idx].led_ch, p_schdeule[idx].led_data);
 80026e8:	7bbb      	ldrb	r3, [r7, #14]
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	4413      	add	r3, r2
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	4619      	mov	r1, r3
 80026f4:	7bbb      	ldrb	r3, [r7, #14]
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	4413      	add	r3, r2
 80026fc:	885b      	ldrh	r3, [r3, #2]
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	460b      	mov	r3, r1
 8002702:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002706:	4914      	ldr	r1, [pc, #80]	@ (8002758 <_ledScheduleSet+0xcc>)
 8002708:	4814      	ldr	r0, [pc, #80]	@ (800275c <_ledScheduleSet+0xd0>)
 800270a:	f001 f9b7 	bl	8003a7c <DEBUG_Printf>

		/* DAC Setting */
		ret = DAC_SetData(led_task.led_schedule[idx].led_ch, led_task.led_schedule[idx].led_data);
 800270e:	7bbb      	ldrb	r3, [r7, #14]
 8002710:	4a10      	ldr	r2, [pc, #64]	@ (8002754 <_ledScheduleSet+0xc8>)
 8002712:	3304      	adds	r3, #4
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	789a      	ldrb	r2, [r3, #2]
 800271a:	7bbb      	ldrb	r3, [r7, #14]
 800271c:	490d      	ldr	r1, [pc, #52]	@ (8002754 <_ledScheduleSet+0xc8>)
 800271e:	3304      	adds	r3, #4
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	889b      	ldrh	r3, [r3, #4]
 8002726:	4619      	mov	r1, r3
 8002728:	4610      	mov	r0, r2
 800272a:	f7ff fcb1 	bl	8002090 <DAC_SetData>
 800272e:	4603      	mov	r3, r0
 8002730:	73fb      	strb	r3, [r7, #15]

		if (ret != HAL_OK)
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d107      	bne.n	8002748 <_ledScheduleSet+0xbc>
	for (idx = 0; idx < schedule_len; idx++)
 8002738:	7bbb      	ldrb	r3, [r7, #14]
 800273a:	3301      	adds	r3, #1
 800273c:	73bb      	strb	r3, [r7, #14]
 800273e:	7bba      	ldrb	r2, [r7, #14]
 8002740:	78fb      	ldrb	r3, [r7, #3]
 8002742:	429a      	cmp	r2, r3
 8002744:	d3b8      	bcc.n	80026b8 <_ledScheduleSet+0x2c>
 8002746:	e000      	b.n	800274a <_ledScheduleSet+0xbe>
		{
			break;
 8002748:	bf00      	nop
		}
	}

	return ret;
 800274a:	7bfb      	ldrb	r3, [r7, #15]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20000040 	.word	0x20000040
 8002758:	0800a768 	.word	0x0800a768
 800275c:	0800a450 	.word	0x0800a450

08002760 <_ledOnOff>:

void _ledOnOff(DAC_chSel_t led_ch, bool led_cfg)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af02      	add	r7, sp, #8
 8002766:	4603      	mov	r3, r0
 8002768:	460a      	mov	r2, r1
 800276a:	71fb      	strb	r3, [r7, #7]
 800276c:	4613      	mov	r3, r2
 800276e:	71bb      	strb	r3, [r7, #6]
	GPIO_PinState pin_state = RESET;
 8002770:	2300      	movs	r3, #0
 8002772:	73fb      	strb	r3, [r7, #15]
	static bool ch_on[DAC_CH_NUM] = {0, };

	if (led_cfg == true)
 8002774:	79bb      	ldrb	r3, [r7, #6]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <_ledOnOff+0x20>
	{
		//pin_state = GPIO_PIN_SET;
		pin_state = GPIO_PIN_RESET;
 800277a:	2300      	movs	r3, #0
 800277c:	73fb      	strb	r3, [r7, #15]
 800277e:	e001      	b.n	8002784 <_ledOnOff+0x24>
	}
	else
	{
		//pin_state = GPIO_PIN_RESET;
		pin_state = GPIO_PIN_SET;
 8002780:	2301      	movs	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
	}

	if (led_ch != DAC_CH_ALL)
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	2b05      	cmp	r3, #5
 8002788:	d014      	beq.n	80027b4 <_ledOnOff+0x54>
	{
		if (ch_on[led_ch] != led_cfg)
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	4a42      	ldr	r2, [pc, #264]	@ (8002898 <_ledOnOff+0x138>)
 800278e:	5cd3      	ldrb	r3, [r2, r3]
 8002790:	79ba      	ldrb	r2, [r7, #6]
 8002792:	429a      	cmp	r2, r3
 8002794:	d077      	beq.n	8002886 <_ledOnOff+0x126>
		{
			ch_on[led_ch] = led_cfg;
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	493f      	ldr	r1, [pc, #252]	@ (8002898 <_ledOnOff+0x138>)
 800279a:	79ba      	ldrb	r2, [r7, #6]
 800279c:	54ca      	strb	r2, [r1, r3]
			LogDebug("LED %d CH: %d", led_ch, led_cfg);
 800279e:	79fa      	ldrb	r2, [r7, #7]
 80027a0:	79bb      	ldrb	r3, [r7, #6]
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	4613      	mov	r3, r2
 80027a6:	f240 2216 	movw	r2, #534	@ 0x216
 80027aa:	493c      	ldr	r1, [pc, #240]	@ (800289c <_ledOnOff+0x13c>)
 80027ac:	483c      	ldr	r0, [pc, #240]	@ (80028a0 <_ledOnOff+0x140>)
 80027ae:	f001 f965 	bl	8003a7c <DEBUG_Printf>
 80027b2:	e00c      	b.n	80027ce <_ledOnOff+0x6e>
			return;
		}
	}
	else
	{
		memset(ch_on, led_cfg, sizeof(ch_on));
 80027b4:	79bb      	ldrb	r3, [r7, #6]
 80027b6:	2204      	movs	r2, #4
 80027b8:	4619      	mov	r1, r3
 80027ba:	4837      	ldr	r0, [pc, #220]	@ (8002898 <_ledOnOff+0x138>)
 80027bc:	f005 faa2 	bl	8007d04 <memset>
		LogInfo("LED ALL CH: %d", led_cfg);
 80027c0:	79bb      	ldrb	r3, [r7, #6]
 80027c2:	f44f 7208 	mov.w	r2, #544	@ 0x220
 80027c6:	4935      	ldr	r1, [pc, #212]	@ (800289c <_ledOnOff+0x13c>)
 80027c8:	4836      	ldr	r0, [pc, #216]	@ (80028a4 <_ledOnOff+0x144>)
 80027ca:	f001 f957 	bl	8003a7c <DEBUG_Printf>
	}

	switch (led_ch)
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	2b05      	cmp	r3, #5
 80027d2:	d85a      	bhi.n	800288a <_ledOnOff+0x12a>
 80027d4:	a201      	add	r2, pc, #4	@ (adr r2, 80027dc <_ledOnOff+0x7c>)
 80027d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027da:	bf00      	nop
 80027dc:	080027f5 	.word	0x080027f5
 80027e0:	08002803 	.word	0x08002803
 80027e4:	08002811 	.word	0x08002811
 80027e8:	0800281f 	.word	0x0800281f
 80027ec:	0800288b 	.word	0x0800288b
 80027f0:	08002861 	.word	0x08002861
	{
	case DAC_CH_0: //CH1
		HAL_GPIO_WritePin(CH1_LED_CON_GPIO_Port, CH1_LED_CON_Pin, pin_state);
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	461a      	mov	r2, r3
 80027f8:	2101      	movs	r1, #1
 80027fa:	482b      	ldr	r0, [pc, #172]	@ (80028a8 <_ledOnOff+0x148>)
 80027fc:	f001 ff3a 	bl	8004674 <HAL_GPIO_WritePin>
		break;
 8002800:	e046      	b.n	8002890 <_ledOnOff+0x130>

	case DAC_CH_1: //CH2
		HAL_GPIO_WritePin(CH2_LED_CON_GPIO_Port, CH2_LED_CON_Pin, pin_state);
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	461a      	mov	r2, r3
 8002806:	2102      	movs	r1, #2
 8002808:	4827      	ldr	r0, [pc, #156]	@ (80028a8 <_ledOnOff+0x148>)
 800280a:	f001 ff33 	bl	8004674 <HAL_GPIO_WritePin>
		break;
 800280e:	e03f      	b.n	8002890 <_ledOnOff+0x130>

	case DAC_CH_2: //CH3
		HAL_GPIO_WritePin(CH3_LED_CON_GPIO_Port, CH3_LED_CON_Pin, pin_state);
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	461a      	mov	r2, r3
 8002814:	2104      	movs	r1, #4
 8002816:	4824      	ldr	r0, [pc, #144]	@ (80028a8 <_ledOnOff+0x148>)
 8002818:	f001 ff2c 	bl	8004674 <HAL_GPIO_WritePin>
		break;
 800281c:	e038      	b.n	8002890 <_ledOnOff+0x130>

	case DAC_CH_3: //CH4
//		HAL_GPIO_WritePin(CH4_LED_CON_GPIO_Port, CH4_LED_CON_Pin, pin_state);
		if(led_task.meas_cfg.Mux_ch == 1)
 800281e:	4b23      	ldr	r3, [pc, #140]	@ (80028ac <_ledOnOff+0x14c>)
 8002820:	88db      	ldrh	r3, [r3, #6]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d106      	bne.n	8002834 <_ledOnOff+0xd4>
		{
			HAL_GPIO_WritePin(CH1_LED_CON_GPIO_Port, CH1_LED_CON_Pin, pin_state);
 8002826:	7bfb      	ldrb	r3, [r7, #15]
 8002828:	461a      	mov	r2, r3
 800282a:	2101      	movs	r1, #1
 800282c:	481e      	ldr	r0, [pc, #120]	@ (80028a8 <_ledOnOff+0x148>)
 800282e:	f001 ff21 	bl	8004674 <HAL_GPIO_WritePin>
		}
		else
		{

		}
		break;
 8002832:	e02c      	b.n	800288e <_ledOnOff+0x12e>
		else if(led_task.meas_cfg.Mux_ch == 2)
 8002834:	4b1d      	ldr	r3, [pc, #116]	@ (80028ac <_ledOnOff+0x14c>)
 8002836:	88db      	ldrh	r3, [r3, #6]
 8002838:	2b02      	cmp	r3, #2
 800283a:	d106      	bne.n	800284a <_ledOnOff+0xea>
			HAL_GPIO_WritePin(CH2_LED_CON_GPIO_Port, CH2_LED_CON_Pin, pin_state);
 800283c:	7bfb      	ldrb	r3, [r7, #15]
 800283e:	461a      	mov	r2, r3
 8002840:	2102      	movs	r1, #2
 8002842:	4819      	ldr	r0, [pc, #100]	@ (80028a8 <_ledOnOff+0x148>)
 8002844:	f001 ff16 	bl	8004674 <HAL_GPIO_WritePin>
		break;
 8002848:	e021      	b.n	800288e <_ledOnOff+0x12e>
		else if(led_task.meas_cfg.Mux_ch == 3)
 800284a:	4b18      	ldr	r3, [pc, #96]	@ (80028ac <_ledOnOff+0x14c>)
 800284c:	88db      	ldrh	r3, [r3, #6]
 800284e:	2b03      	cmp	r3, #3
 8002850:	d11d      	bne.n	800288e <_ledOnOff+0x12e>
			HAL_GPIO_WritePin(CH3_LED_CON_GPIO_Port, CH3_LED_CON_Pin, pin_state);
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	461a      	mov	r2, r3
 8002856:	2104      	movs	r1, #4
 8002858:	4813      	ldr	r0, [pc, #76]	@ (80028a8 <_ledOnOff+0x148>)
 800285a:	f001 ff0b 	bl	8004674 <HAL_GPIO_WritePin>
		break;
 800285e:	e016      	b.n	800288e <_ledOnOff+0x12e>

	case DAC_CH_ALL:
		HAL_GPIO_WritePin(CH1_LED_CON_GPIO_Port, CH1_LED_CON_Pin, pin_state);
 8002860:	7bfb      	ldrb	r3, [r7, #15]
 8002862:	461a      	mov	r2, r3
 8002864:	2101      	movs	r1, #1
 8002866:	4810      	ldr	r0, [pc, #64]	@ (80028a8 <_ledOnOff+0x148>)
 8002868:	f001 ff04 	bl	8004674 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CH2_LED_CON_GPIO_Port, CH2_LED_CON_Pin, pin_state);
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	461a      	mov	r2, r3
 8002870:	2102      	movs	r1, #2
 8002872:	480d      	ldr	r0, [pc, #52]	@ (80028a8 <_ledOnOff+0x148>)
 8002874:	f001 fefe 	bl	8004674 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CH3_LED_CON_GPIO_Port, CH3_LED_CON_Pin, pin_state);
 8002878:	7bfb      	ldrb	r3, [r7, #15]
 800287a:	461a      	mov	r2, r3
 800287c:	2104      	movs	r1, #4
 800287e:	480a      	ldr	r0, [pc, #40]	@ (80028a8 <_ledOnOff+0x148>)
 8002880:	f001 fef8 	bl	8004674 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(CH4_LED_CON_GPIO_Port, CH4_LED_CON_Pin, pin_state);
		break;
 8002884:	e004      	b.n	8002890 <_ledOnOff+0x130>
			return;
 8002886:	bf00      	nop
 8002888:	e002      	b.n	8002890 <_ledOnOff+0x130>

	default:
		break;
 800288a:	bf00      	nop
 800288c:	e000      	b.n	8002890 <_ledOnOff+0x130>
		break;
 800288e:	bf00      	nop
	}
}
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	200001a0 	.word	0x200001a0
 800289c:	0800a778 	.word	0x0800a778
 80028a0:	0800a474 	.word	0x0800a474
 80028a4:	0800a494 	.word	0x0800a494
 80028a8:	40020800 	.word	0x40020800
 80028ac:	20000040 	.word	0x20000040

080028b0 <_ledTaskInit>:

void _ledTaskInit(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
	led_task.time_cnt = 0;
 80028b4:	4b11      	ldr	r3, [pc, #68]	@ (80028fc <_ledTaskInit+0x4c>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	801a      	strh	r2, [r3, #0]
	led_task.schedule_idx = 0;
 80028ba:	4b10      	ldr	r3, [pc, #64]	@ (80028fc <_ledTaskInit+0x4c>)
 80028bc:	2200      	movs	r2, #0
 80028be:	709a      	strb	r2, [r3, #2]

	//led_task.meas_mode = LED_MEAS_MODE_3; // for test
	led_task.meas_mode = LED_MEAS_MODE_1; //
 80028c0:	4b0e      	ldr	r3, [pc, #56]	@ (80028fc <_ledTaskInit+0x4c>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
	led_task.task_state = LED_TASK_STATE_IDLE;
 80028c8:	4b0c      	ldr	r3, [pc, #48]	@ (80028fc <_ledTaskInit+0x4c>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
	led_task.meas_state = LED_MEAS_STATE_WAIT_START_CMD;
 80028d0:	4b0a      	ldr	r3, [pc, #40]	@ (80028fc <_ledTaskInit+0x4c>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

	led_task.meas_done = false;
 80028d8:	4b08      	ldr	r3, [pc, #32]	@ (80028fc <_ledTaskInit+0x4c>)
 80028da:	2200      	movs	r2, #0
 80028dc:	741a      	strb	r2, [r3, #16]

	_ledOnOff(DAC_CH_ALL, false);
 80028de:	2100      	movs	r1, #0
 80028e0:	2005      	movs	r0, #5
 80028e2:	f7ff ff3d 	bl	8002760 <_ledOnOff>

	memset(&led_task.m1_result[0], 0, sizeof(MeasM1Result_t));
 80028e6:	2208      	movs	r2, #8
 80028e8:	2100      	movs	r1, #0
 80028ea:	4805      	ldr	r0, [pc, #20]	@ (8002900 <_ledTaskInit+0x50>)
 80028ec:	f005 fa0a 	bl	8007d04 <memset>
	led_task.m3_result.avr_adc = 0.0f;
 80028f0:	4b02      	ldr	r3, [pc, #8]	@ (80028fc <_ledTaskInit+0x4c>)
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	645a      	str	r2, [r3, #68]	@ 0x44
}
 80028f8:	bf00      	nop
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	20000040 	.word	0x20000040
 8002900:	20000064 	.word	0x20000064

08002904 <_ledTaskMeasCfgInit>:

void _ledTaskMeasCfgInit(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
	led_task.meas_cfg.ch = LED_MEAS_CFG_DEFAULT_ADC_CH;
 8002908:	4b09      	ldr	r3, [pc, #36]	@ (8002930 <_ledTaskMeasCfgInit+0x2c>)
 800290a:	2200      	movs	r2, #0
 800290c:	711a      	strb	r2, [r3, #4]
	led_task.meas_cfg.adc_num = LED_MEAS_CFG_DEFAULT_MEAS_NUM;
 800290e:	4b08      	ldr	r3, [pc, #32]	@ (8002930 <_ledTaskMeasCfgInit+0x2c>)
 8002910:	2264      	movs	r2, #100	@ 0x64
 8002912:	815a      	strh	r2, [r3, #10]
	led_task.meas_cfg.wait_time = LED_MEAS_CFG_DEFAULT_WAIT_TIME_MS;
 8002914:	4b06      	ldr	r3, [pc, #24]	@ (8002930 <_ledTaskMeasCfgInit+0x2c>)
 8002916:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800291a:	819a      	strh	r2, [r3, #12]
	led_task.meas_cfg.sps = LED_MEAS_CFG_DEFAULT_SPS;
 800291c:	4b04      	ldr	r3, [pc, #16]	@ (8002930 <_ledTaskMeasCfgInit+0x2c>)
 800291e:	2200      	movs	r2, #0
 8002920:	721a      	strb	r2, [r3, #8]

	_ledScheduleSet(&led_schedule_default[0], LED_SCHEDULE_LEN_MAX);
 8002922:	2104      	movs	r1, #4
 8002924:	4803      	ldr	r0, [pc, #12]	@ (8002934 <_ledTaskMeasCfgInit+0x30>)
 8002926:	f7ff feb1 	bl	800268c <_ledScheduleSet>
}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20000040 	.word	0x20000040
 8002934:	2000008c 	.word	0x2000008c

08002938 <_ledTaskAvrReqCallback>:

void _ledTaskAvrReqCallback(float result)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	ed87 0a01 	vstr	s0, [r7, #4]
	led_task.meas_done = true;
 8002942:	4b18      	ldr	r3, [pc, #96]	@ (80029a4 <_ledTaskAvrReqCallback+0x6c>)
 8002944:	2201      	movs	r2, #1
 8002946:	741a      	strb	r2, [r3, #16]

	if (led_task.meas_mode == LED_MEAS_MODE_1)
 8002948:	4b16      	ldr	r3, [pc, #88]	@ (80029a4 <_ledTaskAvrReqCallback+0x6c>)
 800294a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800294e:	2b00      	cmp	r3, #0
 8002950:	d11a      	bne.n	8002988 <_ledTaskAvrReqCallback+0x50>
	{
		led_task.m1_result[led_task.schedule_idx].led_ch = led_task.led_schedule[led_task.schedule_idx].led_ch;
 8002952:	4b14      	ldr	r3, [pc, #80]	@ (80029a4 <_ledTaskAvrReqCallback+0x6c>)
 8002954:	789b      	ldrb	r3, [r3, #2]
 8002956:	4619      	mov	r1, r3
 8002958:	4b12      	ldr	r3, [pc, #72]	@ (80029a4 <_ledTaskAvrReqCallback+0x6c>)
 800295a:	789b      	ldrb	r3, [r3, #2]
 800295c:	4618      	mov	r0, r3
 800295e:	4a11      	ldr	r2, [pc, #68]	@ (80029a4 <_ledTaskAvrReqCallback+0x6c>)
 8002960:	1d0b      	adds	r3, r1, #4
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	7899      	ldrb	r1, [r3, #2]
 8002968:	4a0e      	ldr	r2, [pc, #56]	@ (80029a4 <_ledTaskAvrReqCallback+0x6c>)
 800296a:	1d03      	adds	r3, r0, #4
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	4413      	add	r3, r2
 8002970:	460a      	mov	r2, r1
 8002972:	711a      	strb	r2, [r3, #4]
		led_task.m1_result[led_task.schedule_idx].avr_adc = result;
 8002974:	4b0b      	ldr	r3, [pc, #44]	@ (80029a4 <_ledTaskAvrReqCallback+0x6c>)
 8002976:	789b      	ldrb	r3, [r3, #2]
 8002978:	4a0a      	ldr	r2, [pc, #40]	@ (80029a4 <_ledTaskAvrReqCallback+0x6c>)
 800297a:	3304      	adds	r3, #4
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4413      	add	r3, r2
 8002980:	3308      	adds	r3, #8
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	601a      	str	r2, [r3, #0]
	}
	else if (led_task.meas_mode == LED_MEAS_MODE_3)
	{
		led_task.m3_result.avr_adc = result;
	}
}
 8002986:	e007      	b.n	8002998 <_ledTaskAvrReqCallback+0x60>
	else if (led_task.meas_mode == LED_MEAS_MODE_3)
 8002988:	4b06      	ldr	r3, [pc, #24]	@ (80029a4 <_ledTaskAvrReqCallback+0x6c>)
 800298a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800298e:	2b01      	cmp	r3, #1
 8002990:	d102      	bne.n	8002998 <_ledTaskAvrReqCallback+0x60>
		led_task.m3_result.avr_adc = result;
 8002992:	4a04      	ldr	r2, [pc, #16]	@ (80029a4 <_ledTaskAvrReqCallback+0x6c>)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	20000040 	.word	0x20000040

080029a8 <__io_putchar>:
static void MX_ADC1_Init(void);
static void MX_TIM7_Init(void);
static void MX_TIM10_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
	if(HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 10) != HAL_OK)
 80029b0:	1d39      	adds	r1, r7, #4
 80029b2:	230a      	movs	r3, #10
 80029b4:	2201      	movs	r2, #1
 80029b6:	4807      	ldr	r0, [pc, #28]	@ (80029d4 <__io_putchar+0x2c>)
 80029b8:	f004 fb48 	bl	800704c <HAL_UART_Transmit>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <__io_putchar+0x20>
		return -1;
 80029c2:	f04f 33ff 	mov.w	r3, #4294967295
 80029c6:	e000      	b.n	80029ca <__io_putchar+0x22>
	return ch;
 80029c8:	687b      	ldr	r3, [r7, #4]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	2000037c 	.word	0x2000037c

080029d8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
	/* 1 kHz Timer */
	if(htim -> Instance == TIM7)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a0d      	ldr	r2, [pc, #52]	@ (8002a1c <HAL_TIM_PeriodElapsedCallback+0x44>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d106      	bne.n	80029f8 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		time_1ms_cnt++;
 80029ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002a20 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	3301      	adds	r3, #1
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002a20 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80029f6:	801a      	strh	r2, [r3, #0]
	}

	/* 10 kHz Timer */
	if(htim -> Instance == TIM10)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a09      	ldr	r2, [pc, #36]	@ (8002a24 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d106      	bne.n	8002a10 <HAL_TIM_PeriodElapsedCallback+0x38>
	{
		time_0_1ms_cnt++;
 8002a02:	4b09      	ldr	r3, [pc, #36]	@ (8002a28 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	3301      	adds	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	4b06      	ldr	r3, [pc, #24]	@ (8002a28 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002a0e:	801a      	strh	r2, [r3, #0]
	}
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	40001400 	.word	0x40001400
 8002a20:	200003c4 	.word	0x200003c4
 8002a24:	40014400 	.word	0x40014400
 8002a28:	200003c6 	.word	0x200003c6

08002a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a32:	f001 f871 	bl	8003b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a36:	f000 f8df 	bl	8002bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a3a:	f000 fab5 	bl	8002fa8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002a3e:	f000 f99f 	bl	8002d80 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002a42:	f000 f9cb 	bl	8002ddc <MX_I2C2_Init>
  MX_SPI1_Init();
 8002a46:	f000 f9f7 	bl	8002e38 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002a4a:	f000 fa83 	bl	8002f54 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8002a4e:	f000 f945 	bl	8002cdc <MX_ADC1_Init>
  MX_TIM7_Init();
 8002a52:	f000 fa27 	bl	8002ea4 <MX_TIM7_Init>
  MX_TIM10_Init();
 8002a56:	f000 fa5b 	bl	8002f10 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
#if (UART_DEBUG_MSG == 1)
  	 setbuf(stdout, NULL);
 8002a5a:	4b4e      	ldr	r3, [pc, #312]	@ (8002b94 <main+0x168>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	2100      	movs	r1, #0
 8002a62:	4618      	mov	r0, r3
 8002a64:	f005 f816 	bl	8007a94 <setbuf>
#endif

  	/* Interrupt Config */
	HAL_TIM_Base_Start_IT(&htim7);
 8002a68:	484b      	ldr	r0, [pc, #300]	@ (8002b98 <main+0x16c>)
 8002a6a:	f003 ffdb 	bl	8006a24 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim10);
 8002a6e:	484b      	ldr	r0, [pc, #300]	@ (8002b9c <main+0x170>)
 8002a70:	f003 ffd8 	bl	8006a24 <HAL_TIM_Base_Start_IT>

	/* User Module Initialize */
	(void) UART_Init(&huart1);
 8002a74:	484a      	ldr	r0, [pc, #296]	@ (8002ba0 <main+0x174>)
 8002a76:	f000 ffa5 	bl	80039c4 <UART_Init>
	HAL_UART_Transmit(&huart1, (uint8_t*) Tx_str_data, sizeof(Tx_str_data)-1, 1000);
 8002a7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a7e:	2210      	movs	r2, #16
 8002a80:	4948      	ldr	r1, [pc, #288]	@ (8002ba4 <main+0x178>)
 8002a82:	4847      	ldr	r0, [pc, #284]	@ (8002ba0 <main+0x174>)
 8002a84:	f004 fae2 	bl	800704c <HAL_UART_Transmit>
	LogInfo("--------------------------------------------");
 8002a88:	22b0      	movs	r2, #176	@ 0xb0
 8002a8a:	4947      	ldr	r1, [pc, #284]	@ (8002ba8 <main+0x17c>)
 8002a8c:	4847      	ldr	r0, [pc, #284]	@ (8002bac <main+0x180>)
 8002a8e:	f000 fff5 	bl	8003a7c <DEBUG_Printf>
	LogInfo("[       UNIOTECH - 3CH FL ANALYZER UOT       ]");
 8002a92:	22b1      	movs	r2, #177	@ 0xb1
 8002a94:	4944      	ldr	r1, [pc, #272]	@ (8002ba8 <main+0x17c>)
 8002a96:	4846      	ldr	r0, [pc, #280]	@ (8002bb0 <main+0x184>)
 8002a98:	f000 fff0 	bl	8003a7c <DEBUG_Printf>
	LogInfo("  * Build Time: %s %s", __DATE__, __TIME__);
 8002a9c:	4b45      	ldr	r3, [pc, #276]	@ (8002bb4 <main+0x188>)
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	4b45      	ldr	r3, [pc, #276]	@ (8002bb8 <main+0x18c>)
 8002aa2:	22b2      	movs	r2, #178	@ 0xb2
 8002aa4:	4940      	ldr	r1, [pc, #256]	@ (8002ba8 <main+0x17c>)
 8002aa6:	4845      	ldr	r0, [pc, #276]	@ (8002bbc <main+0x190>)
 8002aa8:	f000 ffe8 	bl	8003a7c <DEBUG_Printf>
	LogInfo("  * FW Ver    : Ver. %s", UOT_FW_VER);
 8002aac:	4b44      	ldr	r3, [pc, #272]	@ (8002bc0 <main+0x194>)
 8002aae:	22b3      	movs	r2, #179	@ 0xb3
 8002ab0:	493d      	ldr	r1, [pc, #244]	@ (8002ba8 <main+0x17c>)
 8002ab2:	4844      	ldr	r0, [pc, #272]	@ (8002bc4 <main+0x198>)
 8002ab4:	f000 ffe2 	bl	8003a7c <DEBUG_Printf>
	LogInfo("  * HW Ver    : Ver. %s", UOT_HW_VER);
 8002ab8:	4b41      	ldr	r3, [pc, #260]	@ (8002bc0 <main+0x194>)
 8002aba:	22b4      	movs	r2, #180	@ 0xb4
 8002abc:	493a      	ldr	r1, [pc, #232]	@ (8002ba8 <main+0x17c>)
 8002abe:	4842      	ldr	r0, [pc, #264]	@ (8002bc8 <main+0x19c>)
 8002ac0:	f000 ffdc 	bl	8003a7c <DEBUG_Printf>
	LogInfo("--------------------------------------------");
 8002ac4:	22b5      	movs	r2, #181	@ 0xb5
 8002ac6:	4938      	ldr	r1, [pc, #224]	@ (8002ba8 <main+0x17c>)
 8002ac8:	4838      	ldr	r0, [pc, #224]	@ (8002bac <main+0x180>)
 8002aca:	f000 ffd7 	bl	8003a7c <DEBUG_Printf>

	LogInfo("DAC Init");
 8002ace:	22b7      	movs	r2, #183	@ 0xb7
 8002ad0:	4935      	ldr	r1, [pc, #212]	@ (8002ba8 <main+0x17c>)
 8002ad2:	483e      	ldr	r0, [pc, #248]	@ (8002bcc <main+0x1a0>)
 8002ad4:	f000 ffd2 	bl	8003a7c <DEBUG_Printf>
	(void) DAC_Init(&hi2c2);
 8002ad8:	483d      	ldr	r0, [pc, #244]	@ (8002bd0 <main+0x1a4>)
 8002ada:	f7ff fa2b 	bl	8001f34 <DAC_Init>

	LogInfo("ADC Init");
 8002ade:	22ba      	movs	r2, #186	@ 0xba
 8002ae0:	4931      	ldr	r1, [pc, #196]	@ (8002ba8 <main+0x17c>)
 8002ae2:	483c      	ldr	r0, [pc, #240]	@ (8002bd4 <main+0x1a8>)
 8002ae4:	f000 ffca 	bl	8003a7c <DEBUG_Printf>
	(void) ADC_Init(&hspi1);
 8002ae8:	483b      	ldr	r0, [pc, #236]	@ (8002bd8 <main+0x1ac>)
 8002aea:	f7fe fa3d 	bl	8000f68 <ADC_Init>

	LogInfo("LED TASK Init");
 8002aee:	22bd      	movs	r2, #189	@ 0xbd
 8002af0:	492d      	ldr	r1, [pc, #180]	@ (8002ba8 <main+0x17c>)
 8002af2:	483a      	ldr	r0, [pc, #232]	@ (8002bdc <main+0x1b0>)
 8002af4:	f000 ffc2 	bl	8003a7c <DEBUG_Printf>
	LED_TASK_Init();
 8002af8:	f7ff fbb0 	bl	800225c <LED_TASK_Init>
	HAL_Delay(100);
 8002afc:	2064      	movs	r0, #100	@ 0x64
 8002afe:	f001 f87d 	bl	8003bfc <HAL_Delay>

	LogInfo("LED TASK Start");
 8002b02:	22c1      	movs	r2, #193	@ 0xc1
 8002b04:	4928      	ldr	r1, [pc, #160]	@ (8002ba8 <main+0x17c>)
 8002b06:	4836      	ldr	r0, [pc, #216]	@ (8002be0 <main+0x1b4>)
 8002b08:	f000 ffb8 	bl	8003a7c <DEBUG_Printf>
	LED_TASK_Start();
 8002b0c:	f7ff fbae 	bl	800226c <LED_TASK_Start>

	HAL_Delay(100);
 8002b10:	2064      	movs	r0, #100	@ 0x64
 8002b12:	f001 f873 	bl	8003bfc <HAL_Delay>

  	meas_cfg.measFlag = false;
 8002b16:	4b33      	ldr	r3, [pc, #204]	@ (8002be4 <main+0x1b8>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	729a      	strb	r2, [r3, #10]
	/* TEST */
	//uint8_t test_cmd[100] = {0xC0, 0x01, 0x00, 0xC2};
	//MMI_Decoder(&test_cmd[0], 4);

	/* MUX Init - Monitor CH4 ON */
	HAL_GPIO_WritePin(M_SEL_EN_GPIO_Port, M_SEL_EN_Pin, GPIO_PIN_SET);
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	2104      	movs	r1, #4
 8002b20:	4831      	ldr	r0, [pc, #196]	@ (8002be8 <main+0x1bc>)
 8002b22:	f001 fda7 	bl	8004674 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M_SEL_A0_GPIO_Port, M_SEL_A0_Pin, GPIO_PIN_RESET);
 8002b26:	2200      	movs	r2, #0
 8002b28:	2101      	movs	r1, #1
 8002b2a:	482f      	ldr	r0, [pc, #188]	@ (8002be8 <main+0x1bc>)
 8002b2c:	f001 fda2 	bl	8004674 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M_SEL_A1_GPIO_Port, M_SEL_A1_Pin, GPIO_PIN_RESET);
 8002b30:	2200      	movs	r2, #0
 8002b32:	2102      	movs	r1, #2
 8002b34:	482c      	ldr	r0, [pc, #176]	@ (8002be8 <main+0x1bc>)
 8002b36:	f001 fd9d 	bl	8004674 <HAL_GPIO_WritePin>

	/* HEAT CON Init */
	HAL_GPIO_WritePin(HEAT_CON1_GPIO_Port, HEAT_CON1_Pin, GPIO_PIN_RESET);
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b40:	482a      	ldr	r0, [pc, #168]	@ (8002bec <main+0x1c0>)
 8002b42:	f001 fd97 	bl	8004674 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HEAT_CON2_GPIO_Port, HEAT_CON2_Pin, GPIO_PIN_RESET);
 8002b46:	2200      	movs	r2, #0
 8002b48:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002b4c:	4827      	ldr	r0, [pc, #156]	@ (8002bec <main+0x1c0>)
 8002b4e:	f001 fd91 	bl	8004674 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HEAT_CON3_GPIO_Port, HEAT_CON3_Pin, GPIO_PIN_RESET);
 8002b52:	2200      	movs	r2, #0
 8002b54:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b58:	4824      	ldr	r0, [pc, #144]	@ (8002bec <main+0x1c0>)
 8002b5a:	f001 fd8b 	bl	8004674 <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8002b5e:	2064      	movs	r0, #100	@ 0x64
 8002b60:	f001 f84c 	bl	8003bfc <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (time_1ms_cnt >= 1000)
 8002b64:	4b22      	ldr	r3, [pc, #136]	@ (8002bf0 <main+0x1c4>)
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b6e:	d306      	bcc.n	8002b7e <main+0x152>
	{
		HAL_GPIO_TogglePin(OP_LED_GPIO_Port, OP_LED_Pin);
 8002b70:	2101      	movs	r1, #1
 8002b72:	481e      	ldr	r0, [pc, #120]	@ (8002bec <main+0x1c0>)
 8002b74:	f001 fd97 	bl	80046a6 <HAL_GPIO_TogglePin>
		time_1ms_cnt = 0;
 8002b78:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf0 <main+0x1c4>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	801a      	strh	r2, [r3, #0]
	}

	if (time_0_1ms_cnt >= 10)
 8002b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf4 <main+0x1c8>)
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	2b09      	cmp	r3, #9
 8002b86:	d9ed      	bls.n	8002b64 <main+0x138>
	{
		LED_TASK();
 8002b88:	f7ff fb9e 	bl	80022c8 <LED_TASK>
		time_0_1ms_cnt = 0;
 8002b8c:	4b19      	ldr	r3, [pc, #100]	@ (8002bf4 <main+0x1c8>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	801a      	strh	r2, [r3, #0]
	if (time_1ms_cnt >= 1000)
 8002b92:	e7e7      	b.n	8002b64 <main+0x138>
 8002b94:	20000118 	.word	0x20000118
 8002b98:	200002ec 	.word	0x200002ec
 8002b9c:	20000334 	.word	0x20000334
 8002ba0:	2000037c 	.word	0x2000037c
 8002ba4:	200000ec 	.word	0x200000ec
 8002ba8:	0800a784 	.word	0x0800a784
 8002bac:	0800a4b4 	.word	0x0800a4b4
 8002bb0:	0800a4f4 	.word	0x0800a4f4
 8002bb4:	0800a568 	.word	0x0800a568
 8002bb8:	0800a534 	.word	0x0800a534
 8002bbc:	0800a540 	.word	0x0800a540
 8002bc0:	0800a574 	.word	0x0800a574
 8002bc4:	0800a578 	.word	0x0800a578
 8002bc8:	0800a5a0 	.word	0x0800a5a0
 8002bcc:	0800a5c8 	.word	0x0800a5c8
 8002bd0:	20000240 	.word	0x20000240
 8002bd4:	0800a5e4 	.word	0x0800a5e4
 8002bd8:	20000294 	.word	0x20000294
 8002bdc:	0800a600 	.word	0x0800a600
 8002be0:	0800a620 	.word	0x0800a620
 8002be4:	200003c8 	.word	0x200003c8
 8002be8:	40020000 	.word	0x40020000
 8002bec:	40020400 	.word	0x40020400
 8002bf0:	200003c4 	.word	0x200003c4
 8002bf4:	200003c6 	.word	0x200003c6

08002bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b094      	sub	sp, #80	@ 0x50
 8002bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bfe:	f107 031c 	add.w	r3, r7, #28
 8002c02:	2234      	movs	r2, #52	@ 0x34
 8002c04:	2100      	movs	r1, #0
 8002c06:	4618      	mov	r0, r3
 8002c08:	f005 f87c 	bl	8007d04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c0c:	f107 0308 	add.w	r3, r7, #8
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	60da      	str	r2, [r3, #12]
 8002c1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	607b      	str	r3, [r7, #4]
 8002c20:	4b2c      	ldr	r3, [pc, #176]	@ (8002cd4 <SystemClock_Config+0xdc>)
 8002c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c24:	4a2b      	ldr	r2, [pc, #172]	@ (8002cd4 <SystemClock_Config+0xdc>)
 8002c26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c2c:	4b29      	ldr	r3, [pc, #164]	@ (8002cd4 <SystemClock_Config+0xdc>)
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c34:	607b      	str	r3, [r7, #4]
 8002c36:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c38:	2300      	movs	r3, #0
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	4b26      	ldr	r3, [pc, #152]	@ (8002cd8 <SystemClock_Config+0xe0>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a25      	ldr	r2, [pc, #148]	@ (8002cd8 <SystemClock_Config+0xe0>)
 8002c42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	4b23      	ldr	r3, [pc, #140]	@ (8002cd8 <SystemClock_Config+0xe0>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002c50:	603b      	str	r3, [r7, #0]
 8002c52:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c54:	2301      	movs	r3, #1
 8002c56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c5c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c62:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002c66:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 12;
 8002c68:	230c      	movs	r3, #12
 8002c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002c6c:	23b4      	movs	r3, #180	@ 0xb4
 8002c6e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c70:	2302      	movs	r3, #2
 8002c72:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002c74:	2302      	movs	r3, #2
 8002c76:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c7c:	f107 031c 	add.w	r3, r7, #28
 8002c80:	4618      	mov	r0, r3
 8002c82:	f002 fe0b 	bl	800589c <HAL_RCC_OscConfig>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002c8c:	f000 fa36 	bl	80030fc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002c90:	f002 faf0 	bl	8005274 <HAL_PWREx_EnableOverDrive>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002c9a:	f000 fa2f 	bl	80030fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c9e:	230f      	movs	r3, #15
 8002ca0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002caa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002cae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002cb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cb4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002cb6:	f107 0308 	add.w	r3, r7, #8
 8002cba:	2105      	movs	r1, #5
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f002 fb29 	bl	8005314 <HAL_RCC_ClockConfig>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002cc8:	f000 fa18 	bl	80030fc <Error_Handler>
  }
}
 8002ccc:	bf00      	nop
 8002cce:	3750      	adds	r7, #80	@ 0x50
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	40007000 	.word	0x40007000

08002cdc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002ce2:	463b      	mov	r3, r7
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002cee:	4b21      	ldr	r3, [pc, #132]	@ (8002d74 <MX_ADC1_Init+0x98>)
 8002cf0:	4a21      	ldr	r2, [pc, #132]	@ (8002d78 <MX_ADC1_Init+0x9c>)
 8002cf2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8002d74 <MX_ADC1_Init+0x98>)
 8002cf6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002cfa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8002d74 <MX_ADC1_Init+0x98>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002d02:	4b1c      	ldr	r3, [pc, #112]	@ (8002d74 <MX_ADC1_Init+0x98>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002d08:	4b1a      	ldr	r3, [pc, #104]	@ (8002d74 <MX_ADC1_Init+0x98>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d0e:	4b19      	ldr	r3, [pc, #100]	@ (8002d74 <MX_ADC1_Init+0x98>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d16:	4b17      	ldr	r3, [pc, #92]	@ (8002d74 <MX_ADC1_Init+0x98>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d1c:	4b15      	ldr	r3, [pc, #84]	@ (8002d74 <MX_ADC1_Init+0x98>)
 8002d1e:	4a17      	ldr	r2, [pc, #92]	@ (8002d7c <MX_ADC1_Init+0xa0>)
 8002d20:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d22:	4b14      	ldr	r3, [pc, #80]	@ (8002d74 <MX_ADC1_Init+0x98>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002d28:	4b12      	ldr	r3, [pc, #72]	@ (8002d74 <MX_ADC1_Init+0x98>)
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002d2e:	4b11      	ldr	r3, [pc, #68]	@ (8002d74 <MX_ADC1_Init+0x98>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d36:	4b0f      	ldr	r3, [pc, #60]	@ (8002d74 <MX_ADC1_Init+0x98>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d3c:	480d      	ldr	r0, [pc, #52]	@ (8002d74 <MX_ADC1_Init+0x98>)
 8002d3e:	f000 ff81 	bl	8003c44 <HAL_ADC_Init>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002d48:	f000 f9d8 	bl	80030fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002d4c:	2305      	movs	r3, #5
 8002d4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002d50:	2301      	movs	r3, #1
 8002d52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002d54:	2300      	movs	r3, #0
 8002d56:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d58:	463b      	mov	r3, r7
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4805      	ldr	r0, [pc, #20]	@ (8002d74 <MX_ADC1_Init+0x98>)
 8002d5e:	f000 ffb5 	bl	8003ccc <HAL_ADC_ConfigChannel>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002d68:	f000 f9c8 	bl	80030fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d6c:	bf00      	nop
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	200001a4 	.word	0x200001a4
 8002d78:	40012000 	.word	0x40012000
 8002d7c:	0f000001 	.word	0x0f000001

08002d80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d84:	4b12      	ldr	r3, [pc, #72]	@ (8002dd0 <MX_I2C1_Init+0x50>)
 8002d86:	4a13      	ldr	r2, [pc, #76]	@ (8002dd4 <MX_I2C1_Init+0x54>)
 8002d88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002d8a:	4b11      	ldr	r3, [pc, #68]	@ (8002dd0 <MX_I2C1_Init+0x50>)
 8002d8c:	4a12      	ldr	r2, [pc, #72]	@ (8002dd8 <MX_I2C1_Init+0x58>)
 8002d8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d90:	4b0f      	ldr	r3, [pc, #60]	@ (8002dd0 <MX_I2C1_Init+0x50>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d96:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd0 <MX_I2C1_Init+0x50>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd0 <MX_I2C1_Init+0x50>)
 8002d9e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002da2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002da4:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd0 <MX_I2C1_Init+0x50>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002daa:	4b09      	ldr	r3, [pc, #36]	@ (8002dd0 <MX_I2C1_Init+0x50>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002db0:	4b07      	ldr	r3, [pc, #28]	@ (8002dd0 <MX_I2C1_Init+0x50>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002db6:	4b06      	ldr	r3, [pc, #24]	@ (8002dd0 <MX_I2C1_Init+0x50>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002dbc:	4804      	ldr	r0, [pc, #16]	@ (8002dd0 <MX_I2C1_Init+0x50>)
 8002dbe:	f001 fc8d 	bl	80046dc <HAL_I2C_Init>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002dc8:	f000 f998 	bl	80030fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002dcc:	bf00      	nop
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	200001ec 	.word	0x200001ec
 8002dd4:	40005400 	.word	0x40005400
 8002dd8:	000186a0 	.word	0x000186a0

08002ddc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002de0:	4b12      	ldr	r3, [pc, #72]	@ (8002e2c <MX_I2C2_Init+0x50>)
 8002de2:	4a13      	ldr	r2, [pc, #76]	@ (8002e30 <MX_I2C2_Init+0x54>)
 8002de4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002de6:	4b11      	ldr	r3, [pc, #68]	@ (8002e2c <MX_I2C2_Init+0x50>)
 8002de8:	4a12      	ldr	r2, [pc, #72]	@ (8002e34 <MX_I2C2_Init+0x58>)
 8002dea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002dec:	4b0f      	ldr	r3, [pc, #60]	@ (8002e2c <MX_I2C2_Init+0x50>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002df2:	4b0e      	ldr	r3, [pc, #56]	@ (8002e2c <MX_I2C2_Init+0x50>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002df8:	4b0c      	ldr	r3, [pc, #48]	@ (8002e2c <MX_I2C2_Init+0x50>)
 8002dfa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002dfe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e00:	4b0a      	ldr	r3, [pc, #40]	@ (8002e2c <MX_I2C2_Init+0x50>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002e06:	4b09      	ldr	r3, [pc, #36]	@ (8002e2c <MX_I2C2_Init+0x50>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e0c:	4b07      	ldr	r3, [pc, #28]	@ (8002e2c <MX_I2C2_Init+0x50>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e12:	4b06      	ldr	r3, [pc, #24]	@ (8002e2c <MX_I2C2_Init+0x50>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002e18:	4804      	ldr	r0, [pc, #16]	@ (8002e2c <MX_I2C2_Init+0x50>)
 8002e1a:	f001 fc5f 	bl	80046dc <HAL_I2C_Init>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002e24:	f000 f96a 	bl	80030fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002e28:	bf00      	nop
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20000240 	.word	0x20000240
 8002e30:	40005800 	.word	0x40005800
 8002e34:	000186a0 	.word	0x000186a0

08002e38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002e3c:	4b17      	ldr	r3, [pc, #92]	@ (8002e9c <MX_SPI1_Init+0x64>)
 8002e3e:	4a18      	ldr	r2, [pc, #96]	@ (8002ea0 <MX_SPI1_Init+0x68>)
 8002e40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e42:	4b16      	ldr	r3, [pc, #88]	@ (8002e9c <MX_SPI1_Init+0x64>)
 8002e44:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002e48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e4a:	4b14      	ldr	r3, [pc, #80]	@ (8002e9c <MX_SPI1_Init+0x64>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e50:	4b12      	ldr	r3, [pc, #72]	@ (8002e9c <MX_SPI1_Init+0x64>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e56:	4b11      	ldr	r3, [pc, #68]	@ (8002e9c <MX_SPI1_Init+0x64>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e9c <MX_SPI1_Init+0x64>)
 8002e5e:	2201      	movs	r2, #1
 8002e60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e62:	4b0e      	ldr	r3, [pc, #56]	@ (8002e9c <MX_SPI1_Init+0x64>)
 8002e64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e9c <MX_SPI1_Init+0x64>)
 8002e6c:	2228      	movs	r2, #40	@ 0x28
 8002e6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e70:	4b0a      	ldr	r3, [pc, #40]	@ (8002e9c <MX_SPI1_Init+0x64>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e76:	4b09      	ldr	r3, [pc, #36]	@ (8002e9c <MX_SPI1_Init+0x64>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e7c:	4b07      	ldr	r3, [pc, #28]	@ (8002e9c <MX_SPI1_Init+0x64>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002e82:	4b06      	ldr	r3, [pc, #24]	@ (8002e9c <MX_SPI1_Init+0x64>)
 8002e84:	220a      	movs	r2, #10
 8002e86:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e88:	4804      	ldr	r0, [pc, #16]	@ (8002e9c <MX_SPI1_Init+0x64>)
 8002e8a:	f002 ffa5 	bl	8005dd8 <HAL_SPI_Init>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002e94:	f000 f932 	bl	80030fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e98:	bf00      	nop
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	20000294 	.word	0x20000294
 8002ea0:	40013000 	.word	0x40013000

08002ea4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eaa:	463b      	mov	r3, r7
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002eb2:	4b15      	ldr	r3, [pc, #84]	@ (8002f08 <MX_TIM7_Init+0x64>)
 8002eb4:	4a15      	ldr	r2, [pc, #84]	@ (8002f0c <MX_TIM7_Init+0x68>)
 8002eb6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 90-1;
 8002eb8:	4b13      	ldr	r3, [pc, #76]	@ (8002f08 <MX_TIM7_Init+0x64>)
 8002eba:	2259      	movs	r2, #89	@ 0x59
 8002ebc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ebe:	4b12      	ldr	r3, [pc, #72]	@ (8002f08 <MX_TIM7_Init+0x64>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8002ec4:	4b10      	ldr	r3, [pc, #64]	@ (8002f08 <MX_TIM7_Init+0x64>)
 8002ec6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002eca:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8002f08 <MX_TIM7_Init+0x64>)
 8002ece:	2280      	movs	r2, #128	@ 0x80
 8002ed0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002ed2:	480d      	ldr	r0, [pc, #52]	@ (8002f08 <MX_TIM7_Init+0x64>)
 8002ed4:	f003 fd56 	bl	8006984 <HAL_TIM_Base_Init>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002ede:	f000 f90d 	bl	80030fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002eea:	463b      	mov	r3, r7
 8002eec:	4619      	mov	r1, r3
 8002eee:	4806      	ldr	r0, [pc, #24]	@ (8002f08 <MX_TIM7_Init+0x64>)
 8002ef0:	f003 ffcc 	bl	8006e8c <HAL_TIMEx_MasterConfigSynchronization>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002efa:	f000 f8ff 	bl	80030fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	200002ec 	.word	0x200002ec
 8002f0c:	40001400 	.word	0x40001400

08002f10 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002f14:	4b0d      	ldr	r3, [pc, #52]	@ (8002f4c <MX_TIM10_Init+0x3c>)
 8002f16:	4a0e      	ldr	r2, [pc, #56]	@ (8002f50 <MX_TIM10_Init+0x40>)
 8002f18:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 179;
 8002f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f4c <MX_TIM10_Init+0x3c>)
 8002f1c:	22b3      	movs	r2, #179	@ 0xb3
 8002f1e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f20:	4b0a      	ldr	r3, [pc, #40]	@ (8002f4c <MX_TIM10_Init+0x3c>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 99;
 8002f26:	4b09      	ldr	r3, [pc, #36]	@ (8002f4c <MX_TIM10_Init+0x3c>)
 8002f28:	2263      	movs	r2, #99	@ 0x63
 8002f2a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f2c:	4b07      	ldr	r3, [pc, #28]	@ (8002f4c <MX_TIM10_Init+0x3c>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f32:	4b06      	ldr	r3, [pc, #24]	@ (8002f4c <MX_TIM10_Init+0x3c>)
 8002f34:	2280      	movs	r2, #128	@ 0x80
 8002f36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002f38:	4804      	ldr	r0, [pc, #16]	@ (8002f4c <MX_TIM10_Init+0x3c>)
 8002f3a:	f003 fd23 	bl	8006984 <HAL_TIM_Base_Init>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 8002f44:	f000 f8da 	bl	80030fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002f48:	bf00      	nop
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	20000334 	.word	0x20000334
 8002f50:	40014400 	.word	0x40014400

08002f54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f58:	4b11      	ldr	r3, [pc, #68]	@ (8002fa0 <MX_USART1_UART_Init+0x4c>)
 8002f5a:	4a12      	ldr	r2, [pc, #72]	@ (8002fa4 <MX_USART1_UART_Init+0x50>)
 8002f5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f5e:	4b10      	ldr	r3, [pc, #64]	@ (8002fa0 <MX_USART1_UART_Init+0x4c>)
 8002f60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f66:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa0 <MX_USART1_UART_Init+0x4c>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa0 <MX_USART1_UART_Init+0x4c>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f72:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa0 <MX_USART1_UART_Init+0x4c>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f78:	4b09      	ldr	r3, [pc, #36]	@ (8002fa0 <MX_USART1_UART_Init+0x4c>)
 8002f7a:	220c      	movs	r2, #12
 8002f7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f7e:	4b08      	ldr	r3, [pc, #32]	@ (8002fa0 <MX_USART1_UART_Init+0x4c>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f84:	4b06      	ldr	r3, [pc, #24]	@ (8002fa0 <MX_USART1_UART_Init+0x4c>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f8a:	4805      	ldr	r0, [pc, #20]	@ (8002fa0 <MX_USART1_UART_Init+0x4c>)
 8002f8c:	f004 f80e 	bl	8006fac <HAL_UART_Init>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f96:	f000 f8b1 	bl	80030fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f9a:	bf00      	nop
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	2000037c 	.word	0x2000037c
 8002fa4:	40011000 	.word	0x40011000

08002fa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08a      	sub	sp, #40	@ 0x28
 8002fac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fae:	f107 0314 	add.w	r3, r7, #20
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	605a      	str	r2, [r3, #4]
 8002fb8:	609a      	str	r2, [r3, #8]
 8002fba:	60da      	str	r2, [r3, #12]
 8002fbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	4b4a      	ldr	r3, [pc, #296]	@ (80030ec <MX_GPIO_Init+0x144>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc6:	4a49      	ldr	r2, [pc, #292]	@ (80030ec <MX_GPIO_Init+0x144>)
 8002fc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fce:	4b47      	ldr	r3, [pc, #284]	@ (80030ec <MX_GPIO_Init+0x144>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd6:	613b      	str	r3, [r7, #16]
 8002fd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	4b43      	ldr	r3, [pc, #268]	@ (80030ec <MX_GPIO_Init+0x144>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe2:	4a42      	ldr	r2, [pc, #264]	@ (80030ec <MX_GPIO_Init+0x144>)
 8002fe4:	f043 0304 	orr.w	r3, r3, #4
 8002fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fea:	4b40      	ldr	r3, [pc, #256]	@ (80030ec <MX_GPIO_Init+0x144>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fee:	f003 0304 	and.w	r3, r3, #4
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	4b3c      	ldr	r3, [pc, #240]	@ (80030ec <MX_GPIO_Init+0x144>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffe:	4a3b      	ldr	r2, [pc, #236]	@ (80030ec <MX_GPIO_Init+0x144>)
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	6313      	str	r3, [r2, #48]	@ 0x30
 8003006:	4b39      	ldr	r3, [pc, #228]	@ (80030ec <MX_GPIO_Init+0x144>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003012:	2300      	movs	r3, #0
 8003014:	607b      	str	r3, [r7, #4]
 8003016:	4b35      	ldr	r3, [pc, #212]	@ (80030ec <MX_GPIO_Init+0x144>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301a:	4a34      	ldr	r2, [pc, #208]	@ (80030ec <MX_GPIO_Init+0x144>)
 800301c:	f043 0302 	orr.w	r3, r3, #2
 8003020:	6313      	str	r3, [r2, #48]	@ 0x30
 8003022:	4b32      	ldr	r3, [pc, #200]	@ (80030ec <MX_GPIO_Init+0x144>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	607b      	str	r3, [r7, #4]
 800302c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CH1_LED_CON_Pin|CH2_LED_CON_Pin|CH3_LED_CON_Pin|ADC_RST__Pin, GPIO_PIN_RESET);
 800302e:	2200      	movs	r2, #0
 8003030:	2147      	movs	r1, #71	@ 0x47
 8003032:	482f      	ldr	r0, [pc, #188]	@ (80030f0 <MX_GPIO_Init+0x148>)
 8003034:	f001 fb1e 	bl	8004674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M_SEL_A0_Pin|M_SEL_A1_Pin|M_SEL_EN_Pin, GPIO_PIN_RESET);
 8003038:	2200      	movs	r2, #0
 800303a:	2107      	movs	r1, #7
 800303c:	482d      	ldr	r0, [pc, #180]	@ (80030f4 <MX_GPIO_Init+0x14c>)
 800303e:	f001 fb19 	bl	8004674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CS__GPIO_Port, ADC_CS__Pin, GPIO_PIN_SET);
 8003042:	2201      	movs	r2, #1
 8003044:	2110      	movs	r1, #16
 8003046:	482b      	ldr	r0, [pc, #172]	@ (80030f4 <MX_GPIO_Init+0x14c>)
 8003048:	f001 fb14 	bl	8004674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OP_LED_Pin|EEPROM_WP_Pin|HEAT_CON3_Pin|HEAT_CON2_Pin
 800304c:	2200      	movs	r2, #0
 800304e:	f24e 0103 	movw	r1, #57347	@ 0xe003
 8003052:	4829      	ldr	r0, [pc, #164]	@ (80030f8 <MX_GPIO_Init+0x150>)
 8003054:	f001 fb0e 	bl	8004674 <HAL_GPIO_WritePin>
                          |HEAT_CON1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CH1_LED_CON_Pin CH2_LED_CON_Pin CH3_LED_CON_Pin ADC_RST__Pin */
  GPIO_InitStruct.Pin = CH1_LED_CON_Pin|CH2_LED_CON_Pin|CH3_LED_CON_Pin|ADC_RST__Pin;
 8003058:	2347      	movs	r3, #71	@ 0x47
 800305a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800305c:	2301      	movs	r3, #1
 800305e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003060:	2300      	movs	r3, #0
 8003062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003064:	2300      	movs	r3, #0
 8003066:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003068:	f107 0314 	add.w	r3, r7, #20
 800306c:	4619      	mov	r1, r3
 800306e:	4820      	ldr	r0, [pc, #128]	@ (80030f0 <MX_GPIO_Init+0x148>)
 8003070:	f001 f96c 	bl	800434c <HAL_GPIO_Init>

  /*Configure GPIO pins : M_SEL_A0_Pin M_SEL_A1_Pin M_SEL_EN_Pin */
  GPIO_InitStruct.Pin = M_SEL_A0_Pin|M_SEL_A1_Pin|M_SEL_EN_Pin;
 8003074:	2307      	movs	r3, #7
 8003076:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003078:	2301      	movs	r3, #1
 800307a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307c:	2300      	movs	r3, #0
 800307e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003080:	2300      	movs	r3, #0
 8003082:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003084:	f107 0314 	add.w	r3, r7, #20
 8003088:	4619      	mov	r1, r3
 800308a:	481a      	ldr	r0, [pc, #104]	@ (80030f4 <MX_GPIO_Init+0x14c>)
 800308c:	f001 f95e 	bl	800434c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CS__Pin */
  GPIO_InitStruct.Pin = ADC_CS__Pin;
 8003090:	2310      	movs	r3, #16
 8003092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003094:	2301      	movs	r3, #1
 8003096:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003098:	2300      	movs	r3, #0
 800309a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800309c:	2302      	movs	r3, #2
 800309e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADC_CS__GPIO_Port, &GPIO_InitStruct);
 80030a0:	f107 0314 	add.w	r3, r7, #20
 80030a4:	4619      	mov	r1, r3
 80030a6:	4813      	ldr	r0, [pc, #76]	@ (80030f4 <MX_GPIO_Init+0x14c>)
 80030a8:	f001 f950 	bl	800434c <HAL_GPIO_Init>

  /*Configure GPIO pins : OP_LED_Pin EEPROM_WP_Pin HEAT_CON3_Pin HEAT_CON2_Pin
                           HEAT_CON1_Pin */
  GPIO_InitStruct.Pin = OP_LED_Pin|EEPROM_WP_Pin|HEAT_CON3_Pin|HEAT_CON2_Pin
 80030ac:	f24e 0303 	movw	r3, #57347	@ 0xe003
 80030b0:	617b      	str	r3, [r7, #20]
                          |HEAT_CON1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030b2:	2301      	movs	r3, #1
 80030b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ba:	2300      	movs	r3, #0
 80030bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030be:	f107 0314 	add.w	r3, r7, #20
 80030c2:	4619      	mov	r1, r3
 80030c4:	480c      	ldr	r0, [pc, #48]	@ (80030f8 <MX_GPIO_Init+0x150>)
 80030c6:	f001 f941 	bl	800434c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_DRDY__Pin */
  GPIO_InitStruct.Pin = ADC_DRDY__Pin;
 80030ca:	2380      	movs	r3, #128	@ 0x80
 80030cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030ce:	2300      	movs	r3, #0
 80030d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADC_DRDY__GPIO_Port, &GPIO_InitStruct);
 80030d6:	f107 0314 	add.w	r3, r7, #20
 80030da:	4619      	mov	r1, r3
 80030dc:	4804      	ldr	r0, [pc, #16]	@ (80030f0 <MX_GPIO_Init+0x148>)
 80030de:	f001 f935 	bl	800434c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030e2:	bf00      	nop
 80030e4:	3728      	adds	r7, #40	@ 0x28
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40023800 	.word	0x40023800
 80030f0:	40020800 	.word	0x40020800
 80030f4:	40020000 	.word	0x40020000
 80030f8:	40020400 	.word	0x40020400

080030fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003100:	b672      	cpsid	i
}
 8003102:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003104:	bf00      	nop
 8003106:	e7fd      	b.n	8003104 <Error_Handler+0x8>

08003108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	607b      	str	r3, [r7, #4]
 8003112:	4b10      	ldr	r3, [pc, #64]	@ (8003154 <HAL_MspInit+0x4c>)
 8003114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003116:	4a0f      	ldr	r2, [pc, #60]	@ (8003154 <HAL_MspInit+0x4c>)
 8003118:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800311c:	6453      	str	r3, [r2, #68]	@ 0x44
 800311e:	4b0d      	ldr	r3, [pc, #52]	@ (8003154 <HAL_MspInit+0x4c>)
 8003120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003122:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003126:	607b      	str	r3, [r7, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	603b      	str	r3, [r7, #0]
 800312e:	4b09      	ldr	r3, [pc, #36]	@ (8003154 <HAL_MspInit+0x4c>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003132:	4a08      	ldr	r2, [pc, #32]	@ (8003154 <HAL_MspInit+0x4c>)
 8003134:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003138:	6413      	str	r3, [r2, #64]	@ 0x40
 800313a:	4b06      	ldr	r3, [pc, #24]	@ (8003154 <HAL_MspInit+0x4c>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003142:	603b      	str	r3, [r7, #0]
 8003144:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	40023800 	.word	0x40023800

08003158 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b08a      	sub	sp, #40	@ 0x28
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003160:	f107 0314 	add.w	r3, r7, #20
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	609a      	str	r2, [r3, #8]
 800316c:	60da      	str	r2, [r3, #12]
 800316e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a17      	ldr	r2, [pc, #92]	@ (80031d4 <HAL_ADC_MspInit+0x7c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d127      	bne.n	80031ca <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	4b16      	ldr	r3, [pc, #88]	@ (80031d8 <HAL_ADC_MspInit+0x80>)
 8003180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003182:	4a15      	ldr	r2, [pc, #84]	@ (80031d8 <HAL_ADC_MspInit+0x80>)
 8003184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003188:	6453      	str	r3, [r2, #68]	@ 0x44
 800318a:	4b13      	ldr	r3, [pc, #76]	@ (80031d8 <HAL_ADC_MspInit+0x80>)
 800318c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003192:	613b      	str	r3, [r7, #16]
 8003194:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	4b0f      	ldr	r3, [pc, #60]	@ (80031d8 <HAL_ADC_MspInit+0x80>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319e:	4a0e      	ldr	r2, [pc, #56]	@ (80031d8 <HAL_ADC_MspInit+0x80>)
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031a6:	4b0c      	ldr	r3, [pc, #48]	@ (80031d8 <HAL_ADC_MspInit+0x80>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = TEMP_CH1_Pin|TEMP_CH2_Pin|TEMP_CH3_Pin;
 80031b2:	23e0      	movs	r3, #224	@ 0xe0
 80031b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031b6:	2303      	movs	r3, #3
 80031b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031be:	f107 0314 	add.w	r3, r7, #20
 80031c2:	4619      	mov	r1, r3
 80031c4:	4805      	ldr	r0, [pc, #20]	@ (80031dc <HAL_ADC_MspInit+0x84>)
 80031c6:	f001 f8c1 	bl	800434c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80031ca:	bf00      	nop
 80031cc:	3728      	adds	r7, #40	@ 0x28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40012000 	.word	0x40012000
 80031d8:	40023800 	.word	0x40023800
 80031dc:	40020000 	.word	0x40020000

080031e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08c      	sub	sp, #48	@ 0x30
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e8:	f107 031c 	add.w	r3, r7, #28
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	605a      	str	r2, [r3, #4]
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	60da      	str	r2, [r3, #12]
 80031f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a42      	ldr	r2, [pc, #264]	@ (8003308 <HAL_I2C_MspInit+0x128>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d12c      	bne.n	800325c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	61bb      	str	r3, [r7, #24]
 8003206:	4b41      	ldr	r3, [pc, #260]	@ (800330c <HAL_I2C_MspInit+0x12c>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320a:	4a40      	ldr	r2, [pc, #256]	@ (800330c <HAL_I2C_MspInit+0x12c>)
 800320c:	f043 0302 	orr.w	r3, r3, #2
 8003210:	6313      	str	r3, [r2, #48]	@ 0x30
 8003212:	4b3e      	ldr	r3, [pc, #248]	@ (800330c <HAL_I2C_MspInit+0x12c>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	61bb      	str	r3, [r7, #24]
 800321c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800321e:	23c0      	movs	r3, #192	@ 0xc0
 8003220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003222:	2312      	movs	r3, #18
 8003224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003226:	2300      	movs	r3, #0
 8003228:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800322a:	2303      	movs	r3, #3
 800322c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800322e:	2304      	movs	r3, #4
 8003230:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003232:	f107 031c 	add.w	r3, r7, #28
 8003236:	4619      	mov	r1, r3
 8003238:	4835      	ldr	r0, [pc, #212]	@ (8003310 <HAL_I2C_MspInit+0x130>)
 800323a:	f001 f887 	bl	800434c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	4b32      	ldr	r3, [pc, #200]	@ (800330c <HAL_I2C_MspInit+0x12c>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003246:	4a31      	ldr	r2, [pc, #196]	@ (800330c <HAL_I2C_MspInit+0x12c>)
 8003248:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800324c:	6413      	str	r3, [r2, #64]	@ 0x40
 800324e:	4b2f      	ldr	r3, [pc, #188]	@ (800330c <HAL_I2C_MspInit+0x12c>)
 8003250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003252:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800325a:	e050      	b.n	80032fe <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a2c      	ldr	r2, [pc, #176]	@ (8003314 <HAL_I2C_MspInit+0x134>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d14b      	bne.n	80032fe <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	4b28      	ldr	r3, [pc, #160]	@ (800330c <HAL_I2C_MspInit+0x12c>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326e:	4a27      	ldr	r2, [pc, #156]	@ (800330c <HAL_I2C_MspInit+0x12c>)
 8003270:	f043 0302 	orr.w	r3, r3, #2
 8003274:	6313      	str	r3, [r2, #48]	@ 0x30
 8003276:	4b25      	ldr	r3, [pc, #148]	@ (800330c <HAL_I2C_MspInit+0x12c>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	4b21      	ldr	r3, [pc, #132]	@ (800330c <HAL_I2C_MspInit+0x12c>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328a:	4a20      	ldr	r2, [pc, #128]	@ (800330c <HAL_I2C_MspInit+0x12c>)
 800328c:	f043 0304 	orr.w	r3, r3, #4
 8003290:	6313      	str	r3, [r2, #48]	@ 0x30
 8003292:	4b1e      	ldr	r3, [pc, #120]	@ (800330c <HAL_I2C_MspInit+0x12c>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003296:	f003 0304 	and.w	r3, r3, #4
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800329e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032a4:	2312      	movs	r3, #18
 80032a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ac:	2303      	movs	r3, #3
 80032ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80032b0:	2304      	movs	r3, #4
 80032b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032b4:	f107 031c 	add.w	r3, r7, #28
 80032b8:	4619      	mov	r1, r3
 80032ba:	4815      	ldr	r0, [pc, #84]	@ (8003310 <HAL_I2C_MspInit+0x130>)
 80032bc:	f001 f846 	bl	800434c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80032c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032c6:	2312      	movs	r3, #18
 80032c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ca:	2300      	movs	r3, #0
 80032cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ce:	2303      	movs	r3, #3
 80032d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80032d2:	2304      	movs	r3, #4
 80032d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032d6:	f107 031c 	add.w	r3, r7, #28
 80032da:	4619      	mov	r1, r3
 80032dc:	480e      	ldr	r0, [pc, #56]	@ (8003318 <HAL_I2C_MspInit+0x138>)
 80032de:	f001 f835 	bl	800434c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80032e2:	2300      	movs	r3, #0
 80032e4:	60bb      	str	r3, [r7, #8]
 80032e6:	4b09      	ldr	r3, [pc, #36]	@ (800330c <HAL_I2C_MspInit+0x12c>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ea:	4a08      	ldr	r2, [pc, #32]	@ (800330c <HAL_I2C_MspInit+0x12c>)
 80032ec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80032f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80032f2:	4b06      	ldr	r3, [pc, #24]	@ (800330c <HAL_I2C_MspInit+0x12c>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032fa:	60bb      	str	r3, [r7, #8]
 80032fc:	68bb      	ldr	r3, [r7, #8]
}
 80032fe:	bf00      	nop
 8003300:	3730      	adds	r7, #48	@ 0x30
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40005400 	.word	0x40005400
 800330c:	40023800 	.word	0x40023800
 8003310:	40020400 	.word	0x40020400
 8003314:	40005800 	.word	0x40005800
 8003318:	40020800 	.word	0x40020800

0800331c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b08a      	sub	sp, #40	@ 0x28
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003324:	f107 0314 	add.w	r3, r7, #20
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	605a      	str	r2, [r3, #4]
 800332e:	609a      	str	r2, [r3, #8]
 8003330:	60da      	str	r2, [r3, #12]
 8003332:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a19      	ldr	r2, [pc, #100]	@ (80033a0 <HAL_SPI_MspInit+0x84>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d12b      	bne.n	8003396 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800333e:	2300      	movs	r3, #0
 8003340:	613b      	str	r3, [r7, #16]
 8003342:	4b18      	ldr	r3, [pc, #96]	@ (80033a4 <HAL_SPI_MspInit+0x88>)
 8003344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003346:	4a17      	ldr	r2, [pc, #92]	@ (80033a4 <HAL_SPI_MspInit+0x88>)
 8003348:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800334c:	6453      	str	r3, [r2, #68]	@ 0x44
 800334e:	4b15      	ldr	r3, [pc, #84]	@ (80033a4 <HAL_SPI_MspInit+0x88>)
 8003350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003352:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003356:	613b      	str	r3, [r7, #16]
 8003358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	4b11      	ldr	r3, [pc, #68]	@ (80033a4 <HAL_SPI_MspInit+0x88>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003362:	4a10      	ldr	r2, [pc, #64]	@ (80033a4 <HAL_SPI_MspInit+0x88>)
 8003364:	f043 0302 	orr.w	r3, r3, #2
 8003368:	6313      	str	r3, [r2, #48]	@ 0x30
 800336a:	4b0e      	ldr	r3, [pc, #56]	@ (80033a4 <HAL_SPI_MspInit+0x88>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003376:	2338      	movs	r3, #56	@ 0x38
 8003378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337a:	2302      	movs	r3, #2
 800337c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337e:	2300      	movs	r3, #0
 8003380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003382:	2303      	movs	r3, #3
 8003384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003386:	2305      	movs	r3, #5
 8003388:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800338a:	f107 0314 	add.w	r3, r7, #20
 800338e:	4619      	mov	r1, r3
 8003390:	4805      	ldr	r0, [pc, #20]	@ (80033a8 <HAL_SPI_MspInit+0x8c>)
 8003392:	f000 ffdb 	bl	800434c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003396:	bf00      	nop
 8003398:	3728      	adds	r7, #40	@ 0x28
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40013000 	.word	0x40013000
 80033a4:	40023800 	.word	0x40023800
 80033a8:	40020400 	.word	0x40020400

080033ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a18      	ldr	r2, [pc, #96]	@ (800341c <HAL_TIM_Base_MspInit+0x70>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d116      	bne.n	80033ec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	4b17      	ldr	r3, [pc, #92]	@ (8003420 <HAL_TIM_Base_MspInit+0x74>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c6:	4a16      	ldr	r2, [pc, #88]	@ (8003420 <HAL_TIM_Base_MspInit+0x74>)
 80033c8:	f043 0320 	orr.w	r3, r3, #32
 80033cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ce:	4b14      	ldr	r3, [pc, #80]	@ (8003420 <HAL_TIM_Base_MspInit+0x74>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d2:	f003 0320 	and.w	r3, r3, #32
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80033da:	2200      	movs	r2, #0
 80033dc:	2100      	movs	r1, #0
 80033de:	2037      	movs	r0, #55	@ 0x37
 80033e0:	f000 ff7d 	bl	80042de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80033e4:	2037      	movs	r0, #55	@ 0x37
 80033e6:	f000 ff96 	bl	8004316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80033ea:	e012      	b.n	8003412 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a0c      	ldr	r2, [pc, #48]	@ (8003424 <HAL_TIM_Base_MspInit+0x78>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d10d      	bne.n	8003412 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	60bb      	str	r3, [r7, #8]
 80033fa:	4b09      	ldr	r3, [pc, #36]	@ (8003420 <HAL_TIM_Base_MspInit+0x74>)
 80033fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fe:	4a08      	ldr	r2, [pc, #32]	@ (8003420 <HAL_TIM_Base_MspInit+0x74>)
 8003400:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003404:	6453      	str	r3, [r2, #68]	@ 0x44
 8003406:	4b06      	ldr	r3, [pc, #24]	@ (8003420 <HAL_TIM_Base_MspInit+0x74>)
 8003408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800340e:	60bb      	str	r3, [r7, #8]
 8003410:	68bb      	ldr	r3, [r7, #8]
}
 8003412:	bf00      	nop
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40001400 	.word	0x40001400
 8003420:	40023800 	.word	0x40023800
 8003424:	40014400 	.word	0x40014400

08003428 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08a      	sub	sp, #40	@ 0x28
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003430:	f107 0314 	add.w	r3, r7, #20
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	605a      	str	r2, [r3, #4]
 800343a:	609a      	str	r2, [r3, #8]
 800343c:	60da      	str	r2, [r3, #12]
 800343e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a19      	ldr	r2, [pc, #100]	@ (80034ac <HAL_UART_MspInit+0x84>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d12c      	bne.n	80034a4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	4b18      	ldr	r3, [pc, #96]	@ (80034b0 <HAL_UART_MspInit+0x88>)
 8003450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003452:	4a17      	ldr	r2, [pc, #92]	@ (80034b0 <HAL_UART_MspInit+0x88>)
 8003454:	f043 0310 	orr.w	r3, r3, #16
 8003458:	6453      	str	r3, [r2, #68]	@ 0x44
 800345a:	4b15      	ldr	r3, [pc, #84]	@ (80034b0 <HAL_UART_MspInit+0x88>)
 800345c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345e:	f003 0310 	and.w	r3, r3, #16
 8003462:	613b      	str	r3, [r7, #16]
 8003464:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	4b11      	ldr	r3, [pc, #68]	@ (80034b0 <HAL_UART_MspInit+0x88>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346e:	4a10      	ldr	r2, [pc, #64]	@ (80034b0 <HAL_UART_MspInit+0x88>)
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	6313      	str	r3, [r2, #48]	@ 0x30
 8003476:	4b0e      	ldr	r3, [pc, #56]	@ (80034b0 <HAL_UART_MspInit+0x88>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003482:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003488:	2302      	movs	r3, #2
 800348a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348c:	2300      	movs	r3, #0
 800348e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003490:	2303      	movs	r3, #3
 8003492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003494:	2307      	movs	r3, #7
 8003496:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003498:	f107 0314 	add.w	r3, r7, #20
 800349c:	4619      	mov	r1, r3
 800349e:	4805      	ldr	r0, [pc, #20]	@ (80034b4 <HAL_UART_MspInit+0x8c>)
 80034a0:	f000 ff54 	bl	800434c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80034a4:	bf00      	nop
 80034a6:	3728      	adds	r7, #40	@ 0x28
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40011000 	.word	0x40011000
 80034b0:	40023800 	.word	0x40023800
 80034b4:	40020000 	.word	0x40020000

080034b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034bc:	bf00      	nop
 80034be:	e7fd      	b.n	80034bc <NMI_Handler+0x4>

080034c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034c4:	bf00      	nop
 80034c6:	e7fd      	b.n	80034c4 <HardFault_Handler+0x4>

080034c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034cc:	bf00      	nop
 80034ce:	e7fd      	b.n	80034cc <MemManage_Handler+0x4>

080034d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034d4:	bf00      	nop
 80034d6:	e7fd      	b.n	80034d4 <BusFault_Handler+0x4>

080034d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034dc:	bf00      	nop
 80034de:	e7fd      	b.n	80034dc <UsageFault_Handler+0x4>

080034e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034e4:	bf00      	nop
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034ee:	b480      	push	{r7}
 80034f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034f2:	bf00      	nop
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003500:	bf00      	nop
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800350e:	f000 fb55 	bl	8003bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003512:	bf00      	nop
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800351c:	4802      	ldr	r0, [pc, #8]	@ (8003528 <TIM7_IRQHandler+0x10>)
 800351e:	f003 faf1 	bl	8006b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003522:	bf00      	nop
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	200002ec 	.word	0x200002ec

0800352c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]
 800353c:	e00a      	b.n	8003554 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800353e:	f3af 8000 	nop.w
 8003542:	4601      	mov	r1, r0
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	60ba      	str	r2, [r7, #8]
 800354a:	b2ca      	uxtb	r2, r1
 800354c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	3301      	adds	r3, #1
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	429a      	cmp	r2, r3
 800355a:	dbf0      	blt.n	800353e <_read+0x12>
	}

return len;
 800355c:	687b      	ldr	r3, [r7, #4]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b086      	sub	sp, #24
 800356a:	af00      	add	r7, sp, #0
 800356c:	60f8      	str	r0, [r7, #12]
 800356e:	60b9      	str	r1, [r7, #8]
 8003570:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
 8003576:	e009      	b.n	800358c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	60ba      	str	r2, [r7, #8]
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff fa11 	bl	80029a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	3301      	adds	r3, #1
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	429a      	cmp	r2, r3
 8003592:	dbf1      	blt.n	8003578 <_write+0x12>
	}
	return len;
 8003594:	687b      	ldr	r3, [r7, #4]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <_close>:

int _close(int file)
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
	return -1;
 80035a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035c6:	605a      	str	r2, [r3, #4]
	return 0;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <_isatty>:

int _isatty(int file)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
	return 1;
 80035de:	2301      	movs	r3, #1
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
	return 0;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
	...

08003608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003610:	4a14      	ldr	r2, [pc, #80]	@ (8003664 <_sbrk+0x5c>)
 8003612:	4b15      	ldr	r3, [pc, #84]	@ (8003668 <_sbrk+0x60>)
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800361c:	4b13      	ldr	r3, [pc, #76]	@ (800366c <_sbrk+0x64>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d102      	bne.n	800362a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003624:	4b11      	ldr	r3, [pc, #68]	@ (800366c <_sbrk+0x64>)
 8003626:	4a12      	ldr	r2, [pc, #72]	@ (8003670 <_sbrk+0x68>)
 8003628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800362a:	4b10      	ldr	r3, [pc, #64]	@ (800366c <_sbrk+0x64>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4413      	add	r3, r2
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	429a      	cmp	r2, r3
 8003636:	d207      	bcs.n	8003648 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003638:	f004 fbb2 	bl	8007da0 <__errno>
 800363c:	4603      	mov	r3, r0
 800363e:	220c      	movs	r2, #12
 8003640:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003642:	f04f 33ff 	mov.w	r3, #4294967295
 8003646:	e009      	b.n	800365c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003648:	4b08      	ldr	r3, [pc, #32]	@ (800366c <_sbrk+0x64>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800364e:	4b07      	ldr	r3, [pc, #28]	@ (800366c <_sbrk+0x64>)
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4413      	add	r3, r2
 8003656:	4a05      	ldr	r2, [pc, #20]	@ (800366c <_sbrk+0x64>)
 8003658:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800365a:	68fb      	ldr	r3, [r7, #12]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	20020000 	.word	0x20020000
 8003668:	00000400 	.word	0x00000400
 800366c:	200003d4 	.word	0x200003d4
 8003670:	200007f0 	.word	0x200007f0

08003674 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003678:	4b06      	ldr	r3, [pc, #24]	@ (8003694 <SystemInit+0x20>)
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800367e:	4a05      	ldr	r2, [pc, #20]	@ (8003694 <SystemInit+0x20>)
 8003680:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003684:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003688:	bf00      	nop
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	e000ed00 	.word	0xe000ed00

08003698 <MMI_M1ResultSender>:
		LogDebug("%02X", bitsttf_line[arr_idx]);
	}
}

void MMI_M1ResultSender(MeasM1Result_t *p_result, uint8_t result_num)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08c      	sub	sp, #48	@ 0x30
 800369c:	af02      	add	r7, sp, #8
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	460b      	mov	r3, r1
 80036a2:	70fb      	strb	r3, [r7, #3]
	uint8_t result_buff[PROTOCOL_DATA_MAX_SIZE] = {0, };
 80036a4:	2300      	movs	r3, #0
 80036a6:	613b      	str	r3, [r7, #16]
 80036a8:	f107 0314 	add.w	r3, r7, #20
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	605a      	str	r2, [r3, #4]
 80036b2:	609a      	str	r2, [r3, #8]
 80036b4:	60da      	str	r2, [r3, #12]

	for (uint8_t idx = 0; idx < result_num; idx++)
 80036b6:	2300      	movs	r3, #0
 80036b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80036bc:	e046      	b.n	800374c <MMI_M1ResultSender+0xb4>
	{
		result_buff[idx * 5] = p_result[idx].led_ch;
 80036be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	18d1      	adds	r1, r2, r3
 80036c8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80036cc:	4613      	mov	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	780a      	ldrb	r2, [r1, #0]
 80036d4:	3328      	adds	r3, #40	@ 0x28
 80036d6:	443b      	add	r3, r7
 80036d8:	f803 2c18 	strb.w	r2, [r3, #-24]

		/* Save float data to 4 byte int array */
		FtoB f2b;
		f2b.fVal = p_result[idx].avr_adc;
 80036dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	4413      	add	r3, r2
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	60fb      	str	r3, [r7, #12]
		result_buff[idx * 5 + 1] = f2b.bVal[0];
 80036ea:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	3301      	adds	r3, #1
 80036f6:	7b3a      	ldrb	r2, [r7, #12]
 80036f8:	3328      	adds	r3, #40	@ 0x28
 80036fa:	443b      	add	r3, r7
 80036fc:	f803 2c18 	strb.w	r2, [r3, #-24]
		result_buff[idx * 5 + 2] = f2b.bVal[1];
 8003700:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003704:	4613      	mov	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	3302      	adds	r3, #2
 800370c:	7b7a      	ldrb	r2, [r7, #13]
 800370e:	3328      	adds	r3, #40	@ 0x28
 8003710:	443b      	add	r3, r7
 8003712:	f803 2c18 	strb.w	r2, [r3, #-24]
		result_buff[idx * 5 + 3] = f2b.bVal[2];
 8003716:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800371a:	4613      	mov	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	3303      	adds	r3, #3
 8003722:	7bba      	ldrb	r2, [r7, #14]
 8003724:	3328      	adds	r3, #40	@ 0x28
 8003726:	443b      	add	r3, r7
 8003728:	f803 2c18 	strb.w	r2, [r3, #-24]
		result_buff[idx * 5 + 4] = f2b.bVal[3];
 800372c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	3304      	adds	r3, #4
 8003738:	7bfa      	ldrb	r2, [r7, #15]
 800373a:	3328      	adds	r3, #40	@ 0x28
 800373c:	443b      	add	r3, r7
 800373e:	f803 2c18 	strb.w	r2, [r3, #-24]
	for (uint8_t idx = 0; idx < result_num; idx++)
 8003742:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003746:	3301      	adds	r3, #1
 8003748:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800374c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003750:	78fb      	ldrb	r3, [r7, #3]
 8003752:	429a      	cmp	r2, r3
 8003754:	d3b3      	bcc.n	80036be <MMI_M1ResultSender+0x26>
	}

	MMI_Sender(CMD_1_DEV_SEND_RESULT, CMD_2_RESULT_ADC, CMD_3_M1_RESULT, (uint8_t*)&result_buff[0], LED_MEAS_M1_RESULT_DATA_SIZE * result_num);
 8003756:	78fb      	ldrb	r3, [r7, #3]
 8003758:	461a      	mov	r2, r3
 800375a:	0092      	lsls	r2, r2, #2
 800375c:	4413      	add	r3, r2
 800375e:	b2db      	uxtb	r3, r3
 8003760:	f107 0210 	add.w	r2, r7, #16
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	4613      	mov	r3, r2
 8003768:	2201      	movs	r2, #1
 800376a:	2101      	movs	r1, #1
 800376c:	2003      	movs	r0, #3
 800376e:	f000 f829 	bl	80037c4 <MMI_Sender>
}
 8003772:	bf00      	nop
 8003774:	3728      	adds	r7, #40	@ 0x28
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <MMI_M3ResultSender>:

void MMI_M3ResultSender(MeasM3Result_t *p_result)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b08a      	sub	sp, #40	@ 0x28
 800377e:	af02      	add	r7, sp, #8
 8003780:	6078      	str	r0, [r7, #4]
	uint8_t result_buff[PROTOCOL_DATA_MAX_SIZE] = {0, };
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	f107 0310 	add.w	r3, r7, #16
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	605a      	str	r2, [r3, #4]
 8003790:	609a      	str	r2, [r3, #8]
 8003792:	60da      	str	r2, [r3, #12]
	FtoB f2b;

	/* Save float data to 4 byte int array */
	f2b.fVal = p_result->avr_adc;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	60bb      	str	r3, [r7, #8]
	result_buff[0] = f2b.bVal[0];
 800379a:	7a3b      	ldrb	r3, [r7, #8]
 800379c:	733b      	strb	r3, [r7, #12]
	result_buff[1] = f2b.bVal[1];
 800379e:	7a7b      	ldrb	r3, [r7, #9]
 80037a0:	737b      	strb	r3, [r7, #13]
	result_buff[2] = f2b.bVal[2];
 80037a2:	7abb      	ldrb	r3, [r7, #10]
 80037a4:	73bb      	strb	r3, [r7, #14]
	result_buff[3] = f2b.bVal[3];
 80037a6:	7afb      	ldrb	r3, [r7, #11]
 80037a8:	73fb      	strb	r3, [r7, #15]

	MMI_Sender(CMD_1_DEV_SEND_RESULT, CMD_2_RESULT_ADC, CMD_3_M3_RESULT, (uint8_t*)&result_buff[0], LED_MEAS_M3_RESULT_DATA_SIZE);
 80037aa:	f107 030c 	add.w	r3, r7, #12
 80037ae:	2204      	movs	r2, #4
 80037b0:	9200      	str	r2, [sp, #0]
 80037b2:	2202      	movs	r2, #2
 80037b4:	2101      	movs	r1, #1
 80037b6:	2003      	movs	r0, #3
 80037b8:	f000 f804 	bl	80037c4 <MMI_Sender>
}
 80037bc:	bf00      	nop
 80037be:	3720      	adds	r7, #32
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <MMI_Sender>:

void MMI_Sender(uint8_t cmd1, uint8_t cmd2, uint8_t cmd3, uint8_t *p_data, uint8_t len)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b0a4      	sub	sp, #144	@ 0x90
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	4603      	mov	r3, r0
 80037ce:	71fb      	strb	r3, [r7, #7]
 80037d0:	460b      	mov	r3, r1
 80037d2:	71bb      	strb	r3, [r7, #6]
 80037d4:	4613      	mov	r3, r2
 80037d6:	717b      	strb	r3, [r7, #5]
    uint8_t orig_arr[MMI_PROTOCOL_TX_MAX_LEN] = {0, };
 80037d8:	2300      	movs	r3, #0
 80037da:	60bb      	str	r3, [r7, #8]
 80037dc:	f107 030c 	add.w	r3, r7, #12
 80037e0:	227c      	movs	r2, #124	@ 0x7c
 80037e2:	2100      	movs	r1, #0
 80037e4:	4618      	mov	r0, r3
 80037e6:	f004 fa8d 	bl	8007d04 <memset>
    uint8_t chksum = MMI_PROTOCOL_CHKSUM_INIT;
 80037ea:	23c2      	movs	r3, #194	@ 0xc2
 80037ec:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    uint8_t chg_cnt = 0;
 80037f0:	2300      	movs	r3, #0
 80037f2:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
    uint8_t arr_idx = 1;
 80037f6:	2301      	movs	r3, #1
 80037f8:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

    orig_arr[MMI_PROTOCOL_STX_IDX] = 0xC0;
 80037fc:	23c0      	movs	r3, #192	@ 0xc0
 80037fe:	723b      	strb	r3, [r7, #8]
    orig_arr[MMI_PROTOCOL_LEN_IDX] = (len >> 8) & 0xFF;
 8003800:	2300      	movs	r3, #0
 8003802:	727b      	strb	r3, [r7, #9]
    orig_arr[MMI_PROTOCOL_LEN_IDX+1] = (len) & 0xFF;
 8003804:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8003808:	72bb      	strb	r3, [r7, #10]
    orig_arr[MMI_PROTOCOL_CMD1_IDX] = cmd1;
 800380a:	79fb      	ldrb	r3, [r7, #7]
 800380c:	72fb      	strb	r3, [r7, #11]
    orig_arr[MMI_PROTOCOL_CMD2_IDX] = cmd2;
 800380e:	79bb      	ldrb	r3, [r7, #6]
 8003810:	733b      	strb	r3, [r7, #12]
    orig_arr[MMI_PROTOCOL_CMD3_IDX] = cmd3;
 8003812:	797b      	ldrb	r3, [r7, #5]
 8003814:	737b      	strb	r3, [r7, #13]

    for (uint16_t i = 0; i < len ; i++)
 8003816:	2300      	movs	r3, #0
 8003818:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800381c:	e01a      	b.n	8003854 <MMI_Sender+0x90>
    {
    	orig_arr[MMI_PROTOCOL_DATA_IDX + i] = p_data[i];
 800381e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	441a      	add	r2, r3
 8003826:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800382a:	3306      	adds	r3, #6
 800382c:	7812      	ldrb	r2, [r2, #0]
 800382e:	3390      	adds	r3, #144	@ 0x90
 8003830:	443b      	add	r3, r7
 8003832:	f803 2c88 	strb.w	r2, [r3, #-136]
    	chksum += p_data[i];
 8003836:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	4413      	add	r3, r2
 800383e:	781a      	ldrb	r2, [r3, #0]
 8003840:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8003844:	4413      	add	r3, r2
 8003846:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    for (uint16_t i = 0; i < len ; i++)
 800384a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800384e:	3301      	adds	r3, #1
 8003850:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003854:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8003858:	b29b      	uxth	r3, r3
 800385a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800385e:	429a      	cmp	r2, r3
 8003860:	d3dd      	bcc.n	800381e <MMI_Sender+0x5a>
    }

    for (uint8_t i = 0 ; i < 6; i++)
 8003862:	2300      	movs	r3, #0
 8003864:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 8003868:	e00f      	b.n	800388a <MMI_Sender+0xc6>
    {
    	chksum += orig_arr[i];
 800386a:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800386e:	3390      	adds	r3, #144	@ 0x90
 8003870:	443b      	add	r3, r7
 8003872:	f813 2c88 	ldrb.w	r2, [r3, #-136]
 8003876:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800387a:	4413      	add	r3, r2
 800387c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    for (uint8_t i = 0 ; i < 6; i++)
 8003880:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 8003884:	3301      	adds	r3, #1
 8003886:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 800388a:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800388e:	2b05      	cmp	r3, #5
 8003890:	d9eb      	bls.n	800386a <MMI_Sender+0xa6>
    }

    orig_arr[MMI_PROTOCOL_DATA_IDX + len] = chksum;
 8003892:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8003896:	3306      	adds	r3, #6
 8003898:	3390      	adds	r3, #144	@ 0x90
 800389a:	443b      	add	r3, r7
 800389c:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 80038a0:	f803 2c88 	strb.w	r2, [r3, #-136]
    orig_arr[MMI_PROTOCOL_DATA_IDX + len + 1] = MMI_PROTOCOL_ETX;
 80038a4:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 80038a8:	3307      	adds	r3, #7
 80038aa:	3390      	adds	r3, #144	@ 0x90
 80038ac:	443b      	add	r3, r7
 80038ae:	22c2      	movs	r2, #194	@ 0xc2
 80038b0:	f803 2c88 	strb.w	r2, [r3, #-136]

    /* Make bitstuffing array */
    uart_send_buff[MMI_PROTOCOL_STX_IDX] = MMI_PROTOCOL_STX;
 80038b4:	4b42      	ldr	r3, [pc, #264]	@ (80039c0 <MMI_Sender+0x1fc>)
 80038b6:	22c0      	movs	r2, #192	@ 0xc0
 80038b8:	701a      	strb	r2, [r3, #0]

    for (arr_idx = 1; arr_idx < 6 + len + 1; arr_idx++)
 80038ba:	2301      	movs	r3, #1
 80038bc:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
 80038c0:	e05d      	b.n	800397e <MMI_Sender+0x1ba>
    {
    	switch (orig_arr[arr_idx])
 80038c2:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 80038c6:	3390      	adds	r3, #144	@ 0x90
 80038c8:	443b      	add	r3, r7
 80038ca:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 80038ce:	2bdb      	cmp	r3, #219	@ 0xdb
 80038d0:	d01a      	beq.n	8003908 <MMI_Sender+0x144>
 80038d2:	2bdb      	cmp	r3, #219	@ 0xdb
 80038d4:	dc40      	bgt.n	8003958 <MMI_Sender+0x194>
 80038d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80038d8:	d002      	beq.n	80038e0 <MMI_Sender+0x11c>
 80038da:	2bc2      	cmp	r3, #194	@ 0xc2
 80038dc:	d028      	beq.n	8003930 <MMI_Sender+0x16c>
 80038de:	e03b      	b.n	8003958 <MMI_Sender+0x194>
    	{
    	case 0xC0:
    		uart_send_buff[arr_idx + chg_cnt++] = MMI_PROTOCOL_BYTE_STUFF_PADDING;
 80038e0:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 80038e4:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 80038e8:	1c59      	adds	r1, r3, #1
 80038ea:	f887 108e 	strb.w	r1, [r7, #142]	@ 0x8e
 80038ee:	4413      	add	r3, r2
 80038f0:	4a33      	ldr	r2, [pc, #204]	@ (80039c0 <MMI_Sender+0x1fc>)
 80038f2:	21db      	movs	r1, #219	@ 0xdb
 80038f4:	54d1      	strb	r1, [r2, r3]
    		uart_send_buff[arr_idx + chg_cnt] = MMI_PROTOCOL_BYTE_STUFF_C0_REPLACE;
 80038f6:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 80038fa:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 80038fe:	4413      	add	r3, r2
 8003900:	4a2f      	ldr	r2, [pc, #188]	@ (80039c0 <MMI_Sender+0x1fc>)
 8003902:	21dc      	movs	r1, #220	@ 0xdc
 8003904:	54d1      	strb	r1, [r2, r3]
    		break;
 8003906:	e035      	b.n	8003974 <MMI_Sender+0x1b0>

    	case 0xDB:
    		uart_send_buff[arr_idx + chg_cnt++] = MMI_PROTOCOL_BYTE_STUFF_PADDING;
 8003908:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800390c:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8003910:	1c59      	adds	r1, r3, #1
 8003912:	f887 108e 	strb.w	r1, [r7, #142]	@ 0x8e
 8003916:	4413      	add	r3, r2
 8003918:	4a29      	ldr	r2, [pc, #164]	@ (80039c0 <MMI_Sender+0x1fc>)
 800391a:	21db      	movs	r1, #219	@ 0xdb
 800391c:	54d1      	strb	r1, [r2, r3]
    		uart_send_buff[arr_idx + chg_cnt] = MMI_PROTOCOL_BYTE_STUFF_DB_REPLACE;
 800391e:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 8003922:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8003926:	4413      	add	r3, r2
 8003928:	4a25      	ldr	r2, [pc, #148]	@ (80039c0 <MMI_Sender+0x1fc>)
 800392a:	21dd      	movs	r1, #221	@ 0xdd
 800392c:	54d1      	strb	r1, [r2, r3]
    		break;
 800392e:	e021      	b.n	8003974 <MMI_Sender+0x1b0>

    	case 0xC2:
    		uart_send_buff[arr_idx + chg_cnt++] = MMI_PROTOCOL_BYTE_STUFF_PADDING;
 8003930:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 8003934:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8003938:	1c59      	adds	r1, r3, #1
 800393a:	f887 108e 	strb.w	r1, [r7, #142]	@ 0x8e
 800393e:	4413      	add	r3, r2
 8003940:	4a1f      	ldr	r2, [pc, #124]	@ (80039c0 <MMI_Sender+0x1fc>)
 8003942:	21db      	movs	r1, #219	@ 0xdb
 8003944:	54d1      	strb	r1, [r2, r3]
    		uart_send_buff[arr_idx + chg_cnt] = MMI_PROTOCOL_BYTE_STUFF_C2_REPLACE;
 8003946:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800394a:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800394e:	4413      	add	r3, r2
 8003950:	4a1b      	ldr	r2, [pc, #108]	@ (80039c0 <MMI_Sender+0x1fc>)
 8003952:	21de      	movs	r1, #222	@ 0xde
 8003954:	54d1      	strb	r1, [r2, r3]
    		break;
 8003956:	e00d      	b.n	8003974 <MMI_Sender+0x1b0>

    	default:
    		uart_send_buff[arr_idx + chg_cnt] = orig_arr[arr_idx];
 8003958:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800395c:	f897 108d 	ldrb.w	r1, [r7, #141]	@ 0x8d
 8003960:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8003964:	440b      	add	r3, r1
 8003966:	3290      	adds	r2, #144	@ 0x90
 8003968:	443a      	add	r2, r7
 800396a:	f812 1c88 	ldrb.w	r1, [r2, #-136]
 800396e:	4a14      	ldr	r2, [pc, #80]	@ (80039c0 <MMI_Sender+0x1fc>)
 8003970:	54d1      	strb	r1, [r2, r3]
    		break;
 8003972:	bf00      	nop
    for (arr_idx = 1; arr_idx < 6 + len + 1; arr_idx++)
 8003974:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8003978:	3301      	adds	r3, #1
 800397a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
 800397e:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8003982:	1d9a      	adds	r2, r3, #6
 8003984:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8003988:	429a      	cmp	r2, r3
 800398a:	da9a      	bge.n	80038c2 <MMI_Sender+0xfe>
    	}
    }

    uart_send_buff[arr_idx + chg_cnt] = MMI_PROTOCOL_ETX;
 800398c:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 8003990:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8003994:	4413      	add	r3, r2
 8003996:	4a0a      	ldr	r2, [pc, #40]	@ (80039c0 <MMI_Sender+0x1fc>)
 8003998:	21c2      	movs	r1, #194	@ 0xc2
 800399a:	54d1      	strb	r1, [r2, r3]

    (void) UART_SendMMI(&uart_send_buff[0], arr_idx + chg_cnt + 1);
 800399c:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	4413      	add	r3, r2
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3301      	adds	r3, #1
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	4619      	mov	r1, r3
 80039b2:	4803      	ldr	r0, [pc, #12]	@ (80039c0 <MMI_Sender+0x1fc>)
 80039b4:	f000 f826 	bl	8003a04 <UART_SendMMI>
}
 80039b8:	bf00      	nop
 80039ba:	3790      	adds	r7, #144	@ 0x90
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	200003d8 	.word	0x200003d8

080039c4 <UART_Init>:
uint8_t tx_buffer[TX_BUFFER_SIZE];
uint8_t rx_buffer[RX_BUFFER_SIZE];

/* Public user code ----------------------------------------------------------*/
HAL_StatusTypeDef UART_Init(UART_HandleTypeDef *p_handle)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 80039cc:	2300      	movs	r3, #0
 80039ce:	73fb      	strb	r3, [r7, #15]

	if (p_handle != NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <UART_Init+0x28>
	{
		/* Regist handle */
		uart_context.uart_handle = (UART_HandleTypeDef*) p_handle;
 80039d6:	4a09      	ldr	r2, [pc, #36]	@ (80039fc <UART_Init+0x38>)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6013      	str	r3, [r2, #0]

		/* Read Start */
		HAL_UART_Receive_IT(uart_context.uart_handle, rx_buffer, 1);
 80039dc:	4b07      	ldr	r3, [pc, #28]	@ (80039fc <UART_Init+0x38>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2201      	movs	r2, #1
 80039e2:	4907      	ldr	r1, [pc, #28]	@ (8003a00 <UART_Init+0x3c>)
 80039e4:	4618      	mov	r0, r3
 80039e6:	f003 fbf2 	bl	80071ce <HAL_UART_Receive_IT>
 80039ea:	e001      	b.n	80039f0 <UART_Init+0x2c>
	}
	else
	{
		ret = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20000458 	.word	0x20000458
 8003a00:	2000045c 	.word	0x2000045c

08003a04 <UART_SendMMI>:

HAL_StatusTypeDef UART_SendMMI(uint8_t *p_data, uint16_t len)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef ret = HAL_OK;
 8003a10:	2300      	movs	r3, #0
 8003a12:	73fb      	strb	r3, [r7, #15]

	if (p_data == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d107      	bne.n	8003a2a <UART_SendMMI+0x26>
	{
		ret = HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	73fb      	strb	r3, [r7, #15]
		LogError("Invalid parameter");
 8003a1e:	2245      	movs	r2, #69	@ 0x45
 8003a20:	4908      	ldr	r1, [pc, #32]	@ (8003a44 <UART_SendMMI+0x40>)
 8003a22:	4809      	ldr	r0, [pc, #36]	@ (8003a48 <UART_SendMMI+0x44>)
 8003a24:	f000 f82a 	bl	8003a7c <DEBUG_Printf>
 8003a28:	e006      	b.n	8003a38 <UART_SendMMI+0x34>
	}
	else
	{
		ret = _uartSendData(p_data, len);
 8003a2a:	887b      	ldrh	r3, [r7, #2]
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f80c 	bl	8003a4c <_uartSendData>
 8003a34:	4603      	mov	r3, r0
 8003a36:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	0800a7a4 	.word	0x0800a7a4
 8003a48:	0800a640 	.word	0x0800a640

08003a4c <_uartSendData>:

/* Private user code ---------------------------------------------------------*/
HAL_StatusTypeDef _uartSendData(uint8_t *p_data, uint16_t len)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef ret = HAL_OK;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	73fb      	strb	r3, [r7, #15]

	ret = HAL_UART_Transmit_IT(uart_context.uart_handle, p_data, len);
 8003a5c:	4b06      	ldr	r3, [pc, #24]	@ (8003a78 <_uartSendData+0x2c>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	887a      	ldrh	r2, [r7, #2]
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f003 fb7c 	bl	8007162 <HAL_UART_Transmit_IT>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	73fb      	strb	r3, [r7, #15]

	return ret;
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	20000458 	.word	0x20000458

08003a7c <DEBUG_Printf>:
#include "util_debug.h"

static char msg[512] = {'\0',};

void DEBUG_Printf(const char * format, ...)
{
 8003a7c:	b40f      	push	{r0, r1, r2, r3}
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b082      	sub	sp, #8
 8003a82:	af00      	add	r7, sp, #0
    va_list args;
    memset(msg, 0, sizeof(msg));
 8003a84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a88:	2100      	movs	r1, #0
 8003a8a:	480c      	ldr	r0, [pc, #48]	@ (8003abc <DEBUG_Printf+0x40>)
 8003a8c:	f004 f93a 	bl	8007d04 <memset>

    va_start(args, format);
 8003a90:	f107 0314 	add.w	r3, r7, #20
 8003a94:	607b      	str	r3, [r7, #4]
    vsnprintf(msg, sizeof(msg), format, args);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003a9e:	4807      	ldr	r0, [pc, #28]	@ (8003abc <DEBUG_Printf+0x40>)
 8003aa0:	f004 f922 	bl	8007ce8 <vsniprintf>
    va_end(args);

    printf("%s\r\n", msg);
 8003aa4:	4905      	ldr	r1, [pc, #20]	@ (8003abc <DEBUG_Printf+0x40>)
 8003aa6:	4806      	ldr	r0, [pc, #24]	@ (8003ac0 <DEBUG_Printf+0x44>)
 8003aa8:	f003 ffe2 	bl	8007a70 <iprintf>
}
 8003aac:	bf00      	nop
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ab6:	b004      	add	sp, #16
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	200004a0 	.word	0x200004a0
 8003ac0:	0800a680 	.word	0x0800a680

08003ac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003ac4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003afc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003ac8:	f7ff fdd4 	bl	8003674 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003acc:	480c      	ldr	r0, [pc, #48]	@ (8003b00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003ace:	490d      	ldr	r1, [pc, #52]	@ (8003b04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8003b08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ad4:	e002      	b.n	8003adc <LoopCopyDataInit>

08003ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ada:	3304      	adds	r3, #4

08003adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ae0:	d3f9      	bcc.n	8003ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8003b0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ae4:	4c0a      	ldr	r4, [pc, #40]	@ (8003b10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ae8:	e001      	b.n	8003aee <LoopFillZerobss>

08003aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003aec:	3204      	adds	r2, #4

08003aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003af0:	d3fb      	bcc.n	8003aea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003af2:	f004 f95b 	bl	8007dac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003af6:	f7fe ff99 	bl	8002a2c <main>
  bx  lr    
 8003afa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003afc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b04:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8003b08:	0800a828 	.word	0x0800a828
  ldr r2, =_sbss
 8003b0c:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8003b10:	200007f0 	.word	0x200007f0

08003b14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b14:	e7fe      	b.n	8003b14 <ADC_IRQHandler>
	...

08003b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8003b58 <HAL_Init+0x40>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a0d      	ldr	r2, [pc, #52]	@ (8003b58 <HAL_Init+0x40>)
 8003b22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b28:	4b0b      	ldr	r3, [pc, #44]	@ (8003b58 <HAL_Init+0x40>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a0a      	ldr	r2, [pc, #40]	@ (8003b58 <HAL_Init+0x40>)
 8003b2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b34:	4b08      	ldr	r3, [pc, #32]	@ (8003b58 <HAL_Init+0x40>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a07      	ldr	r2, [pc, #28]	@ (8003b58 <HAL_Init+0x40>)
 8003b3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b40:	2003      	movs	r0, #3
 8003b42:	f000 fbc1 	bl	80042c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b46:	200f      	movs	r0, #15
 8003b48:	f000 f808 	bl	8003b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b4c:	f7ff fadc 	bl	8003108 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40023c00 	.word	0x40023c00

08003b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b64:	4b12      	ldr	r3, [pc, #72]	@ (8003bb0 <HAL_InitTick+0x54>)
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	4b12      	ldr	r3, [pc, #72]	@ (8003bb4 <HAL_InitTick+0x58>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fbd9 	bl	8004332 <HAL_SYSTICK_Config>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e00e      	b.n	8003ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b0f      	cmp	r3, #15
 8003b8e:	d80a      	bhi.n	8003ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b90:	2200      	movs	r2, #0
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	f04f 30ff 	mov.w	r0, #4294967295
 8003b98:	f000 fba1 	bl	80042de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b9c:	4a06      	ldr	r2, [pc, #24]	@ (8003bb8 <HAL_InitTick+0x5c>)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	e000      	b.n	8003ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	20000100 	.word	0x20000100
 8003bb4:	20000108 	.word	0x20000108
 8003bb8:	20000104 	.word	0x20000104

08003bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bc0:	4b06      	ldr	r3, [pc, #24]	@ (8003bdc <HAL_IncTick+0x20>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4b06      	ldr	r3, [pc, #24]	@ (8003be0 <HAL_IncTick+0x24>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4413      	add	r3, r2
 8003bcc:	4a04      	ldr	r2, [pc, #16]	@ (8003be0 <HAL_IncTick+0x24>)
 8003bce:	6013      	str	r3, [r2, #0]
}
 8003bd0:	bf00      	nop
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	20000108 	.word	0x20000108
 8003be0:	200006a0 	.word	0x200006a0

08003be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  return uwTick;
 8003be8:	4b03      	ldr	r3, [pc, #12]	@ (8003bf8 <HAL_GetTick+0x14>)
 8003bea:	681b      	ldr	r3, [r3, #0]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	200006a0 	.word	0x200006a0

08003bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c04:	f7ff ffee 	bl	8003be4 <HAL_GetTick>
 8003c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c14:	d005      	beq.n	8003c22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c16:	4b0a      	ldr	r3, [pc, #40]	@ (8003c40 <HAL_Delay+0x44>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4413      	add	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c22:	bf00      	nop
 8003c24:	f7ff ffde 	bl	8003be4 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d8f7      	bhi.n	8003c24 <HAL_Delay+0x28>
  {
  }
}
 8003c34:	bf00      	nop
 8003c36:	bf00      	nop
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	20000108 	.word	0x20000108

08003c44 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e033      	b.n	8003cc2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d109      	bne.n	8003c76 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7ff fa78 	bl	8003158 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7a:	f003 0310 	and.w	r3, r3, #16
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d118      	bne.n	8003cb4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c86:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003c8a:	f023 0302 	bic.w	r3, r3, #2
 8003c8e:	f043 0202 	orr.w	r2, r3, #2
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f94a 	bl	8003f30 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca6:	f023 0303 	bic.w	r3, r3, #3
 8003caa:	f043 0201 	orr.w	r2, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	641a      	str	r2, [r3, #64]	@ 0x40
 8003cb2:	e001      	b.n	8003cb8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x1c>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e113      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x244>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b09      	cmp	r3, #9
 8003cf6:	d925      	bls.n	8003d44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68d9      	ldr	r1, [r3, #12]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	461a      	mov	r2, r3
 8003d06:	4613      	mov	r3, r2
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	4413      	add	r3, r2
 8003d0c:	3b1e      	subs	r3, #30
 8003d0e:	2207      	movs	r2, #7
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	43da      	mvns	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	400a      	ands	r2, r1
 8003d1c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68d9      	ldr	r1, [r3, #12]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	4618      	mov	r0, r3
 8003d30:	4603      	mov	r3, r0
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	4403      	add	r3, r0
 8003d36:	3b1e      	subs	r3, #30
 8003d38:	409a      	lsls	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	60da      	str	r2, [r3, #12]
 8003d42:	e022      	b.n	8003d8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6919      	ldr	r1, [r3, #16]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	461a      	mov	r2, r3
 8003d52:	4613      	mov	r3, r2
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	4413      	add	r3, r2
 8003d58:	2207      	movs	r2, #7
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	43da      	mvns	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	400a      	ands	r2, r1
 8003d66:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6919      	ldr	r1, [r3, #16]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	4618      	mov	r0, r3
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	4403      	add	r3, r0
 8003d80:	409a      	lsls	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2b06      	cmp	r3, #6
 8003d90:	d824      	bhi.n	8003ddc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	3b05      	subs	r3, #5
 8003da4:	221f      	movs	r2, #31
 8003da6:	fa02 f303 	lsl.w	r3, r2, r3
 8003daa:	43da      	mvns	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	400a      	ands	r2, r1
 8003db2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	3b05      	subs	r3, #5
 8003dce:	fa00 f203 	lsl.w	r2, r0, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003dda:	e04c      	b.n	8003e76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b0c      	cmp	r3, #12
 8003de2:	d824      	bhi.n	8003e2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	4613      	mov	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4413      	add	r3, r2
 8003df4:	3b23      	subs	r3, #35	@ 0x23
 8003df6:	221f      	movs	r2, #31
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	43da      	mvns	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	400a      	ands	r2, r1
 8003e04:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	4618      	mov	r0, r3
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	3b23      	subs	r3, #35	@ 0x23
 8003e20:	fa00 f203 	lsl.w	r2, r0, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e2c:	e023      	b.n	8003e76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	3b41      	subs	r3, #65	@ 0x41
 8003e40:	221f      	movs	r2, #31
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	43da      	mvns	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	400a      	ands	r2, r1
 8003e4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	4613      	mov	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	3b41      	subs	r3, #65	@ 0x41
 8003e6a:	fa00 f203 	lsl.w	r2, r0, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e76:	4b29      	ldr	r3, [pc, #164]	@ (8003f1c <HAL_ADC_ConfigChannel+0x250>)
 8003e78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a28      	ldr	r2, [pc, #160]	@ (8003f20 <HAL_ADC_ConfigChannel+0x254>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d10f      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x1d8>
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2b12      	cmp	r3, #18
 8003e8a:	d10b      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8003f20 <HAL_ADC_ConfigChannel+0x254>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d12b      	bne.n	8003f06 <HAL_ADC_ConfigChannel+0x23a>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a1c      	ldr	r2, [pc, #112]	@ (8003f24 <HAL_ADC_ConfigChannel+0x258>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d003      	beq.n	8003ec0 <HAL_ADC_ConfigChannel+0x1f4>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b11      	cmp	r3, #17
 8003ebe:	d122      	bne.n	8003f06 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a11      	ldr	r2, [pc, #68]	@ (8003f24 <HAL_ADC_ConfigChannel+0x258>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d111      	bne.n	8003f06 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ee2:	4b11      	ldr	r3, [pc, #68]	@ (8003f28 <HAL_ADC_ConfigChannel+0x25c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a11      	ldr	r2, [pc, #68]	@ (8003f2c <HAL_ADC_ConfigChannel+0x260>)
 8003ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eec:	0c9a      	lsrs	r2, r3, #18
 8003eee:	4613      	mov	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4413      	add	r3, r2
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003ef8:	e002      	b.n	8003f00 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	3b01      	subs	r3, #1
 8003efe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f9      	bne.n	8003efa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	40012300 	.word	0x40012300
 8003f20:	40012000 	.word	0x40012000
 8003f24:	10000012 	.word	0x10000012
 8003f28:	20000100 	.word	0x20000100
 8003f2c:	431bde83 	.word	0x431bde83

08003f30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f38:	4b79      	ldr	r3, [pc, #484]	@ (8004120 <ADC_Init+0x1f0>)
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	431a      	orrs	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6859      	ldr	r1, [r3, #4]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	021a      	lsls	r2, r3, #8
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003f88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	6859      	ldr	r1, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003faa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6899      	ldr	r1, [r3, #8]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc2:	4a58      	ldr	r2, [pc, #352]	@ (8004124 <ADC_Init+0x1f4>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d022      	beq.n	800400e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003fd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6899      	ldr	r1, [r3, #8]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003ff8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6899      	ldr	r1, [r3, #8]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	609a      	str	r2, [r3, #8]
 800400c:	e00f      	b.n	800402e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800401c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800402c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0202 	bic.w	r2, r2, #2
 800403c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6899      	ldr	r1, [r3, #8]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	7e1b      	ldrb	r3, [r3, #24]
 8004048:	005a      	lsls	r2, r3, #1
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d01b      	beq.n	8004094 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800406a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800407a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6859      	ldr	r1, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004086:	3b01      	subs	r3, #1
 8004088:	035a      	lsls	r2, r3, #13
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	605a      	str	r2, [r3, #4]
 8004092:	e007      	b.n	80040a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040a2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80040b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	3b01      	subs	r3, #1
 80040c0:	051a      	lsls	r2, r3, #20
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80040d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6899      	ldr	r1, [r3, #8]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80040e6:	025a      	lsls	r2, r3, #9
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689a      	ldr	r2, [r3, #8]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6899      	ldr	r1, [r3, #8]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	029a      	lsls	r2, r3, #10
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	609a      	str	r2, [r3, #8]
}
 8004114:	bf00      	nop
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	40012300 	.word	0x40012300
 8004124:	0f000001 	.word	0x0f000001

08004128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f003 0307 	and.w	r3, r3, #7
 8004136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004138:	4b0c      	ldr	r3, [pc, #48]	@ (800416c <__NVIC_SetPriorityGrouping+0x44>)
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004144:	4013      	ands	r3, r2
 8004146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004150:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004154:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800415a:	4a04      	ldr	r2, [pc, #16]	@ (800416c <__NVIC_SetPriorityGrouping+0x44>)
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	60d3      	str	r3, [r2, #12]
}
 8004160:	bf00      	nop
 8004162:	3714      	adds	r7, #20
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	e000ed00 	.word	0xe000ed00

08004170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004174:	4b04      	ldr	r3, [pc, #16]	@ (8004188 <__NVIC_GetPriorityGrouping+0x18>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	0a1b      	lsrs	r3, r3, #8
 800417a:	f003 0307 	and.w	r3, r3, #7
}
 800417e:	4618      	mov	r0, r3
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	e000ed00 	.word	0xe000ed00

0800418c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	4603      	mov	r3, r0
 8004194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419a:	2b00      	cmp	r3, #0
 800419c:	db0b      	blt.n	80041b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800419e:	79fb      	ldrb	r3, [r7, #7]
 80041a0:	f003 021f 	and.w	r2, r3, #31
 80041a4:	4907      	ldr	r1, [pc, #28]	@ (80041c4 <__NVIC_EnableIRQ+0x38>)
 80041a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041aa:	095b      	lsrs	r3, r3, #5
 80041ac:	2001      	movs	r0, #1
 80041ae:	fa00 f202 	lsl.w	r2, r0, r2
 80041b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	e000e100 	.word	0xe000e100

080041c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	6039      	str	r1, [r7, #0]
 80041d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	db0a      	blt.n	80041f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	490c      	ldr	r1, [pc, #48]	@ (8004214 <__NVIC_SetPriority+0x4c>)
 80041e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e6:	0112      	lsls	r2, r2, #4
 80041e8:	b2d2      	uxtb	r2, r2
 80041ea:	440b      	add	r3, r1
 80041ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041f0:	e00a      	b.n	8004208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	4908      	ldr	r1, [pc, #32]	@ (8004218 <__NVIC_SetPriority+0x50>)
 80041f8:	79fb      	ldrb	r3, [r7, #7]
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	3b04      	subs	r3, #4
 8004200:	0112      	lsls	r2, r2, #4
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	440b      	add	r3, r1
 8004206:	761a      	strb	r2, [r3, #24]
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	e000e100 	.word	0xe000e100
 8004218:	e000ed00 	.word	0xe000ed00

0800421c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800421c:	b480      	push	{r7}
 800421e:	b089      	sub	sp, #36	@ 0x24
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	f1c3 0307 	rsb	r3, r3, #7
 8004236:	2b04      	cmp	r3, #4
 8004238:	bf28      	it	cs
 800423a:	2304      	movcs	r3, #4
 800423c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	3304      	adds	r3, #4
 8004242:	2b06      	cmp	r3, #6
 8004244:	d902      	bls.n	800424c <NVIC_EncodePriority+0x30>
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	3b03      	subs	r3, #3
 800424a:	e000      	b.n	800424e <NVIC_EncodePriority+0x32>
 800424c:	2300      	movs	r3, #0
 800424e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004250:	f04f 32ff 	mov.w	r2, #4294967295
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	43da      	mvns	r2, r3
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	401a      	ands	r2, r3
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004264:	f04f 31ff 	mov.w	r1, #4294967295
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	fa01 f303 	lsl.w	r3, r1, r3
 800426e:	43d9      	mvns	r1, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004274:	4313      	orrs	r3, r2
         );
}
 8004276:	4618      	mov	r0, r3
 8004278:	3724      	adds	r7, #36	@ 0x24
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
	...

08004284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3b01      	subs	r3, #1
 8004290:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004294:	d301      	bcc.n	800429a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004296:	2301      	movs	r3, #1
 8004298:	e00f      	b.n	80042ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800429a:	4a0a      	ldr	r2, [pc, #40]	@ (80042c4 <SysTick_Config+0x40>)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3b01      	subs	r3, #1
 80042a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042a2:	210f      	movs	r1, #15
 80042a4:	f04f 30ff 	mov.w	r0, #4294967295
 80042a8:	f7ff ff8e 	bl	80041c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042ac:	4b05      	ldr	r3, [pc, #20]	@ (80042c4 <SysTick_Config+0x40>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042b2:	4b04      	ldr	r3, [pc, #16]	@ (80042c4 <SysTick_Config+0x40>)
 80042b4:	2207      	movs	r2, #7
 80042b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	e000e010 	.word	0xe000e010

080042c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f7ff ff29 	bl	8004128 <__NVIC_SetPriorityGrouping>
}
 80042d6:	bf00      	nop
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042de:	b580      	push	{r7, lr}
 80042e0:	b086      	sub	sp, #24
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	4603      	mov	r3, r0
 80042e6:	60b9      	str	r1, [r7, #8]
 80042e8:	607a      	str	r2, [r7, #4]
 80042ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042f0:	f7ff ff3e 	bl	8004170 <__NVIC_GetPriorityGrouping>
 80042f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	68b9      	ldr	r1, [r7, #8]
 80042fa:	6978      	ldr	r0, [r7, #20]
 80042fc:	f7ff ff8e 	bl	800421c <NVIC_EncodePriority>
 8004300:	4602      	mov	r2, r0
 8004302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004306:	4611      	mov	r1, r2
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff ff5d 	bl	80041c8 <__NVIC_SetPriority>
}
 800430e:	bf00      	nop
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b082      	sub	sp, #8
 800431a:	af00      	add	r7, sp, #0
 800431c:	4603      	mov	r3, r0
 800431e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff ff31 	bl	800418c <__NVIC_EnableIRQ>
}
 800432a:	bf00      	nop
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b082      	sub	sp, #8
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7ff ffa2 	bl	8004284 <SysTick_Config>
 8004340:	4603      	mov	r3, r0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
	...

0800434c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800434c:	b480      	push	{r7}
 800434e:	b089      	sub	sp, #36	@ 0x24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004356:	2300      	movs	r3, #0
 8004358:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800435a:	2300      	movs	r3, #0
 800435c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800435e:	2300      	movs	r3, #0
 8004360:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004362:	2300      	movs	r3, #0
 8004364:	61fb      	str	r3, [r7, #28]
 8004366:	e165      	b.n	8004634 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004368:	2201      	movs	r2, #1
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	fa02 f303 	lsl.w	r3, r2, r3
 8004370:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	4013      	ands	r3, r2
 800437a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	429a      	cmp	r2, r3
 8004382:	f040 8154 	bne.w	800462e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	2b01      	cmp	r3, #1
 8004390:	d005      	beq.n	800439e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800439a:	2b02      	cmp	r3, #2
 800439c:	d130      	bne.n	8004400 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	2203      	movs	r2, #3
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	43db      	mvns	r3, r3
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	4013      	ands	r3, r2
 80043b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	fa02 f303 	lsl.w	r3, r2, r3
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043d4:	2201      	movs	r2, #1
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	43db      	mvns	r3, r3
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	4013      	ands	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	091b      	lsrs	r3, r3, #4
 80043ea:	f003 0201 	and.w	r2, r3, #1
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f003 0303 	and.w	r3, r3, #3
 8004408:	2b03      	cmp	r3, #3
 800440a:	d017      	beq.n	800443c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	2203      	movs	r2, #3
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	43db      	mvns	r3, r3
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	4013      	ands	r3, r2
 8004422:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	4313      	orrs	r3, r2
 8004434:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f003 0303 	and.w	r3, r3, #3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d123      	bne.n	8004490 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	08da      	lsrs	r2, r3, #3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3208      	adds	r2, #8
 8004450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004454:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	220f      	movs	r2, #15
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	43db      	mvns	r3, r3
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	4013      	ands	r3, r2
 800446a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	4313      	orrs	r3, r2
 8004480:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	08da      	lsrs	r2, r3, #3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3208      	adds	r2, #8
 800448a:	69b9      	ldr	r1, [r7, #24]
 800448c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	2203      	movs	r2, #3
 800449c:	fa02 f303 	lsl.w	r3, r2, r3
 80044a0:	43db      	mvns	r3, r3
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	4013      	ands	r3, r2
 80044a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f003 0203 	and.w	r2, r3, #3
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 80ae 	beq.w	800462e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044d2:	2300      	movs	r3, #0
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	4b5d      	ldr	r3, [pc, #372]	@ (800464c <HAL_GPIO_Init+0x300>)
 80044d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044da:	4a5c      	ldr	r2, [pc, #368]	@ (800464c <HAL_GPIO_Init+0x300>)
 80044dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80044e2:	4b5a      	ldr	r3, [pc, #360]	@ (800464c <HAL_GPIO_Init+0x300>)
 80044e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044ee:	4a58      	ldr	r2, [pc, #352]	@ (8004650 <HAL_GPIO_Init+0x304>)
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	089b      	lsrs	r3, r3, #2
 80044f4:	3302      	adds	r3, #2
 80044f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	220f      	movs	r2, #15
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	43db      	mvns	r3, r3
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	4013      	ands	r3, r2
 8004510:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a4f      	ldr	r2, [pc, #316]	@ (8004654 <HAL_GPIO_Init+0x308>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d025      	beq.n	8004566 <HAL_GPIO_Init+0x21a>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a4e      	ldr	r2, [pc, #312]	@ (8004658 <HAL_GPIO_Init+0x30c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d01f      	beq.n	8004562 <HAL_GPIO_Init+0x216>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a4d      	ldr	r2, [pc, #308]	@ (800465c <HAL_GPIO_Init+0x310>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d019      	beq.n	800455e <HAL_GPIO_Init+0x212>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a4c      	ldr	r2, [pc, #304]	@ (8004660 <HAL_GPIO_Init+0x314>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d013      	beq.n	800455a <HAL_GPIO_Init+0x20e>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a4b      	ldr	r2, [pc, #300]	@ (8004664 <HAL_GPIO_Init+0x318>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d00d      	beq.n	8004556 <HAL_GPIO_Init+0x20a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a4a      	ldr	r2, [pc, #296]	@ (8004668 <HAL_GPIO_Init+0x31c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d007      	beq.n	8004552 <HAL_GPIO_Init+0x206>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a49      	ldr	r2, [pc, #292]	@ (800466c <HAL_GPIO_Init+0x320>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d101      	bne.n	800454e <HAL_GPIO_Init+0x202>
 800454a:	2306      	movs	r3, #6
 800454c:	e00c      	b.n	8004568 <HAL_GPIO_Init+0x21c>
 800454e:	2307      	movs	r3, #7
 8004550:	e00a      	b.n	8004568 <HAL_GPIO_Init+0x21c>
 8004552:	2305      	movs	r3, #5
 8004554:	e008      	b.n	8004568 <HAL_GPIO_Init+0x21c>
 8004556:	2304      	movs	r3, #4
 8004558:	e006      	b.n	8004568 <HAL_GPIO_Init+0x21c>
 800455a:	2303      	movs	r3, #3
 800455c:	e004      	b.n	8004568 <HAL_GPIO_Init+0x21c>
 800455e:	2302      	movs	r3, #2
 8004560:	e002      	b.n	8004568 <HAL_GPIO_Init+0x21c>
 8004562:	2301      	movs	r3, #1
 8004564:	e000      	b.n	8004568 <HAL_GPIO_Init+0x21c>
 8004566:	2300      	movs	r3, #0
 8004568:	69fa      	ldr	r2, [r7, #28]
 800456a:	f002 0203 	and.w	r2, r2, #3
 800456e:	0092      	lsls	r2, r2, #2
 8004570:	4093      	lsls	r3, r2
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	4313      	orrs	r3, r2
 8004576:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004578:	4935      	ldr	r1, [pc, #212]	@ (8004650 <HAL_GPIO_Init+0x304>)
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	089b      	lsrs	r3, r3, #2
 800457e:	3302      	adds	r3, #2
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004586:	4b3a      	ldr	r3, [pc, #232]	@ (8004670 <HAL_GPIO_Init+0x324>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	43db      	mvns	r3, r3
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	4013      	ands	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045aa:	4a31      	ldr	r2, [pc, #196]	@ (8004670 <HAL_GPIO_Init+0x324>)
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045b0:	4b2f      	ldr	r3, [pc, #188]	@ (8004670 <HAL_GPIO_Init+0x324>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	43db      	mvns	r3, r3
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	4013      	ands	r3, r2
 80045be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045d4:	4a26      	ldr	r2, [pc, #152]	@ (8004670 <HAL_GPIO_Init+0x324>)
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045da:	4b25      	ldr	r3, [pc, #148]	@ (8004670 <HAL_GPIO_Init+0x324>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	43db      	mvns	r3, r3
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	4013      	ands	r3, r2
 80045e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045fe:	4a1c      	ldr	r2, [pc, #112]	@ (8004670 <HAL_GPIO_Init+0x324>)
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004604:	4b1a      	ldr	r3, [pc, #104]	@ (8004670 <HAL_GPIO_Init+0x324>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	43db      	mvns	r3, r3
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	4013      	ands	r3, r2
 8004612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d003      	beq.n	8004628 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	4313      	orrs	r3, r2
 8004626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004628:	4a11      	ldr	r2, [pc, #68]	@ (8004670 <HAL_GPIO_Init+0x324>)
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	3301      	adds	r3, #1
 8004632:	61fb      	str	r3, [r7, #28]
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	2b0f      	cmp	r3, #15
 8004638:	f67f ae96 	bls.w	8004368 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800463c:	bf00      	nop
 800463e:	bf00      	nop
 8004640:	3724      	adds	r7, #36	@ 0x24
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	40023800 	.word	0x40023800
 8004650:	40013800 	.word	0x40013800
 8004654:	40020000 	.word	0x40020000
 8004658:	40020400 	.word	0x40020400
 800465c:	40020800 	.word	0x40020800
 8004660:	40020c00 	.word	0x40020c00
 8004664:	40021000 	.word	0x40021000
 8004668:	40021400 	.word	0x40021400
 800466c:	40021800 	.word	0x40021800
 8004670:	40013c00 	.word	0x40013c00

08004674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	460b      	mov	r3, r1
 800467e:	807b      	strh	r3, [r7, #2]
 8004680:	4613      	mov	r3, r2
 8004682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004684:	787b      	ldrb	r3, [r7, #1]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800468a:	887a      	ldrh	r2, [r7, #2]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004690:	e003      	b.n	800469a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004692:	887b      	ldrh	r3, [r7, #2]
 8004694:	041a      	lsls	r2, r3, #16
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	619a      	str	r2, [r3, #24]
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b085      	sub	sp, #20
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
 80046ae:	460b      	mov	r3, r1
 80046b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80046b8:	887a      	ldrh	r2, [r7, #2]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4013      	ands	r3, r2
 80046be:	041a      	lsls	r2, r3, #16
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	43d9      	mvns	r1, r3
 80046c4:	887b      	ldrh	r3, [r7, #2]
 80046c6:	400b      	ands	r3, r1
 80046c8:	431a      	orrs	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	619a      	str	r2, [r3, #24]
}
 80046ce:	bf00      	nop
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
	...

080046dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e12b      	b.n	8004946 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d106      	bne.n	8004708 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7fe fd6c 	bl	80031e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2224      	movs	r2, #36	@ 0x24
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0201 	bic.w	r2, r2, #1
 800471e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800472e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800473e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004740:	f000 feda 	bl	80054f8 <HAL_RCC_GetPCLK1Freq>
 8004744:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	4a81      	ldr	r2, [pc, #516]	@ (8004950 <HAL_I2C_Init+0x274>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d807      	bhi.n	8004760 <HAL_I2C_Init+0x84>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4a80      	ldr	r2, [pc, #512]	@ (8004954 <HAL_I2C_Init+0x278>)
 8004754:	4293      	cmp	r3, r2
 8004756:	bf94      	ite	ls
 8004758:	2301      	movls	r3, #1
 800475a:	2300      	movhi	r3, #0
 800475c:	b2db      	uxtb	r3, r3
 800475e:	e006      	b.n	800476e <HAL_I2C_Init+0x92>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4a7d      	ldr	r2, [pc, #500]	@ (8004958 <HAL_I2C_Init+0x27c>)
 8004764:	4293      	cmp	r3, r2
 8004766:	bf94      	ite	ls
 8004768:	2301      	movls	r3, #1
 800476a:	2300      	movhi	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e0e7      	b.n	8004946 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4a78      	ldr	r2, [pc, #480]	@ (800495c <HAL_I2C_Init+0x280>)
 800477a:	fba2 2303 	umull	r2, r3, r2, r3
 800477e:	0c9b      	lsrs	r3, r3, #18
 8004780:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	430a      	orrs	r2, r1
 8004794:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	4a6a      	ldr	r2, [pc, #424]	@ (8004950 <HAL_I2C_Init+0x274>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d802      	bhi.n	80047b0 <HAL_I2C_Init+0xd4>
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	3301      	adds	r3, #1
 80047ae:	e009      	b.n	80047c4 <HAL_I2C_Init+0xe8>
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80047b6:	fb02 f303 	mul.w	r3, r2, r3
 80047ba:	4a69      	ldr	r2, [pc, #420]	@ (8004960 <HAL_I2C_Init+0x284>)
 80047bc:	fba2 2303 	umull	r2, r3, r2, r3
 80047c0:	099b      	lsrs	r3, r3, #6
 80047c2:	3301      	adds	r3, #1
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6812      	ldr	r2, [r2, #0]
 80047c8:	430b      	orrs	r3, r1
 80047ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80047d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	495c      	ldr	r1, [pc, #368]	@ (8004950 <HAL_I2C_Init+0x274>)
 80047e0:	428b      	cmp	r3, r1
 80047e2:	d819      	bhi.n	8004818 <HAL_I2C_Init+0x13c>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	1e59      	subs	r1, r3, #1
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80047f2:	1c59      	adds	r1, r3, #1
 80047f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80047f8:	400b      	ands	r3, r1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00a      	beq.n	8004814 <HAL_I2C_Init+0x138>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	1e59      	subs	r1, r3, #1
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	fbb1 f3f3 	udiv	r3, r1, r3
 800480c:	3301      	adds	r3, #1
 800480e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004812:	e051      	b.n	80048b8 <HAL_I2C_Init+0x1dc>
 8004814:	2304      	movs	r3, #4
 8004816:	e04f      	b.n	80048b8 <HAL_I2C_Init+0x1dc>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d111      	bne.n	8004844 <HAL_I2C_Init+0x168>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	1e58      	subs	r0, r3, #1
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6859      	ldr	r1, [r3, #4]
 8004828:	460b      	mov	r3, r1
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	440b      	add	r3, r1
 800482e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004832:	3301      	adds	r3, #1
 8004834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004838:	2b00      	cmp	r3, #0
 800483a:	bf0c      	ite	eq
 800483c:	2301      	moveq	r3, #1
 800483e:	2300      	movne	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	e012      	b.n	800486a <HAL_I2C_Init+0x18e>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	1e58      	subs	r0, r3, #1
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6859      	ldr	r1, [r3, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	0099      	lsls	r1, r3, #2
 8004854:	440b      	add	r3, r1
 8004856:	fbb0 f3f3 	udiv	r3, r0, r3
 800485a:	3301      	adds	r3, #1
 800485c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004860:	2b00      	cmp	r3, #0
 8004862:	bf0c      	ite	eq
 8004864:	2301      	moveq	r3, #1
 8004866:	2300      	movne	r3, #0
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <HAL_I2C_Init+0x196>
 800486e:	2301      	movs	r3, #1
 8004870:	e022      	b.n	80048b8 <HAL_I2C_Init+0x1dc>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10e      	bne.n	8004898 <HAL_I2C_Init+0x1bc>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	1e58      	subs	r0, r3, #1
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6859      	ldr	r1, [r3, #4]
 8004882:	460b      	mov	r3, r1
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	440b      	add	r3, r1
 8004888:	fbb0 f3f3 	udiv	r3, r0, r3
 800488c:	3301      	adds	r3, #1
 800488e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004892:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004896:	e00f      	b.n	80048b8 <HAL_I2C_Init+0x1dc>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	1e58      	subs	r0, r3, #1
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6859      	ldr	r1, [r3, #4]
 80048a0:	460b      	mov	r3, r1
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	440b      	add	r3, r1
 80048a6:	0099      	lsls	r1, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ae:	3301      	adds	r3, #1
 80048b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	6809      	ldr	r1, [r1, #0]
 80048bc:	4313      	orrs	r3, r2
 80048be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	69da      	ldr	r2, [r3, #28]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	431a      	orrs	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80048e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	6911      	ldr	r1, [r2, #16]
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	68d2      	ldr	r2, [r2, #12]
 80048f2:	4311      	orrs	r1, r2
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6812      	ldr	r2, [r2, #0]
 80048f8:	430b      	orrs	r3, r1
 80048fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695a      	ldr	r2, [r3, #20]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0201 	orr.w	r2, r2, #1
 8004926:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2220      	movs	r2, #32
 8004932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	000186a0 	.word	0x000186a0
 8004954:	001e847f 	.word	0x001e847f
 8004958:	003d08ff 	.word	0x003d08ff
 800495c:	431bde83 	.word	0x431bde83
 8004960:	10624dd3 	.word	0x10624dd3

08004964 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af02      	add	r7, sp, #8
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	607a      	str	r2, [r7, #4]
 800496e:	461a      	mov	r2, r3
 8004970:	460b      	mov	r3, r1
 8004972:	817b      	strh	r3, [r7, #10]
 8004974:	4613      	mov	r3, r2
 8004976:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004978:	f7ff f934 	bl	8003be4 <HAL_GetTick>
 800497c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b20      	cmp	r3, #32
 8004988:	f040 80e0 	bne.w	8004b4c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	2319      	movs	r3, #25
 8004992:	2201      	movs	r2, #1
 8004994:	4970      	ldr	r1, [pc, #448]	@ (8004b58 <HAL_I2C_Master_Transmit+0x1f4>)
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 fa92 	bl	8004ec0 <I2C_WaitOnFlagUntilTimeout>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80049a2:	2302      	movs	r3, #2
 80049a4:	e0d3      	b.n	8004b4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d101      	bne.n	80049b4 <HAL_I2C_Master_Transmit+0x50>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e0cc      	b.n	8004b4e <HAL_I2C_Master_Transmit+0x1ea>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d007      	beq.n	80049da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f042 0201 	orr.w	r2, r2, #1
 80049d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2221      	movs	r2, #33	@ 0x21
 80049ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2210      	movs	r2, #16
 80049f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	893a      	ldrh	r2, [r7, #8]
 8004a0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	4a50      	ldr	r2, [pc, #320]	@ (8004b5c <HAL_I2C_Master_Transmit+0x1f8>)
 8004a1a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a1c:	8979      	ldrh	r1, [r7, #10]
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	6a3a      	ldr	r2, [r7, #32]
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 f9ca 	bl	8004dbc <I2C_MasterRequestWrite>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e08d      	b.n	8004b4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a32:	2300      	movs	r3, #0
 8004a34:	613b      	str	r3, [r7, #16]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	613b      	str	r3, [r7, #16]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	613b      	str	r3, [r7, #16]
 8004a46:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004a48:	e066      	b.n	8004b18 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	6a39      	ldr	r1, [r7, #32]
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 fb50 	bl	80050f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00d      	beq.n	8004a76 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d107      	bne.n	8004a72 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e06b      	b.n	8004b4e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7a:	781a      	ldrb	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	3b01      	subs	r3, #1
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b04      	cmp	r3, #4
 8004ab2:	d11b      	bne.n	8004aec <HAL_I2C_Master_Transmit+0x188>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d017      	beq.n	8004aec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac0:	781a      	ldrb	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	6a39      	ldr	r1, [r7, #32]
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f000 fb47 	bl	8005184 <I2C_WaitOnBTFFlagUntilTimeout>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00d      	beq.n	8004b18 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	d107      	bne.n	8004b14 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b12:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e01a      	b.n	8004b4e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d194      	bne.n	8004a4a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2220      	movs	r2, #32
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	e000      	b.n	8004b4e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004b4c:	2302      	movs	r3, #2
  }
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	00100002 	.word	0x00100002
 8004b5c:	ffff0000 	.word	0xffff0000

08004b60 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b08a      	sub	sp, #40	@ 0x28
 8004b64:	af02      	add	r7, sp, #8
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	607a      	str	r2, [r7, #4]
 8004b6a:	603b      	str	r3, [r7, #0]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004b70:	f7ff f838 	bl	8003be4 <HAL_GetTick>
 8004b74:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b20      	cmp	r3, #32
 8004b84:	f040 8111 	bne.w	8004daa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	2319      	movs	r3, #25
 8004b8e:	2201      	movs	r2, #1
 8004b90:	4988      	ldr	r1, [pc, #544]	@ (8004db4 <HAL_I2C_IsDeviceReady+0x254>)
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 f994 	bl	8004ec0 <I2C_WaitOnFlagUntilTimeout>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	e104      	b.n	8004dac <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d101      	bne.n	8004bb0 <HAL_I2C_IsDeviceReady+0x50>
 8004bac:	2302      	movs	r3, #2
 8004bae:	e0fd      	b.n	8004dac <HAL_I2C_IsDeviceReady+0x24c>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d007      	beq.n	8004bd6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f042 0201 	orr.w	r2, r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004be4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2224      	movs	r2, #36	@ 0x24
 8004bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4a70      	ldr	r2, [pc, #448]	@ (8004db8 <HAL_I2C_IsDeviceReady+0x258>)
 8004bf8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c08:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 f952 	bl	8004ec0 <I2C_WaitOnFlagUntilTimeout>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00d      	beq.n	8004c3e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c30:	d103      	bne.n	8004c3a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c38:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e0b6      	b.n	8004dac <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c3e:	897b      	ldrh	r3, [r7, #10]
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	461a      	mov	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c4c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004c4e:	f7fe ffc9 	bl	8003be4 <HAL_GetTick>
 8004c52:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	bf0c      	ite	eq
 8004c62:	2301      	moveq	r3, #1
 8004c64:	2300      	movne	r3, #0
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c78:	bf0c      	ite	eq
 8004c7a:	2301      	moveq	r3, #1
 8004c7c:	2300      	movne	r3, #0
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004c82:	e025      	b.n	8004cd0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c84:	f7fe ffae 	bl	8003be4 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d302      	bcc.n	8004c9a <HAL_I2C_IsDeviceReady+0x13a>
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d103      	bne.n	8004ca2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	22a0      	movs	r2, #160	@ 0xa0
 8004c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	bf0c      	ite	eq
 8004cb0:	2301      	moveq	r3, #1
 8004cb2:	2300      	movne	r3, #0
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cc6:	bf0c      	ite	eq
 8004cc8:	2301      	moveq	r3, #1
 8004cca:	2300      	movne	r3, #0
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2ba0      	cmp	r3, #160	@ 0xa0
 8004cda:	d005      	beq.n	8004ce8 <HAL_I2C_IsDeviceReady+0x188>
 8004cdc:	7dfb      	ldrb	r3, [r7, #23]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d102      	bne.n	8004ce8 <HAL_I2C_IsDeviceReady+0x188>
 8004ce2:	7dbb      	ldrb	r3, [r7, #22]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0cd      	beq.n	8004c84 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d129      	bne.n	8004d52 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d0c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d0e:	2300      	movs	r3, #0
 8004d10:	613b      	str	r3, [r7, #16]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	613b      	str	r3, [r7, #16]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	613b      	str	r3, [r7, #16]
 8004d22:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	2319      	movs	r3, #25
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	4921      	ldr	r1, [pc, #132]	@ (8004db4 <HAL_I2C_IsDeviceReady+0x254>)
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 f8c6 	bl	8004ec0 <I2C_WaitOnFlagUntilTimeout>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e036      	b.n	8004dac <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	e02c      	b.n	8004dac <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d60:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d6a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	2319      	movs	r3, #25
 8004d72:	2201      	movs	r2, #1
 8004d74:	490f      	ldr	r1, [pc, #60]	@ (8004db4 <HAL_I2C_IsDeviceReady+0x254>)
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 f8a2 	bl	8004ec0 <I2C_WaitOnFlagUntilTimeout>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e012      	b.n	8004dac <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	f4ff af32 	bcc.w	8004bfa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e000      	b.n	8004dac <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004daa:	2302      	movs	r3, #2
  }
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3720      	adds	r7, #32
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	00100002 	.word	0x00100002
 8004db8:	ffff0000 	.word	0xffff0000

08004dbc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b088      	sub	sp, #32
 8004dc0:	af02      	add	r7, sp, #8
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	607a      	str	r2, [r7, #4]
 8004dc6:	603b      	str	r3, [r7, #0]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	2b08      	cmp	r3, #8
 8004dd6:	d006      	beq.n	8004de6 <I2C_MasterRequestWrite+0x2a>
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d003      	beq.n	8004de6 <I2C_MasterRequestWrite+0x2a>
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004de4:	d108      	bne.n	8004df8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004df4:	601a      	str	r2, [r3, #0]
 8004df6:	e00b      	b.n	8004e10 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dfc:	2b12      	cmp	r3, #18
 8004dfe:	d107      	bne.n	8004e10 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f000 f84f 	bl	8004ec0 <I2C_WaitOnFlagUntilTimeout>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00d      	beq.n	8004e44 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e36:	d103      	bne.n	8004e40 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e3e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e035      	b.n	8004eb0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e4c:	d108      	bne.n	8004e60 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e4e:	897b      	ldrh	r3, [r7, #10]
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	461a      	mov	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004e5c:	611a      	str	r2, [r3, #16]
 8004e5e:	e01b      	b.n	8004e98 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e60:	897b      	ldrh	r3, [r7, #10]
 8004e62:	11db      	asrs	r3, r3, #7
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	f003 0306 	and.w	r3, r3, #6
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	f063 030f 	orn	r3, r3, #15
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	490e      	ldr	r1, [pc, #56]	@ (8004eb8 <I2C_MasterRequestWrite+0xfc>)
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f000 f898 	bl	8004fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e010      	b.n	8004eb0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004e8e:	897b      	ldrh	r3, [r7, #10]
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	4907      	ldr	r1, [pc, #28]	@ (8004ebc <I2C_MasterRequestWrite+0x100>)
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 f888 	bl	8004fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e000      	b.n	8004eb0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3718      	adds	r7, #24
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	00010008 	.word	0x00010008
 8004ebc:	00010002 	.word	0x00010002

08004ec0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	603b      	str	r3, [r7, #0]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ed0:	e048      	b.n	8004f64 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed8:	d044      	beq.n	8004f64 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eda:	f7fe fe83 	bl	8003be4 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d302      	bcc.n	8004ef0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d139      	bne.n	8004f64 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	0c1b      	lsrs	r3, r3, #16
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d10d      	bne.n	8004f16 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	43da      	mvns	r2, r3
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	4013      	ands	r3, r2
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	bf0c      	ite	eq
 8004f0c:	2301      	moveq	r3, #1
 8004f0e:	2300      	movne	r3, #0
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	461a      	mov	r2, r3
 8004f14:	e00c      	b.n	8004f30 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	43da      	mvns	r2, r3
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	4013      	ands	r3, r2
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	bf0c      	ite	eq
 8004f28:	2301      	moveq	r3, #1
 8004f2a:	2300      	movne	r3, #0
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	461a      	mov	r2, r3
 8004f30:	79fb      	ldrb	r3, [r7, #7]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d116      	bne.n	8004f64 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f50:	f043 0220 	orr.w	r2, r3, #32
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e023      	b.n	8004fac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	0c1b      	lsrs	r3, r3, #16
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d10d      	bne.n	8004f8a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	43da      	mvns	r2, r3
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	4013      	ands	r3, r2
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	bf0c      	ite	eq
 8004f80:	2301      	moveq	r3, #1
 8004f82:	2300      	movne	r3, #0
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	461a      	mov	r2, r3
 8004f88:	e00c      	b.n	8004fa4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	43da      	mvns	r2, r3
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	4013      	ands	r3, r2
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	bf0c      	ite	eq
 8004f9c:	2301      	moveq	r3, #1
 8004f9e:	2300      	movne	r3, #0
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	79fb      	ldrb	r3, [r7, #7]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d093      	beq.n	8004ed2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
 8004fc0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fc2:	e071      	b.n	80050a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fd2:	d123      	bne.n	800501c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fe2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004fec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005008:	f043 0204 	orr.w	r2, r3, #4
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e067      	b.n	80050ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005022:	d041      	beq.n	80050a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005024:	f7fe fdde 	bl	8003be4 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	429a      	cmp	r2, r3
 8005032:	d302      	bcc.n	800503a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d136      	bne.n	80050a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	0c1b      	lsrs	r3, r3, #16
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b01      	cmp	r3, #1
 8005042:	d10c      	bne.n	800505e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	43da      	mvns	r2, r3
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	4013      	ands	r3, r2
 8005050:	b29b      	uxth	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	bf14      	ite	ne
 8005056:	2301      	movne	r3, #1
 8005058:	2300      	moveq	r3, #0
 800505a:	b2db      	uxtb	r3, r3
 800505c:	e00b      	b.n	8005076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	43da      	mvns	r2, r3
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	4013      	ands	r3, r2
 800506a:	b29b      	uxth	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	bf14      	ite	ne
 8005070:	2301      	movne	r3, #1
 8005072:	2300      	moveq	r3, #0
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d016      	beq.n	80050a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2220      	movs	r2, #32
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005094:	f043 0220 	orr.w	r2, r3, #32
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e021      	b.n	80050ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	0c1b      	lsrs	r3, r3, #16
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d10c      	bne.n	80050cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	43da      	mvns	r2, r3
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	4013      	ands	r3, r2
 80050be:	b29b      	uxth	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	bf14      	ite	ne
 80050c4:	2301      	movne	r3, #1
 80050c6:	2300      	moveq	r3, #0
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	e00b      	b.n	80050e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	43da      	mvns	r2, r3
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	4013      	ands	r3, r2
 80050d8:	b29b      	uxth	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	bf14      	ite	ne
 80050de:	2301      	movne	r3, #1
 80050e0:	2300      	moveq	r3, #0
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f47f af6d 	bne.w	8004fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005100:	e034      	b.n	800516c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 f886 	bl	8005214 <I2C_IsAcknowledgeFailed>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e034      	b.n	800517c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005118:	d028      	beq.n	800516c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800511a:	f7fe fd63 	bl	8003be4 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	429a      	cmp	r2, r3
 8005128:	d302      	bcc.n	8005130 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d11d      	bne.n	800516c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800513a:	2b80      	cmp	r3, #128	@ 0x80
 800513c:	d016      	beq.n	800516c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2220      	movs	r2, #32
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005158:	f043 0220 	orr.w	r2, r3, #32
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e007      	b.n	800517c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005176:	2b80      	cmp	r3, #128	@ 0x80
 8005178:	d1c3      	bne.n	8005102 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005190:	e034      	b.n	80051fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f000 f83e 	bl	8005214 <I2C_IsAcknowledgeFailed>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e034      	b.n	800520c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a8:	d028      	beq.n	80051fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051aa:	f7fe fd1b 	bl	8003be4 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d302      	bcc.n	80051c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d11d      	bne.n	80051fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	f003 0304 	and.w	r3, r3, #4
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	d016      	beq.n	80051fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2220      	movs	r2, #32
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e8:	f043 0220 	orr.w	r2, r3, #32
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e007      	b.n	800520c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	2b04      	cmp	r3, #4
 8005208:	d1c3      	bne.n	8005192 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800522a:	d11b      	bne.n	8005264 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005234:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2220      	movs	r2, #32
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005250:	f043 0204 	orr.w	r2, r3, #4
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e000      	b.n	8005266 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
	...

08005274 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800527a:	2300      	movs	r3, #0
 800527c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800527e:	2300      	movs	r3, #0
 8005280:	603b      	str	r3, [r7, #0]
 8005282:	4b20      	ldr	r3, [pc, #128]	@ (8005304 <HAL_PWREx_EnableOverDrive+0x90>)
 8005284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005286:	4a1f      	ldr	r2, [pc, #124]	@ (8005304 <HAL_PWREx_EnableOverDrive+0x90>)
 8005288:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800528c:	6413      	str	r3, [r2, #64]	@ 0x40
 800528e:	4b1d      	ldr	r3, [pc, #116]	@ (8005304 <HAL_PWREx_EnableOverDrive+0x90>)
 8005290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005296:	603b      	str	r3, [r7, #0]
 8005298:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800529a:	4b1b      	ldr	r3, [pc, #108]	@ (8005308 <HAL_PWREx_EnableOverDrive+0x94>)
 800529c:	2201      	movs	r2, #1
 800529e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052a0:	f7fe fca0 	bl	8003be4 <HAL_GetTick>
 80052a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80052a6:	e009      	b.n	80052bc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80052a8:	f7fe fc9c 	bl	8003be4 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80052b6:	d901      	bls.n	80052bc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e01f      	b.n	80052fc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80052bc:	4b13      	ldr	r3, [pc, #76]	@ (800530c <HAL_PWREx_EnableOverDrive+0x98>)
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052c8:	d1ee      	bne.n	80052a8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80052ca:	4b11      	ldr	r3, [pc, #68]	@ (8005310 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052cc:	2201      	movs	r2, #1
 80052ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052d0:	f7fe fc88 	bl	8003be4 <HAL_GetTick>
 80052d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80052d6:	e009      	b.n	80052ec <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80052d8:	f7fe fc84 	bl	8003be4 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80052e6:	d901      	bls.n	80052ec <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e007      	b.n	80052fc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80052ec:	4b07      	ldr	r3, [pc, #28]	@ (800530c <HAL_PWREx_EnableOverDrive+0x98>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052f8:	d1ee      	bne.n	80052d8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3708      	adds	r7, #8
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	40023800 	.word	0x40023800
 8005308:	420e0040 	.word	0x420e0040
 800530c:	40007000 	.word	0x40007000
 8005310:	420e0044 	.word	0x420e0044

08005314 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e0cc      	b.n	80054c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005328:	4b68      	ldr	r3, [pc, #416]	@ (80054cc <HAL_RCC_ClockConfig+0x1b8>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 030f 	and.w	r3, r3, #15
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d90c      	bls.n	8005350 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005336:	4b65      	ldr	r3, [pc, #404]	@ (80054cc <HAL_RCC_ClockConfig+0x1b8>)
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800533e:	4b63      	ldr	r3, [pc, #396]	@ (80054cc <HAL_RCC_ClockConfig+0x1b8>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 030f 	and.w	r3, r3, #15
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	429a      	cmp	r2, r3
 800534a:	d001      	beq.n	8005350 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e0b8      	b.n	80054c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d020      	beq.n	800539e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	2b00      	cmp	r3, #0
 8005366:	d005      	beq.n	8005374 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005368:	4b59      	ldr	r3, [pc, #356]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	4a58      	ldr	r2, [pc, #352]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 800536e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005372:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0308 	and.w	r3, r3, #8
 800537c:	2b00      	cmp	r3, #0
 800537e:	d005      	beq.n	800538c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005380:	4b53      	ldr	r3, [pc, #332]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	4a52      	ldr	r2, [pc, #328]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005386:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800538a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800538c:	4b50      	ldr	r3, [pc, #320]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	494d      	ldr	r1, [pc, #308]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 800539a:	4313      	orrs	r3, r2
 800539c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d044      	beq.n	8005434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d107      	bne.n	80053c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053b2:	4b47      	ldr	r3, [pc, #284]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d119      	bne.n	80053f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e07f      	b.n	80054c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d003      	beq.n	80053d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053ce:	2b03      	cmp	r3, #3
 80053d0:	d107      	bne.n	80053e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053d2:	4b3f      	ldr	r3, [pc, #252]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d109      	bne.n	80053f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e06f      	b.n	80054c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053e2:	4b3b      	ldr	r3, [pc, #236]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e067      	b.n	80054c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053f2:	4b37      	ldr	r3, [pc, #220]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f023 0203 	bic.w	r2, r3, #3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	4934      	ldr	r1, [pc, #208]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005400:	4313      	orrs	r3, r2
 8005402:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005404:	f7fe fbee 	bl	8003be4 <HAL_GetTick>
 8005408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800540a:	e00a      	b.n	8005422 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800540c:	f7fe fbea 	bl	8003be4 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800541a:	4293      	cmp	r3, r2
 800541c:	d901      	bls.n	8005422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e04f      	b.n	80054c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005422:	4b2b      	ldr	r3, [pc, #172]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f003 020c 	and.w	r2, r3, #12
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	429a      	cmp	r2, r3
 8005432:	d1eb      	bne.n	800540c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005434:	4b25      	ldr	r3, [pc, #148]	@ (80054cc <HAL_RCC_ClockConfig+0x1b8>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 030f 	and.w	r3, r3, #15
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	429a      	cmp	r2, r3
 8005440:	d20c      	bcs.n	800545c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005442:	4b22      	ldr	r3, [pc, #136]	@ (80054cc <HAL_RCC_ClockConfig+0x1b8>)
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	b2d2      	uxtb	r2, r2
 8005448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800544a:	4b20      	ldr	r3, [pc, #128]	@ (80054cc <HAL_RCC_ClockConfig+0x1b8>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 030f 	and.w	r3, r3, #15
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	429a      	cmp	r2, r3
 8005456:	d001      	beq.n	800545c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e032      	b.n	80054c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b00      	cmp	r3, #0
 8005466:	d008      	beq.n	800547a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005468:	4b19      	ldr	r3, [pc, #100]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	4916      	ldr	r1, [pc, #88]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005476:	4313      	orrs	r3, r2
 8005478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0308 	and.w	r3, r3, #8
 8005482:	2b00      	cmp	r3, #0
 8005484:	d009      	beq.n	800549a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005486:	4b12      	ldr	r3, [pc, #72]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	490e      	ldr	r1, [pc, #56]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005496:	4313      	orrs	r3, r2
 8005498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800549a:	f000 f855 	bl	8005548 <HAL_RCC_GetSysClockFreq>
 800549e:	4602      	mov	r2, r0
 80054a0:	4b0b      	ldr	r3, [pc, #44]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	091b      	lsrs	r3, r3, #4
 80054a6:	f003 030f 	and.w	r3, r3, #15
 80054aa:	490a      	ldr	r1, [pc, #40]	@ (80054d4 <HAL_RCC_ClockConfig+0x1c0>)
 80054ac:	5ccb      	ldrb	r3, [r1, r3]
 80054ae:	fa22 f303 	lsr.w	r3, r2, r3
 80054b2:	4a09      	ldr	r2, [pc, #36]	@ (80054d8 <HAL_RCC_ClockConfig+0x1c4>)
 80054b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054b6:	4b09      	ldr	r3, [pc, #36]	@ (80054dc <HAL_RCC_ClockConfig+0x1c8>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7fe fb4e 	bl	8003b5c <HAL_InitTick>

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	40023c00 	.word	0x40023c00
 80054d0:	40023800 	.word	0x40023800
 80054d4:	0800a78c 	.word	0x0800a78c
 80054d8:	20000100 	.word	0x20000100
 80054dc:	20000104 	.word	0x20000104

080054e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054e4:	4b03      	ldr	r3, [pc, #12]	@ (80054f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80054e6:	681b      	ldr	r3, [r3, #0]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	20000100 	.word	0x20000100

080054f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054fc:	f7ff fff0 	bl	80054e0 <HAL_RCC_GetHCLKFreq>
 8005500:	4602      	mov	r2, r0
 8005502:	4b05      	ldr	r3, [pc, #20]	@ (8005518 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	0a9b      	lsrs	r3, r3, #10
 8005508:	f003 0307 	and.w	r3, r3, #7
 800550c:	4903      	ldr	r1, [pc, #12]	@ (800551c <HAL_RCC_GetPCLK1Freq+0x24>)
 800550e:	5ccb      	ldrb	r3, [r1, r3]
 8005510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005514:	4618      	mov	r0, r3
 8005516:	bd80      	pop	{r7, pc}
 8005518:	40023800 	.word	0x40023800
 800551c:	0800a79c 	.word	0x0800a79c

08005520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005524:	f7ff ffdc 	bl	80054e0 <HAL_RCC_GetHCLKFreq>
 8005528:	4602      	mov	r2, r0
 800552a:	4b05      	ldr	r3, [pc, #20]	@ (8005540 <HAL_RCC_GetPCLK2Freq+0x20>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	0b5b      	lsrs	r3, r3, #13
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	4903      	ldr	r1, [pc, #12]	@ (8005544 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005536:	5ccb      	ldrb	r3, [r1, r3]
 8005538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800553c:	4618      	mov	r0, r3
 800553e:	bd80      	pop	{r7, pc}
 8005540:	40023800 	.word	0x40023800
 8005544:	0800a79c 	.word	0x0800a79c

08005548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800554c:	b0a6      	sub	sp, #152	@ 0x98
 800554e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8005556:	2300      	movs	r3, #0
 8005558:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8005562:	2300      	movs	r3, #0
 8005564:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800556e:	4bc8      	ldr	r3, [pc, #800]	@ (8005890 <HAL_RCC_GetSysClockFreq+0x348>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f003 030c 	and.w	r3, r3, #12
 8005576:	2b0c      	cmp	r3, #12
 8005578:	f200 817e 	bhi.w	8005878 <HAL_RCC_GetSysClockFreq+0x330>
 800557c:	a201      	add	r2, pc, #4	@ (adr r2, 8005584 <HAL_RCC_GetSysClockFreq+0x3c>)
 800557e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005582:	bf00      	nop
 8005584:	080055b9 	.word	0x080055b9
 8005588:	08005879 	.word	0x08005879
 800558c:	08005879 	.word	0x08005879
 8005590:	08005879 	.word	0x08005879
 8005594:	080055c1 	.word	0x080055c1
 8005598:	08005879 	.word	0x08005879
 800559c:	08005879 	.word	0x08005879
 80055a0:	08005879 	.word	0x08005879
 80055a4:	080055c9 	.word	0x080055c9
 80055a8:	08005879 	.word	0x08005879
 80055ac:	08005879 	.word	0x08005879
 80055b0:	08005879 	.word	0x08005879
 80055b4:	08005733 	.word	0x08005733
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055b8:	4bb6      	ldr	r3, [pc, #728]	@ (8005894 <HAL_RCC_GetSysClockFreq+0x34c>)
 80055ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 80055be:	e15f      	b.n	8005880 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055c0:	4bb5      	ldr	r3, [pc, #724]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x350>)
 80055c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80055c6:	e15b      	b.n	8005880 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055c8:	4bb1      	ldr	r3, [pc, #708]	@ (8005890 <HAL_RCC_GetSysClockFreq+0x348>)
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055d4:	4bae      	ldr	r3, [pc, #696]	@ (8005890 <HAL_RCC_GetSysClockFreq+0x348>)
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d031      	beq.n	8005644 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055e0:	4bab      	ldr	r3, [pc, #684]	@ (8005890 <HAL_RCC_GetSysClockFreq+0x348>)
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	099b      	lsrs	r3, r3, #6
 80055e6:	2200      	movs	r2, #0
 80055e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80055ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80055f4:	2300      	movs	r3, #0
 80055f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80055f8:	4ba7      	ldr	r3, [pc, #668]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x350>)
 80055fa:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80055fe:	462a      	mov	r2, r5
 8005600:	fb03 f202 	mul.w	r2, r3, r2
 8005604:	2300      	movs	r3, #0
 8005606:	4621      	mov	r1, r4
 8005608:	fb01 f303 	mul.w	r3, r1, r3
 800560c:	4413      	add	r3, r2
 800560e:	4aa2      	ldr	r2, [pc, #648]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x350>)
 8005610:	4621      	mov	r1, r4
 8005612:	fba1 1202 	umull	r1, r2, r1, r2
 8005616:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005618:	460a      	mov	r2, r1
 800561a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800561c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800561e:	4413      	add	r3, r2
 8005620:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005622:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005626:	2200      	movs	r2, #0
 8005628:	65bb      	str	r3, [r7, #88]	@ 0x58
 800562a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800562c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005630:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8005634:	f7fb fb20 	bl	8000c78 <__aeabi_uldivmod>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	4613      	mov	r3, r2
 800563e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005642:	e064      	b.n	800570e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005644:	4b92      	ldr	r3, [pc, #584]	@ (8005890 <HAL_RCC_GetSysClockFreq+0x348>)
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	099b      	lsrs	r3, r3, #6
 800564a:	2200      	movs	r2, #0
 800564c:	653b      	str	r3, [r7, #80]	@ 0x50
 800564e:	657a      	str	r2, [r7, #84]	@ 0x54
 8005650:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005656:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005658:	2300      	movs	r3, #0
 800565a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800565c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8005660:	4622      	mov	r2, r4
 8005662:	462b      	mov	r3, r5
 8005664:	f04f 0000 	mov.w	r0, #0
 8005668:	f04f 0100 	mov.w	r1, #0
 800566c:	0159      	lsls	r1, r3, #5
 800566e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005672:	0150      	lsls	r0, r2, #5
 8005674:	4602      	mov	r2, r0
 8005676:	460b      	mov	r3, r1
 8005678:	4621      	mov	r1, r4
 800567a:	1a51      	subs	r1, r2, r1
 800567c:	6139      	str	r1, [r7, #16]
 800567e:	4629      	mov	r1, r5
 8005680:	eb63 0301 	sbc.w	r3, r3, r1
 8005684:	617b      	str	r3, [r7, #20]
 8005686:	f04f 0200 	mov.w	r2, #0
 800568a:	f04f 0300 	mov.w	r3, #0
 800568e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005692:	4659      	mov	r1, fp
 8005694:	018b      	lsls	r3, r1, #6
 8005696:	4651      	mov	r1, sl
 8005698:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800569c:	4651      	mov	r1, sl
 800569e:	018a      	lsls	r2, r1, #6
 80056a0:	4651      	mov	r1, sl
 80056a2:	ebb2 0801 	subs.w	r8, r2, r1
 80056a6:	4659      	mov	r1, fp
 80056a8:	eb63 0901 	sbc.w	r9, r3, r1
 80056ac:	f04f 0200 	mov.w	r2, #0
 80056b0:	f04f 0300 	mov.w	r3, #0
 80056b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056c0:	4690      	mov	r8, r2
 80056c2:	4699      	mov	r9, r3
 80056c4:	4623      	mov	r3, r4
 80056c6:	eb18 0303 	adds.w	r3, r8, r3
 80056ca:	60bb      	str	r3, [r7, #8]
 80056cc:	462b      	mov	r3, r5
 80056ce:	eb49 0303 	adc.w	r3, r9, r3
 80056d2:	60fb      	str	r3, [r7, #12]
 80056d4:	f04f 0200 	mov.w	r2, #0
 80056d8:	f04f 0300 	mov.w	r3, #0
 80056dc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80056e0:	4629      	mov	r1, r5
 80056e2:	028b      	lsls	r3, r1, #10
 80056e4:	4621      	mov	r1, r4
 80056e6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056ea:	4621      	mov	r1, r4
 80056ec:	028a      	lsls	r2, r1, #10
 80056ee:	4610      	mov	r0, r2
 80056f0:	4619      	mov	r1, r3
 80056f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056f6:	2200      	movs	r2, #0
 80056f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80056fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80056fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005700:	f7fb faba 	bl	8000c78 <__aeabi_uldivmod>
 8005704:	4602      	mov	r2, r0
 8005706:	460b      	mov	r3, r1
 8005708:	4613      	mov	r3, r2
 800570a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800570e:	4b60      	ldr	r3, [pc, #384]	@ (8005890 <HAL_RCC_GetSysClockFreq+0x348>)
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	0c1b      	lsrs	r3, r3, #16
 8005714:	f003 0303 	and.w	r3, r3, #3
 8005718:	3301      	adds	r3, #1
 800571a:	005b      	lsls	r3, r3, #1
 800571c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8005720:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005724:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005728:	fbb2 f3f3 	udiv	r3, r2, r3
 800572c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005730:	e0a6      	b.n	8005880 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005732:	4b57      	ldr	r3, [pc, #348]	@ (8005890 <HAL_RCC_GetSysClockFreq+0x348>)
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800573a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800573e:	4b54      	ldr	r3, [pc, #336]	@ (8005890 <HAL_RCC_GetSysClockFreq+0x348>)
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d02a      	beq.n	80057a0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800574a:	4b51      	ldr	r3, [pc, #324]	@ (8005890 <HAL_RCC_GetSysClockFreq+0x348>)
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	099b      	lsrs	r3, r3, #6
 8005750:	2200      	movs	r2, #0
 8005752:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005754:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005758:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800575c:	2100      	movs	r1, #0
 800575e:	4b4e      	ldr	r3, [pc, #312]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x350>)
 8005760:	fb03 f201 	mul.w	r2, r3, r1
 8005764:	2300      	movs	r3, #0
 8005766:	fb00 f303 	mul.w	r3, r0, r3
 800576a:	4413      	add	r3, r2
 800576c:	4a4a      	ldr	r2, [pc, #296]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x350>)
 800576e:	fba0 1202 	umull	r1, r2, r0, r2
 8005772:	677a      	str	r2, [r7, #116]	@ 0x74
 8005774:	460a      	mov	r2, r1
 8005776:	673a      	str	r2, [r7, #112]	@ 0x70
 8005778:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800577a:	4413      	add	r3, r2
 800577c:	677b      	str	r3, [r7, #116]	@ 0x74
 800577e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005782:	2200      	movs	r2, #0
 8005784:	633b      	str	r3, [r7, #48]	@ 0x30
 8005786:	637a      	str	r2, [r7, #52]	@ 0x34
 8005788:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800578c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8005790:	f7fb fa72 	bl	8000c78 <__aeabi_uldivmod>
 8005794:	4602      	mov	r2, r0
 8005796:	460b      	mov	r3, r1
 8005798:	4613      	mov	r3, r2
 800579a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800579e:	e05b      	b.n	8005858 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057a0:	4b3b      	ldr	r3, [pc, #236]	@ (8005890 <HAL_RCC_GetSysClockFreq+0x348>)
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	099b      	lsrs	r3, r3, #6
 80057a6:	2200      	movs	r2, #0
 80057a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b2:	623b      	str	r3, [r7, #32]
 80057b4:	2300      	movs	r3, #0
 80057b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80057b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80057bc:	4642      	mov	r2, r8
 80057be:	464b      	mov	r3, r9
 80057c0:	f04f 0000 	mov.w	r0, #0
 80057c4:	f04f 0100 	mov.w	r1, #0
 80057c8:	0159      	lsls	r1, r3, #5
 80057ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057ce:	0150      	lsls	r0, r2, #5
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	4641      	mov	r1, r8
 80057d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80057da:	4649      	mov	r1, r9
 80057dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80057e0:	f04f 0200 	mov.w	r2, #0
 80057e4:	f04f 0300 	mov.w	r3, #0
 80057e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80057ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80057f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80057f4:	ebb2 040a 	subs.w	r4, r2, sl
 80057f8:	eb63 050b 	sbc.w	r5, r3, fp
 80057fc:	f04f 0200 	mov.w	r2, #0
 8005800:	f04f 0300 	mov.w	r3, #0
 8005804:	00eb      	lsls	r3, r5, #3
 8005806:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800580a:	00e2      	lsls	r2, r4, #3
 800580c:	4614      	mov	r4, r2
 800580e:	461d      	mov	r5, r3
 8005810:	4643      	mov	r3, r8
 8005812:	18e3      	adds	r3, r4, r3
 8005814:	603b      	str	r3, [r7, #0]
 8005816:	464b      	mov	r3, r9
 8005818:	eb45 0303 	adc.w	r3, r5, r3
 800581c:	607b      	str	r3, [r7, #4]
 800581e:	f04f 0200 	mov.w	r2, #0
 8005822:	f04f 0300 	mov.w	r3, #0
 8005826:	e9d7 4500 	ldrd	r4, r5, [r7]
 800582a:	4629      	mov	r1, r5
 800582c:	028b      	lsls	r3, r1, #10
 800582e:	4621      	mov	r1, r4
 8005830:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005834:	4621      	mov	r1, r4
 8005836:	028a      	lsls	r2, r1, #10
 8005838:	4610      	mov	r0, r2
 800583a:	4619      	mov	r1, r3
 800583c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005840:	2200      	movs	r2, #0
 8005842:	61bb      	str	r3, [r7, #24]
 8005844:	61fa      	str	r2, [r7, #28]
 8005846:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800584a:	f7fb fa15 	bl	8000c78 <__aeabi_uldivmod>
 800584e:	4602      	mov	r2, r0
 8005850:	460b      	mov	r3, r1
 8005852:	4613      	mov	r3, r2
 8005854:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005858:	4b0d      	ldr	r3, [pc, #52]	@ (8005890 <HAL_RCC_GetSysClockFreq+0x348>)
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	0f1b      	lsrs	r3, r3, #28
 800585e:	f003 0307 	and.w	r3, r3, #7
 8005862:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 8005866:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800586a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800586e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005872:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005876:	e003      	b.n	8005880 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005878:	4b06      	ldr	r3, [pc, #24]	@ (8005894 <HAL_RCC_GetSysClockFreq+0x34c>)
 800587a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800587e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005880:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8005884:	4618      	mov	r0, r3
 8005886:	3798      	adds	r7, #152	@ 0x98
 8005888:	46bd      	mov	sp, r7
 800588a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800588e:	bf00      	nop
 8005890:	40023800 	.word	0x40023800
 8005894:	00f42400 	.word	0x00f42400
 8005898:	016e3600 	.word	0x016e3600

0800589c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e28d      	b.n	8005dca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f000 8083 	beq.w	80059c2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80058bc:	4b94      	ldr	r3, [pc, #592]	@ (8005b10 <HAL_RCC_OscConfig+0x274>)
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f003 030c 	and.w	r3, r3, #12
 80058c4:	2b04      	cmp	r3, #4
 80058c6:	d019      	beq.n	80058fc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80058c8:	4b91      	ldr	r3, [pc, #580]	@ (8005b10 <HAL_RCC_OscConfig+0x274>)
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80058d0:	2b08      	cmp	r3, #8
 80058d2:	d106      	bne.n	80058e2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80058d4:	4b8e      	ldr	r3, [pc, #568]	@ (8005b10 <HAL_RCC_OscConfig+0x274>)
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058e0:	d00c      	beq.n	80058fc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058e2:	4b8b      	ldr	r3, [pc, #556]	@ (8005b10 <HAL_RCC_OscConfig+0x274>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80058ea:	2b0c      	cmp	r3, #12
 80058ec:	d112      	bne.n	8005914 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058ee:	4b88      	ldr	r3, [pc, #544]	@ (8005b10 <HAL_RCC_OscConfig+0x274>)
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058fa:	d10b      	bne.n	8005914 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058fc:	4b84      	ldr	r3, [pc, #528]	@ (8005b10 <HAL_RCC_OscConfig+0x274>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d05b      	beq.n	80059c0 <HAL_RCC_OscConfig+0x124>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d157      	bne.n	80059c0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e25a      	b.n	8005dca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800591c:	d106      	bne.n	800592c <HAL_RCC_OscConfig+0x90>
 800591e:	4b7c      	ldr	r3, [pc, #496]	@ (8005b10 <HAL_RCC_OscConfig+0x274>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a7b      	ldr	r2, [pc, #492]	@ (8005b10 <HAL_RCC_OscConfig+0x274>)
 8005924:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005928:	6013      	str	r3, [r2, #0]
 800592a:	e01d      	b.n	8005968 <HAL_RCC_OscConfig+0xcc>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005934:	d10c      	bne.n	8005950 <HAL_RCC_OscConfig+0xb4>
 8005936:	4b76      	ldr	r3, [pc, #472]	@ (8005b10 <HAL_RCC_OscConfig+0x274>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a75      	ldr	r2, [pc, #468]	@ (8005b10 <HAL_RCC_OscConfig+0x274>)
 800593c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005940:	6013      	str	r3, [r2, #0]
 8005942:	4b73      	ldr	r3, [pc, #460]	@ (8005b10 <HAL_RCC_OscConfig+0x274>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a72      	ldr	r2, [pc, #456]	@ (8005b10 <HAL_RCC_OscConfig+0x274>)
 8005948:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	e00b      	b.n	8005968 <HAL_RCC_OscConfig+0xcc>
 8005950:	4b6f      	ldr	r3, [pc, #444]	@ (8005b10 <HAL_RCC_OscConfig+0x274>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a6e      	ldr	r2, [pc, #440]	@ (8005b10 <HAL_RCC_OscConfig+0x274>)
 8005956:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800595a:	6013      	str	r3, [r2, #0]
 800595c:	4b6c      	ldr	r3, [pc, #432]	@ (8005b10 <HAL_RCC_OscConfig+0x274>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a6b      	ldr	r2, [pc, #428]	@ (8005b10 <HAL_RCC_OscConfig+0x274>)
 8005962:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d013      	beq.n	8005998 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005970:	f7fe f938 	bl	8003be4 <HAL_GetTick>
 8005974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005976:	e008      	b.n	800598a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005978:	f7fe f934 	bl	8003be4 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	2b64      	cmp	r3, #100	@ 0x64
 8005984:	d901      	bls.n	800598a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e21f      	b.n	8005dca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800598a:	4b61      	ldr	r3, [pc, #388]	@ (8005b10 <HAL_RCC_OscConfig+0x274>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0f0      	beq.n	8005978 <HAL_RCC_OscConfig+0xdc>
 8005996:	e014      	b.n	80059c2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005998:	f7fe f924 	bl	8003be4 <HAL_GetTick>
 800599c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800599e:	e008      	b.n	80059b2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059a0:	f7fe f920 	bl	8003be4 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b64      	cmp	r3, #100	@ 0x64
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e20b      	b.n	8005dca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059b2:	4b57      	ldr	r3, [pc, #348]	@ (8005b10 <HAL_RCC_OscConfig+0x274>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1f0      	bne.n	80059a0 <HAL_RCC_OscConfig+0x104>
 80059be:	e000      	b.n	80059c2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d06f      	beq.n	8005aae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80059ce:	4b50      	ldr	r3, [pc, #320]	@ (8005b10 <HAL_RCC_OscConfig+0x274>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f003 030c 	and.w	r3, r3, #12
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d017      	beq.n	8005a0a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80059da:	4b4d      	ldr	r3, [pc, #308]	@ (8005b10 <HAL_RCC_OscConfig+0x274>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80059e2:	2b08      	cmp	r3, #8
 80059e4:	d105      	bne.n	80059f2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80059e6:	4b4a      	ldr	r3, [pc, #296]	@ (8005b10 <HAL_RCC_OscConfig+0x274>)
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00b      	beq.n	8005a0a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059f2:	4b47      	ldr	r3, [pc, #284]	@ (8005b10 <HAL_RCC_OscConfig+0x274>)
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80059fa:	2b0c      	cmp	r3, #12
 80059fc:	d11c      	bne.n	8005a38 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059fe:	4b44      	ldr	r3, [pc, #272]	@ (8005b10 <HAL_RCC_OscConfig+0x274>)
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d116      	bne.n	8005a38 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a0a:	4b41      	ldr	r3, [pc, #260]	@ (8005b10 <HAL_RCC_OscConfig+0x274>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d005      	beq.n	8005a22 <HAL_RCC_OscConfig+0x186>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d001      	beq.n	8005a22 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e1d3      	b.n	8005dca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a22:	4b3b      	ldr	r3, [pc, #236]	@ (8005b10 <HAL_RCC_OscConfig+0x274>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	4937      	ldr	r1, [pc, #220]	@ (8005b10 <HAL_RCC_OscConfig+0x274>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a36:	e03a      	b.n	8005aae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d020      	beq.n	8005a82 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a40:	4b34      	ldr	r3, [pc, #208]	@ (8005b14 <HAL_RCC_OscConfig+0x278>)
 8005a42:	2201      	movs	r2, #1
 8005a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a46:	f7fe f8cd 	bl	8003be4 <HAL_GetTick>
 8005a4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a4c:	e008      	b.n	8005a60 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a4e:	f7fe f8c9 	bl	8003be4 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e1b4      	b.n	8005dca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a60:	4b2b      	ldr	r3, [pc, #172]	@ (8005b10 <HAL_RCC_OscConfig+0x274>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0302 	and.w	r3, r3, #2
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d0f0      	beq.n	8005a4e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a6c:	4b28      	ldr	r3, [pc, #160]	@ (8005b10 <HAL_RCC_OscConfig+0x274>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	00db      	lsls	r3, r3, #3
 8005a7a:	4925      	ldr	r1, [pc, #148]	@ (8005b10 <HAL_RCC_OscConfig+0x274>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	600b      	str	r3, [r1, #0]
 8005a80:	e015      	b.n	8005aae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a82:	4b24      	ldr	r3, [pc, #144]	@ (8005b14 <HAL_RCC_OscConfig+0x278>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a88:	f7fe f8ac 	bl	8003be4 <HAL_GetTick>
 8005a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a8e:	e008      	b.n	8005aa2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a90:	f7fe f8a8 	bl	8003be4 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e193      	b.n	8005dca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8005b10 <HAL_RCC_OscConfig+0x274>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1f0      	bne.n	8005a90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0308 	and.w	r3, r3, #8
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d036      	beq.n	8005b28 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d016      	beq.n	8005af0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ac2:	4b15      	ldr	r3, [pc, #84]	@ (8005b18 <HAL_RCC_OscConfig+0x27c>)
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ac8:	f7fe f88c 	bl	8003be4 <HAL_GetTick>
 8005acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ad0:	f7fe f888 	bl	8003be4 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e173      	b.n	8005dca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8005b10 <HAL_RCC_OscConfig+0x274>)
 8005ae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d0f0      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x234>
 8005aee:	e01b      	b.n	8005b28 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005af0:	4b09      	ldr	r3, [pc, #36]	@ (8005b18 <HAL_RCC_OscConfig+0x27c>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af6:	f7fe f875 	bl	8003be4 <HAL_GetTick>
 8005afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005afc:	e00e      	b.n	8005b1c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005afe:	f7fe f871 	bl	8003be4 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d907      	bls.n	8005b1c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e15c      	b.n	8005dca <HAL_RCC_OscConfig+0x52e>
 8005b10:	40023800 	.word	0x40023800
 8005b14:	42470000 	.word	0x42470000
 8005b18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b1c:	4b8a      	ldr	r3, [pc, #552]	@ (8005d48 <HAL_RCC_OscConfig+0x4ac>)
 8005b1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1ea      	bne.n	8005afe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0304 	and.w	r3, r3, #4
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 8097 	beq.w	8005c64 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b36:	2300      	movs	r3, #0
 8005b38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b3a:	4b83      	ldr	r3, [pc, #524]	@ (8005d48 <HAL_RCC_OscConfig+0x4ac>)
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d10f      	bne.n	8005b66 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b46:	2300      	movs	r3, #0
 8005b48:	60bb      	str	r3, [r7, #8]
 8005b4a:	4b7f      	ldr	r3, [pc, #508]	@ (8005d48 <HAL_RCC_OscConfig+0x4ac>)
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b4e:	4a7e      	ldr	r2, [pc, #504]	@ (8005d48 <HAL_RCC_OscConfig+0x4ac>)
 8005b50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b56:	4b7c      	ldr	r3, [pc, #496]	@ (8005d48 <HAL_RCC_OscConfig+0x4ac>)
 8005b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b5e:	60bb      	str	r3, [r7, #8]
 8005b60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b62:	2301      	movs	r3, #1
 8005b64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b66:	4b79      	ldr	r3, [pc, #484]	@ (8005d4c <HAL_RCC_OscConfig+0x4b0>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d118      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b72:	4b76      	ldr	r3, [pc, #472]	@ (8005d4c <HAL_RCC_OscConfig+0x4b0>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a75      	ldr	r2, [pc, #468]	@ (8005d4c <HAL_RCC_OscConfig+0x4b0>)
 8005b78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b7e:	f7fe f831 	bl	8003be4 <HAL_GetTick>
 8005b82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b84:	e008      	b.n	8005b98 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b86:	f7fe f82d 	bl	8003be4 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d901      	bls.n	8005b98 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e118      	b.n	8005dca <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b98:	4b6c      	ldr	r3, [pc, #432]	@ (8005d4c <HAL_RCC_OscConfig+0x4b0>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d0f0      	beq.n	8005b86 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d106      	bne.n	8005bba <HAL_RCC_OscConfig+0x31e>
 8005bac:	4b66      	ldr	r3, [pc, #408]	@ (8005d48 <HAL_RCC_OscConfig+0x4ac>)
 8005bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bb0:	4a65      	ldr	r2, [pc, #404]	@ (8005d48 <HAL_RCC_OscConfig+0x4ac>)
 8005bb2:	f043 0301 	orr.w	r3, r3, #1
 8005bb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bb8:	e01c      	b.n	8005bf4 <HAL_RCC_OscConfig+0x358>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	2b05      	cmp	r3, #5
 8005bc0:	d10c      	bne.n	8005bdc <HAL_RCC_OscConfig+0x340>
 8005bc2:	4b61      	ldr	r3, [pc, #388]	@ (8005d48 <HAL_RCC_OscConfig+0x4ac>)
 8005bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bc6:	4a60      	ldr	r2, [pc, #384]	@ (8005d48 <HAL_RCC_OscConfig+0x4ac>)
 8005bc8:	f043 0304 	orr.w	r3, r3, #4
 8005bcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bce:	4b5e      	ldr	r3, [pc, #376]	@ (8005d48 <HAL_RCC_OscConfig+0x4ac>)
 8005bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bd2:	4a5d      	ldr	r2, [pc, #372]	@ (8005d48 <HAL_RCC_OscConfig+0x4ac>)
 8005bd4:	f043 0301 	orr.w	r3, r3, #1
 8005bd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bda:	e00b      	b.n	8005bf4 <HAL_RCC_OscConfig+0x358>
 8005bdc:	4b5a      	ldr	r3, [pc, #360]	@ (8005d48 <HAL_RCC_OscConfig+0x4ac>)
 8005bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005be0:	4a59      	ldr	r2, [pc, #356]	@ (8005d48 <HAL_RCC_OscConfig+0x4ac>)
 8005be2:	f023 0301 	bic.w	r3, r3, #1
 8005be6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005be8:	4b57      	ldr	r3, [pc, #348]	@ (8005d48 <HAL_RCC_OscConfig+0x4ac>)
 8005bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bec:	4a56      	ldr	r2, [pc, #344]	@ (8005d48 <HAL_RCC_OscConfig+0x4ac>)
 8005bee:	f023 0304 	bic.w	r3, r3, #4
 8005bf2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d015      	beq.n	8005c28 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bfc:	f7fd fff2 	bl	8003be4 <HAL_GetTick>
 8005c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c02:	e00a      	b.n	8005c1a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c04:	f7fd ffee 	bl	8003be4 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e0d7      	b.n	8005dca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c1a:	4b4b      	ldr	r3, [pc, #300]	@ (8005d48 <HAL_RCC_OscConfig+0x4ac>)
 8005c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d0ee      	beq.n	8005c04 <HAL_RCC_OscConfig+0x368>
 8005c26:	e014      	b.n	8005c52 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c28:	f7fd ffdc 	bl	8003be4 <HAL_GetTick>
 8005c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c2e:	e00a      	b.n	8005c46 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c30:	f7fd ffd8 	bl	8003be4 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e0c1      	b.n	8005dca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c46:	4b40      	ldr	r3, [pc, #256]	@ (8005d48 <HAL_RCC_OscConfig+0x4ac>)
 8005c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1ee      	bne.n	8005c30 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c52:	7dfb      	ldrb	r3, [r7, #23]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d105      	bne.n	8005c64 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c58:	4b3b      	ldr	r3, [pc, #236]	@ (8005d48 <HAL_RCC_OscConfig+0x4ac>)
 8005c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5c:	4a3a      	ldr	r2, [pc, #232]	@ (8005d48 <HAL_RCC_OscConfig+0x4ac>)
 8005c5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c62:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 80ad 	beq.w	8005dc8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c6e:	4b36      	ldr	r3, [pc, #216]	@ (8005d48 <HAL_RCC_OscConfig+0x4ac>)
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f003 030c 	and.w	r3, r3, #12
 8005c76:	2b08      	cmp	r3, #8
 8005c78:	d060      	beq.n	8005d3c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d145      	bne.n	8005d0e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c82:	4b33      	ldr	r3, [pc, #204]	@ (8005d50 <HAL_RCC_OscConfig+0x4b4>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c88:	f7fd ffac 	bl	8003be4 <HAL_GetTick>
 8005c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c8e:	e008      	b.n	8005ca2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c90:	f7fd ffa8 	bl	8003be4 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d901      	bls.n	8005ca2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e093      	b.n	8005dca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ca2:	4b29      	ldr	r3, [pc, #164]	@ (8005d48 <HAL_RCC_OscConfig+0x4ac>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1f0      	bne.n	8005c90 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	69da      	ldr	r2, [r3, #28]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cbc:	019b      	lsls	r3, r3, #6
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc4:	085b      	lsrs	r3, r3, #1
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	041b      	lsls	r3, r3, #16
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd0:	061b      	lsls	r3, r3, #24
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cd8:	071b      	lsls	r3, r3, #28
 8005cda:	491b      	ldr	r1, [pc, #108]	@ (8005d48 <HAL_RCC_OscConfig+0x4ac>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8005d50 <HAL_RCC_OscConfig+0x4b4>)
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce6:	f7fd ff7d 	bl	8003be4 <HAL_GetTick>
 8005cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cec:	e008      	b.n	8005d00 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cee:	f7fd ff79 	bl	8003be4 <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d901      	bls.n	8005d00 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e064      	b.n	8005dca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d00:	4b11      	ldr	r3, [pc, #68]	@ (8005d48 <HAL_RCC_OscConfig+0x4ac>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0f0      	beq.n	8005cee <HAL_RCC_OscConfig+0x452>
 8005d0c:	e05c      	b.n	8005dc8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d0e:	4b10      	ldr	r3, [pc, #64]	@ (8005d50 <HAL_RCC_OscConfig+0x4b4>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d14:	f7fd ff66 	bl	8003be4 <HAL_GetTick>
 8005d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d1a:	e008      	b.n	8005d2e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d1c:	f7fd ff62 	bl	8003be4 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d901      	bls.n	8005d2e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e04d      	b.n	8005dca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d2e:	4b06      	ldr	r3, [pc, #24]	@ (8005d48 <HAL_RCC_OscConfig+0x4ac>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1f0      	bne.n	8005d1c <HAL_RCC_OscConfig+0x480>
 8005d3a:	e045      	b.n	8005dc8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d107      	bne.n	8005d54 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e040      	b.n	8005dca <HAL_RCC_OscConfig+0x52e>
 8005d48:	40023800 	.word	0x40023800
 8005d4c:	40007000 	.word	0x40007000
 8005d50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d54:	4b1f      	ldr	r3, [pc, #124]	@ (8005dd4 <HAL_RCC_OscConfig+0x538>)
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d030      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d129      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d122      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005d84:	4013      	ands	r3, r2
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005d8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d119      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d9a:	085b      	lsrs	r3, r3, #1
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d10f      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d107      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dbe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d001      	beq.n	8005dc8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e000      	b.n	8005dca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3718      	adds	r7, #24
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	40023800 	.word	0x40023800

08005dd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e07b      	b.n	8005ee2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d108      	bne.n	8005e04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dfa:	d009      	beq.n	8005e10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	61da      	str	r2, [r3, #28]
 8005e02:	e005      	b.n	8005e10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d106      	bne.n	8005e30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f7fd fa76 	bl	800331c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2202      	movs	r2, #2
 8005e34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005e58:	431a      	orrs	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e62:	431a      	orrs	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	f003 0302 	and.w	r3, r3, #2
 8005e6c:	431a      	orrs	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	431a      	orrs	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e80:	431a      	orrs	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	69db      	ldr	r3, [r3, #28]
 8005e86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e8a:	431a      	orrs	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a1b      	ldr	r3, [r3, #32]
 8005e90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e94:	ea42 0103 	orr.w	r1, r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e9c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	0c1b      	lsrs	r3, r3, #16
 8005eae:	f003 0104 	and.w	r1, r3, #4
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb6:	f003 0210 	and.w	r2, r3, #16
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69da      	ldr	r2, [r3, #28]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ed0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b088      	sub	sp, #32
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	60f8      	str	r0, [r7, #12]
 8005ef2:	60b9      	str	r1, [r7, #8]
 8005ef4:	603b      	str	r3, [r7, #0]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005efa:	2300      	movs	r3, #0
 8005efc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d101      	bne.n	8005f0c <HAL_SPI_Transmit+0x22>
 8005f08:	2302      	movs	r3, #2
 8005f0a:	e12d      	b.n	8006168 <HAL_SPI_Transmit+0x27e>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f14:	f7fd fe66 	bl	8003be4 <HAL_GetTick>
 8005f18:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005f1a:	88fb      	ldrh	r3, [r7, #6]
 8005f1c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d002      	beq.n	8005f30 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f2e:	e116      	b.n	800615e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <HAL_SPI_Transmit+0x52>
 8005f36:	88fb      	ldrh	r3, [r7, #6]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d102      	bne.n	8005f42 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f40:	e10d      	b.n	800615e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2203      	movs	r2, #3
 8005f46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	88fa      	ldrh	r2, [r7, #6]
 8005f5a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	88fa      	ldrh	r2, [r7, #6]
 8005f60:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f88:	d10f      	bne.n	8005faa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fa8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fb4:	2b40      	cmp	r3, #64	@ 0x40
 8005fb6:	d007      	beq.n	8005fc8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fd0:	d14f      	bne.n	8006072 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d002      	beq.n	8005fe0 <HAL_SPI_Transmit+0xf6>
 8005fda:	8afb      	ldrh	r3, [r7, #22]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d142      	bne.n	8006066 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe4:	881a      	ldrh	r2, [r3, #0]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff0:	1c9a      	adds	r2, r3, #2
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006004:	e02f      	b.n	8006066 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	2b02      	cmp	r3, #2
 8006012:	d112      	bne.n	800603a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006018:	881a      	ldrh	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006024:	1c9a      	adds	r2, r3, #2
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800602e:	b29b      	uxth	r3, r3
 8006030:	3b01      	subs	r3, #1
 8006032:	b29a      	uxth	r2, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006038:	e015      	b.n	8006066 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800603a:	f7fd fdd3 	bl	8003be4 <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	429a      	cmp	r2, r3
 8006048:	d803      	bhi.n	8006052 <HAL_SPI_Transmit+0x168>
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006050:	d102      	bne.n	8006058 <HAL_SPI_Transmit+0x16e>
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d106      	bne.n	8006066 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006064:	e07b      	b.n	800615e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800606a:	b29b      	uxth	r3, r3
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1ca      	bne.n	8006006 <HAL_SPI_Transmit+0x11c>
 8006070:	e050      	b.n	8006114 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d002      	beq.n	8006080 <HAL_SPI_Transmit+0x196>
 800607a:	8afb      	ldrh	r3, [r7, #22]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d144      	bne.n	800610a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	330c      	adds	r3, #12
 800608a:	7812      	ldrb	r2, [r2, #0]
 800608c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800609c:	b29b      	uxth	r3, r3
 800609e:	3b01      	subs	r3, #1
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80060a6:	e030      	b.n	800610a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d113      	bne.n	80060de <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	330c      	adds	r3, #12
 80060c0:	7812      	ldrb	r2, [r2, #0]
 80060c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	3b01      	subs	r3, #1
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	86da      	strh	r2, [r3, #54]	@ 0x36
 80060dc:	e015      	b.n	800610a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060de:	f7fd fd81 	bl	8003be4 <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d803      	bhi.n	80060f6 <HAL_SPI_Transmit+0x20c>
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f4:	d102      	bne.n	80060fc <HAL_SPI_Transmit+0x212>
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d106      	bne.n	800610a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006108:	e029      	b.n	800615e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800610e:	b29b      	uxth	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1c9      	bne.n	80060a8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	6839      	ldr	r1, [r7, #0]
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 fbdf 	bl	80068dc <SPI_EndRxTxTransaction>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d002      	beq.n	800612a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2220      	movs	r2, #32
 8006128:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d10a      	bne.n	8006148 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006132:	2300      	movs	r3, #0
 8006134:	613b      	str	r3, [r7, #16]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	613b      	str	r3, [r7, #16]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	613b      	str	r3, [r7, #16]
 8006146:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800614c:	2b00      	cmp	r3, #0
 800614e:	d002      	beq.n	8006156 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	77fb      	strb	r3, [r7, #31]
 8006154:	e003      	b.n	800615e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006166:	7ffb      	ldrb	r3, [r7, #31]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3720      	adds	r7, #32
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b088      	sub	sp, #32
 8006174:	af02      	add	r7, sp, #8
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	603b      	str	r3, [r7, #0]
 800617c:	4613      	mov	r3, r2
 800617e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006180:	2300      	movs	r3, #0
 8006182:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b01      	cmp	r3, #1
 800618e:	d002      	beq.n	8006196 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006190:	2302      	movs	r3, #2
 8006192:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006194:	e0fb      	b.n	800638e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800619e:	d112      	bne.n	80061c6 <HAL_SPI_Receive+0x56>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10e      	bne.n	80061c6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2204      	movs	r2, #4
 80061ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80061b0:	88fa      	ldrh	r2, [r7, #6]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	4613      	mov	r3, r2
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	68b9      	ldr	r1, [r7, #8]
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 f8ef 	bl	80063a0 <HAL_SPI_TransmitReceive>
 80061c2:	4603      	mov	r3, r0
 80061c4:	e0e8      	b.n	8006398 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d101      	bne.n	80061d4 <HAL_SPI_Receive+0x64>
 80061d0:	2302      	movs	r3, #2
 80061d2:	e0e1      	b.n	8006398 <HAL_SPI_Receive+0x228>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061dc:	f7fd fd02 	bl	8003be4 <HAL_GetTick>
 80061e0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d002      	beq.n	80061ee <HAL_SPI_Receive+0x7e>
 80061e8:	88fb      	ldrh	r3, [r7, #6]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d102      	bne.n	80061f4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061f2:	e0cc      	b.n	800638e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2204      	movs	r2, #4
 80061f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	88fa      	ldrh	r2, [r7, #6]
 800620c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	88fa      	ldrh	r2, [r7, #6]
 8006212:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800623a:	d10f      	bne.n	800625c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800624a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800625a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006266:	2b40      	cmp	r3, #64	@ 0x40
 8006268:	d007      	beq.n	800627a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006278:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d16a      	bne.n	8006358 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006282:	e032      	b.n	80062ea <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	2b01      	cmp	r3, #1
 8006290:	d115      	bne.n	80062be <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f103 020c 	add.w	r2, r3, #12
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800629e:	7812      	ldrb	r2, [r2, #0]
 80062a0:	b2d2      	uxtb	r2, r2
 80062a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a8:	1c5a      	adds	r2, r3, #1
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	3b01      	subs	r3, #1
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80062bc:	e015      	b.n	80062ea <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062be:	f7fd fc91 	bl	8003be4 <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	683a      	ldr	r2, [r7, #0]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d803      	bhi.n	80062d6 <HAL_SPI_Receive+0x166>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d4:	d102      	bne.n	80062dc <HAL_SPI_Receive+0x16c>
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d106      	bne.n	80062ea <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80062e8:	e051      	b.n	800638e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1c7      	bne.n	8006284 <HAL_SPI_Receive+0x114>
 80062f4:	e035      	b.n	8006362 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	2b01      	cmp	r3, #1
 8006302:	d113      	bne.n	800632c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68da      	ldr	r2, [r3, #12]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800630e:	b292      	uxth	r2, r2
 8006310:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006316:	1c9a      	adds	r2, r3, #2
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006320:	b29b      	uxth	r3, r3
 8006322:	3b01      	subs	r3, #1
 8006324:	b29a      	uxth	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800632a:	e015      	b.n	8006358 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800632c:	f7fd fc5a 	bl	8003be4 <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	429a      	cmp	r2, r3
 800633a:	d803      	bhi.n	8006344 <HAL_SPI_Receive+0x1d4>
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006342:	d102      	bne.n	800634a <HAL_SPI_Receive+0x1da>
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d106      	bne.n	8006358 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006356:	e01a      	b.n	800638e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800635c:	b29b      	uxth	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1c9      	bne.n	80062f6 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	6839      	ldr	r1, [r7, #0]
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f000 fa52 	bl	8006810 <SPI_EndRxTransaction>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d002      	beq.n	8006378 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2220      	movs	r2, #32
 8006376:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800637c:	2b00      	cmp	r3, #0
 800637e:	d002      	beq.n	8006386 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	75fb      	strb	r3, [r7, #23]
 8006384:	e003      	b.n	800638e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006396:	7dfb      	ldrb	r3, [r7, #23]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3718      	adds	r7, #24
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b08c      	sub	sp, #48	@ 0x30
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
 80063ac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80063ae:	2301      	movs	r3, #1
 80063b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d101      	bne.n	80063c6 <HAL_SPI_TransmitReceive+0x26>
 80063c2:	2302      	movs	r3, #2
 80063c4:	e198      	b.n	80066f8 <HAL_SPI_TransmitReceive+0x358>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063ce:	f7fd fc09 	bl	8003be4 <HAL_GetTick>
 80063d2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80063e4:	887b      	ldrh	r3, [r7, #2]
 80063e6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80063e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d00f      	beq.n	8006410 <HAL_SPI_TransmitReceive+0x70>
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063f6:	d107      	bne.n	8006408 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d103      	bne.n	8006408 <HAL_SPI_TransmitReceive+0x68>
 8006400:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006404:	2b04      	cmp	r3, #4
 8006406:	d003      	beq.n	8006410 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006408:	2302      	movs	r3, #2
 800640a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800640e:	e16d      	b.n	80066ec <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d005      	beq.n	8006422 <HAL_SPI_TransmitReceive+0x82>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d002      	beq.n	8006422 <HAL_SPI_TransmitReceive+0x82>
 800641c:	887b      	ldrh	r3, [r7, #2]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d103      	bne.n	800642a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006428:	e160      	b.n	80066ec <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b04      	cmp	r3, #4
 8006434:	d003      	beq.n	800643e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2205      	movs	r2, #5
 800643a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	887a      	ldrh	r2, [r7, #2]
 800644e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	887a      	ldrh	r2, [r7, #2]
 8006454:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	887a      	ldrh	r2, [r7, #2]
 8006460:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	887a      	ldrh	r2, [r7, #2]
 8006466:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800647e:	2b40      	cmp	r3, #64	@ 0x40
 8006480:	d007      	beq.n	8006492 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006490:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800649a:	d17c      	bne.n	8006596 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d002      	beq.n	80064aa <HAL_SPI_TransmitReceive+0x10a>
 80064a4:	8b7b      	ldrh	r3, [r7, #26]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d16a      	bne.n	8006580 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ae:	881a      	ldrh	r2, [r3, #0]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ba:	1c9a      	adds	r2, r3, #2
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	3b01      	subs	r3, #1
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064ce:	e057      	b.n	8006580 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d11b      	bne.n	8006516 <HAL_SPI_TransmitReceive+0x176>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d016      	beq.n	8006516 <HAL_SPI_TransmitReceive+0x176>
 80064e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d113      	bne.n	8006516 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064f2:	881a      	ldrh	r2, [r3, #0]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064fe:	1c9a      	adds	r2, r3, #2
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006508:	b29b      	uxth	r3, r3
 800650a:	3b01      	subs	r3, #1
 800650c:	b29a      	uxth	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006512:	2300      	movs	r3, #0
 8006514:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	2b01      	cmp	r3, #1
 8006522:	d119      	bne.n	8006558 <HAL_SPI_TransmitReceive+0x1b8>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006528:	b29b      	uxth	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d014      	beq.n	8006558 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68da      	ldr	r2, [r3, #12]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006538:	b292      	uxth	r2, r2
 800653a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006540:	1c9a      	adds	r2, r3, #2
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800654a:	b29b      	uxth	r3, r3
 800654c:	3b01      	subs	r3, #1
 800654e:	b29a      	uxth	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006554:	2301      	movs	r3, #1
 8006556:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006558:	f7fd fb44 	bl	8003be4 <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006564:	429a      	cmp	r2, r3
 8006566:	d80b      	bhi.n	8006580 <HAL_SPI_TransmitReceive+0x1e0>
 8006568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800656a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656e:	d007      	beq.n	8006580 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2201      	movs	r2, #1
 800657a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800657e:	e0b5      	b.n	80066ec <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006584:	b29b      	uxth	r3, r3
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1a2      	bne.n	80064d0 <HAL_SPI_TransmitReceive+0x130>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800658e:	b29b      	uxth	r3, r3
 8006590:	2b00      	cmp	r3, #0
 8006592:	d19d      	bne.n	80064d0 <HAL_SPI_TransmitReceive+0x130>
 8006594:	e080      	b.n	8006698 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d002      	beq.n	80065a4 <HAL_SPI_TransmitReceive+0x204>
 800659e:	8b7b      	ldrh	r3, [r7, #26]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d16f      	bne.n	8006684 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	330c      	adds	r3, #12
 80065ae:	7812      	ldrb	r2, [r2, #0]
 80065b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b6:	1c5a      	adds	r2, r3, #1
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	3b01      	subs	r3, #1
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065ca:	e05b      	b.n	8006684 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d11c      	bne.n	8006614 <HAL_SPI_TransmitReceive+0x274>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065de:	b29b      	uxth	r3, r3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d017      	beq.n	8006614 <HAL_SPI_TransmitReceive+0x274>
 80065e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d114      	bne.n	8006614 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	330c      	adds	r3, #12
 80065f4:	7812      	ldrb	r2, [r2, #0]
 80065f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065fc:	1c5a      	adds	r2, r3, #1
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006606:	b29b      	uxth	r3, r3
 8006608:	3b01      	subs	r3, #1
 800660a:	b29a      	uxth	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006610:	2300      	movs	r3, #0
 8006612:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	2b01      	cmp	r3, #1
 8006620:	d119      	bne.n	8006656 <HAL_SPI_TransmitReceive+0x2b6>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006626:	b29b      	uxth	r3, r3
 8006628:	2b00      	cmp	r3, #0
 800662a:	d014      	beq.n	8006656 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68da      	ldr	r2, [r3, #12]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006636:	b2d2      	uxtb	r2, r2
 8006638:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800663e:	1c5a      	adds	r2, r3, #1
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006648:	b29b      	uxth	r3, r3
 800664a:	3b01      	subs	r3, #1
 800664c:	b29a      	uxth	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006652:	2301      	movs	r3, #1
 8006654:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006656:	f7fd fac5 	bl	8003be4 <HAL_GetTick>
 800665a:	4602      	mov	r2, r0
 800665c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006662:	429a      	cmp	r2, r3
 8006664:	d803      	bhi.n	800666e <HAL_SPI_TransmitReceive+0x2ce>
 8006666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666c:	d102      	bne.n	8006674 <HAL_SPI_TransmitReceive+0x2d4>
 800666e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006670:	2b00      	cmp	r3, #0
 8006672:	d107      	bne.n	8006684 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006682:	e033      	b.n	80066ec <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006688:	b29b      	uxth	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d19e      	bne.n	80065cc <HAL_SPI_TransmitReceive+0x22c>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006692:	b29b      	uxth	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	d199      	bne.n	80065cc <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006698:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800669a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f000 f91d 	bl	80068dc <SPI_EndRxTxTransaction>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d006      	beq.n	80066b6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2220      	movs	r2, #32
 80066b2:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80066b4:	e01a      	b.n	80066ec <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10a      	bne.n	80066d4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066be:	2300      	movs	r3, #0
 80066c0:	617b      	str	r3, [r7, #20]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	617b      	str	r3, [r7, #20]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	617b      	str	r3, [r7, #20]
 80066d2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d003      	beq.n	80066e4 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066e2:	e003      	b.n	80066ec <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80066f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3730      	adds	r7, #48	@ 0x30
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b088      	sub	sp, #32
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	603b      	str	r3, [r7, #0]
 800670c:	4613      	mov	r3, r2
 800670e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006710:	f7fd fa68 	bl	8003be4 <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006718:	1a9b      	subs	r3, r3, r2
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	4413      	add	r3, r2
 800671e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006720:	f7fd fa60 	bl	8003be4 <HAL_GetTick>
 8006724:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006726:	4b39      	ldr	r3, [pc, #228]	@ (800680c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	015b      	lsls	r3, r3, #5
 800672c:	0d1b      	lsrs	r3, r3, #20
 800672e:	69fa      	ldr	r2, [r7, #28]
 8006730:	fb02 f303 	mul.w	r3, r2, r3
 8006734:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006736:	e054      	b.n	80067e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800673e:	d050      	beq.n	80067e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006740:	f7fd fa50 	bl	8003be4 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	69fa      	ldr	r2, [r7, #28]
 800674c:	429a      	cmp	r2, r3
 800674e:	d902      	bls.n	8006756 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d13d      	bne.n	80067d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006764:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800676e:	d111      	bne.n	8006794 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006778:	d004      	beq.n	8006784 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006782:	d107      	bne.n	8006794 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006792:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006798:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800679c:	d10f      	bne.n	80067be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80067ac:	601a      	str	r2, [r3, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80067bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e017      	b.n	8006802 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d101      	bne.n	80067dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80067d8:	2300      	movs	r3, #0
 80067da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	3b01      	subs	r3, #1
 80067e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	689a      	ldr	r2, [r3, #8]
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	4013      	ands	r3, r2
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	bf0c      	ite	eq
 80067f2:	2301      	moveq	r3, #1
 80067f4:	2300      	movne	r3, #0
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	461a      	mov	r2, r3
 80067fa:	79fb      	ldrb	r3, [r7, #7]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d19b      	bne.n	8006738 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3720      	adds	r7, #32
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	20000100 	.word	0x20000100

08006810 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af02      	add	r7, sp, #8
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006824:	d111      	bne.n	800684a <SPI_EndRxTransaction+0x3a>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800682e:	d004      	beq.n	800683a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006838:	d107      	bne.n	800684a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006848:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006852:	d12a      	bne.n	80068aa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800685c:	d012      	beq.n	8006884 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	9300      	str	r3, [sp, #0]
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	2200      	movs	r2, #0
 8006866:	2180      	movs	r1, #128	@ 0x80
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f7ff ff49 	bl	8006700 <SPI_WaitFlagStateUntilTimeout>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d02d      	beq.n	80068d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006878:	f043 0220 	orr.w	r2, r3, #32
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e026      	b.n	80068d2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	2200      	movs	r2, #0
 800688c:	2101      	movs	r1, #1
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f7ff ff36 	bl	8006700 <SPI_WaitFlagStateUntilTimeout>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d01a      	beq.n	80068d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800689e:	f043 0220 	orr.w	r2, r3, #32
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e013      	b.n	80068d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2200      	movs	r2, #0
 80068b2:	2101      	movs	r1, #1
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f7ff ff23 	bl	8006700 <SPI_WaitFlagStateUntilTimeout>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d007      	beq.n	80068d0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068c4:	f043 0220 	orr.w	r2, r3, #32
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e000      	b.n	80068d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
	...

080068dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b088      	sub	sp, #32
 80068e0:	af02      	add	r7, sp, #8
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	9300      	str	r3, [sp, #0]
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2201      	movs	r2, #1
 80068f0:	2102      	movs	r1, #2
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f7ff ff04 	bl	8006700 <SPI_WaitFlagStateUntilTimeout>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d007      	beq.n	800690e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006902:	f043 0220 	orr.w	r2, r3, #32
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e032      	b.n	8006974 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800690e:	4b1b      	ldr	r3, [pc, #108]	@ (800697c <SPI_EndRxTxTransaction+0xa0>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a1b      	ldr	r2, [pc, #108]	@ (8006980 <SPI_EndRxTxTransaction+0xa4>)
 8006914:	fba2 2303 	umull	r2, r3, r2, r3
 8006918:	0d5b      	lsrs	r3, r3, #21
 800691a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800691e:	fb02 f303 	mul.w	r3, r2, r3
 8006922:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800692c:	d112      	bne.n	8006954 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	9300      	str	r3, [sp, #0]
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	2200      	movs	r2, #0
 8006936:	2180      	movs	r1, #128	@ 0x80
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f7ff fee1 	bl	8006700 <SPI_WaitFlagStateUntilTimeout>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d016      	beq.n	8006972 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006948:	f043 0220 	orr.w	r2, r3, #32
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e00f      	b.n	8006974 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00a      	beq.n	8006970 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	3b01      	subs	r3, #1
 800695e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800696a:	2b80      	cmp	r3, #128	@ 0x80
 800696c:	d0f2      	beq.n	8006954 <SPI_EndRxTxTransaction+0x78>
 800696e:	e000      	b.n	8006972 <SPI_EndRxTxTransaction+0x96>
        break;
 8006970:	bf00      	nop
  }

  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3718      	adds	r7, #24
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	20000100 	.word	0x20000100
 8006980:	165e9f81 	.word	0x165e9f81

08006984 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e041      	b.n	8006a1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d106      	bne.n	80069b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7fc fcfe 	bl	80033ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2202      	movs	r2, #2
 80069b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	3304      	adds	r3, #4
 80069c0:	4619      	mov	r1, r3
 80069c2:	4610      	mov	r0, r2
 80069c4:	f000 f9b6 	bl	8006d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
	...

08006a24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d001      	beq.n	8006a3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e04e      	b.n	8006ada <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2202      	movs	r2, #2
 8006a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68da      	ldr	r2, [r3, #12]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f042 0201 	orr.w	r2, r2, #1
 8006a52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a23      	ldr	r2, [pc, #140]	@ (8006ae8 <HAL_TIM_Base_Start_IT+0xc4>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d022      	beq.n	8006aa4 <HAL_TIM_Base_Start_IT+0x80>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a66:	d01d      	beq.n	8006aa4 <HAL_TIM_Base_Start_IT+0x80>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a1f      	ldr	r2, [pc, #124]	@ (8006aec <HAL_TIM_Base_Start_IT+0xc8>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d018      	beq.n	8006aa4 <HAL_TIM_Base_Start_IT+0x80>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a1e      	ldr	r2, [pc, #120]	@ (8006af0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d013      	beq.n	8006aa4 <HAL_TIM_Base_Start_IT+0x80>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a1c      	ldr	r2, [pc, #112]	@ (8006af4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d00e      	beq.n	8006aa4 <HAL_TIM_Base_Start_IT+0x80>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a1b      	ldr	r2, [pc, #108]	@ (8006af8 <HAL_TIM_Base_Start_IT+0xd4>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d009      	beq.n	8006aa4 <HAL_TIM_Base_Start_IT+0x80>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a19      	ldr	r2, [pc, #100]	@ (8006afc <HAL_TIM_Base_Start_IT+0xd8>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d004      	beq.n	8006aa4 <HAL_TIM_Base_Start_IT+0x80>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a18      	ldr	r2, [pc, #96]	@ (8006b00 <HAL_TIM_Base_Start_IT+0xdc>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d111      	bne.n	8006ac8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f003 0307 	and.w	r3, r3, #7
 8006aae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2b06      	cmp	r3, #6
 8006ab4:	d010      	beq.n	8006ad8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f042 0201 	orr.w	r2, r2, #1
 8006ac4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ac6:	e007      	b.n	8006ad8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f042 0201 	orr.w	r2, r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	40010000 	.word	0x40010000
 8006aec:	40000400 	.word	0x40000400
 8006af0:	40000800 	.word	0x40000800
 8006af4:	40000c00 	.word	0x40000c00
 8006af8:	40010400 	.word	0x40010400
 8006afc:	40014000 	.word	0x40014000
 8006b00:	40001800 	.word	0x40001800

08006b04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	f003 0302 	and.w	r3, r3, #2
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d020      	beq.n	8006b68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f003 0302 	and.w	r3, r3, #2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d01b      	beq.n	8006b68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f06f 0202 	mvn.w	r2, #2
 8006b38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	f003 0303 	and.w	r3, r3, #3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d003      	beq.n	8006b56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f8d2 	bl	8006cf8 <HAL_TIM_IC_CaptureCallback>
 8006b54:	e005      	b.n	8006b62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f8c4 	bl	8006ce4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 f8d5 	bl	8006d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f003 0304 	and.w	r3, r3, #4
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d020      	beq.n	8006bb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f003 0304 	and.w	r3, r3, #4
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d01b      	beq.n	8006bb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f06f 0204 	mvn.w	r2, #4
 8006b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2202      	movs	r2, #2
 8006b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d003      	beq.n	8006ba2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f8ac 	bl	8006cf8 <HAL_TIM_IC_CaptureCallback>
 8006ba0:	e005      	b.n	8006bae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f89e 	bl	8006ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f8af 	bl	8006d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	f003 0308 	and.w	r3, r3, #8
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d020      	beq.n	8006c00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f003 0308 	and.w	r3, r3, #8
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d01b      	beq.n	8006c00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f06f 0208 	mvn.w	r2, #8
 8006bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2204      	movs	r2, #4
 8006bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	f003 0303 	and.w	r3, r3, #3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d003      	beq.n	8006bee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f886 	bl	8006cf8 <HAL_TIM_IC_CaptureCallback>
 8006bec:	e005      	b.n	8006bfa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f878 	bl	8006ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f889 	bl	8006d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	f003 0310 	and.w	r3, r3, #16
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d020      	beq.n	8006c4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f003 0310 	and.w	r3, r3, #16
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d01b      	beq.n	8006c4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f06f 0210 	mvn.w	r2, #16
 8006c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2208      	movs	r2, #8
 8006c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f860 	bl	8006cf8 <HAL_TIM_IC_CaptureCallback>
 8006c38:	e005      	b.n	8006c46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f852 	bl	8006ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 f863 	bl	8006d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00c      	beq.n	8006c70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d007      	beq.n	8006c70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f06f 0201 	mvn.w	r2, #1
 8006c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7fb feb4 	bl	80029d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00c      	beq.n	8006c94 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d007      	beq.n	8006c94 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f982 	bl	8006f98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00c      	beq.n	8006cb8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d007      	beq.n	8006cb8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f834 	bl	8006d20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	f003 0320 	and.w	r3, r3, #32
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00c      	beq.n	8006cdc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f003 0320 	and.w	r3, r3, #32
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d007      	beq.n	8006cdc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f06f 0220 	mvn.w	r2, #32
 8006cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f954 	bl	8006f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cdc:	bf00      	nop
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a46      	ldr	r2, [pc, #280]	@ (8006e60 <TIM_Base_SetConfig+0x12c>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d013      	beq.n	8006d74 <TIM_Base_SetConfig+0x40>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d52:	d00f      	beq.n	8006d74 <TIM_Base_SetConfig+0x40>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a43      	ldr	r2, [pc, #268]	@ (8006e64 <TIM_Base_SetConfig+0x130>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d00b      	beq.n	8006d74 <TIM_Base_SetConfig+0x40>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a42      	ldr	r2, [pc, #264]	@ (8006e68 <TIM_Base_SetConfig+0x134>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d007      	beq.n	8006d74 <TIM_Base_SetConfig+0x40>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a41      	ldr	r2, [pc, #260]	@ (8006e6c <TIM_Base_SetConfig+0x138>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d003      	beq.n	8006d74 <TIM_Base_SetConfig+0x40>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a40      	ldr	r2, [pc, #256]	@ (8006e70 <TIM_Base_SetConfig+0x13c>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d108      	bne.n	8006d86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a35      	ldr	r2, [pc, #212]	@ (8006e60 <TIM_Base_SetConfig+0x12c>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d02b      	beq.n	8006de6 <TIM_Base_SetConfig+0xb2>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d94:	d027      	beq.n	8006de6 <TIM_Base_SetConfig+0xb2>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a32      	ldr	r2, [pc, #200]	@ (8006e64 <TIM_Base_SetConfig+0x130>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d023      	beq.n	8006de6 <TIM_Base_SetConfig+0xb2>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a31      	ldr	r2, [pc, #196]	@ (8006e68 <TIM_Base_SetConfig+0x134>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d01f      	beq.n	8006de6 <TIM_Base_SetConfig+0xb2>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a30      	ldr	r2, [pc, #192]	@ (8006e6c <TIM_Base_SetConfig+0x138>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d01b      	beq.n	8006de6 <TIM_Base_SetConfig+0xb2>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a2f      	ldr	r2, [pc, #188]	@ (8006e70 <TIM_Base_SetConfig+0x13c>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d017      	beq.n	8006de6 <TIM_Base_SetConfig+0xb2>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a2e      	ldr	r2, [pc, #184]	@ (8006e74 <TIM_Base_SetConfig+0x140>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d013      	beq.n	8006de6 <TIM_Base_SetConfig+0xb2>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a2d      	ldr	r2, [pc, #180]	@ (8006e78 <TIM_Base_SetConfig+0x144>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d00f      	beq.n	8006de6 <TIM_Base_SetConfig+0xb2>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a2c      	ldr	r2, [pc, #176]	@ (8006e7c <TIM_Base_SetConfig+0x148>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d00b      	beq.n	8006de6 <TIM_Base_SetConfig+0xb2>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a2b      	ldr	r2, [pc, #172]	@ (8006e80 <TIM_Base_SetConfig+0x14c>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d007      	beq.n	8006de6 <TIM_Base_SetConfig+0xb2>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a2a      	ldr	r2, [pc, #168]	@ (8006e84 <TIM_Base_SetConfig+0x150>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d003      	beq.n	8006de6 <TIM_Base_SetConfig+0xb2>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a29      	ldr	r2, [pc, #164]	@ (8006e88 <TIM_Base_SetConfig+0x154>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d108      	bne.n	8006df8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	689a      	ldr	r2, [r3, #8]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a10      	ldr	r2, [pc, #64]	@ (8006e60 <TIM_Base_SetConfig+0x12c>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d003      	beq.n	8006e2c <TIM_Base_SetConfig+0xf8>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a12      	ldr	r2, [pc, #72]	@ (8006e70 <TIM_Base_SetConfig+0x13c>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d103      	bne.n	8006e34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	691a      	ldr	r2, [r3, #16]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	f003 0301 	and.w	r3, r3, #1
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d105      	bne.n	8006e52 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	f023 0201 	bic.w	r2, r3, #1
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	611a      	str	r2, [r3, #16]
  }
}
 8006e52:	bf00      	nop
 8006e54:	3714      	adds	r7, #20
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	40010000 	.word	0x40010000
 8006e64:	40000400 	.word	0x40000400
 8006e68:	40000800 	.word	0x40000800
 8006e6c:	40000c00 	.word	0x40000c00
 8006e70:	40010400 	.word	0x40010400
 8006e74:	40014000 	.word	0x40014000
 8006e78:	40014400 	.word	0x40014400
 8006e7c:	40014800 	.word	0x40014800
 8006e80:	40001800 	.word	0x40001800
 8006e84:	40001c00 	.word	0x40001c00
 8006e88:	40002000 	.word	0x40002000

08006e8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d101      	bne.n	8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	e05a      	b.n	8006f5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2202      	movs	r2, #2
 8006eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a21      	ldr	r2, [pc, #132]	@ (8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d022      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ef0:	d01d      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a1d      	ldr	r2, [pc, #116]	@ (8006f6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d018      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a1b      	ldr	r2, [pc, #108]	@ (8006f70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d013      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a1a      	ldr	r2, [pc, #104]	@ (8006f74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d00e      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a18      	ldr	r2, [pc, #96]	@ (8006f78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d009      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a17      	ldr	r2, [pc, #92]	@ (8006f7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d004      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a15      	ldr	r2, [pc, #84]	@ (8006f80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d10c      	bne.n	8006f48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68ba      	ldr	r2, [r7, #8]
 8006f46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	40010000 	.word	0x40010000
 8006f6c:	40000400 	.word	0x40000400
 8006f70:	40000800 	.word	0x40000800
 8006f74:	40000c00 	.word	0x40000c00
 8006f78:	40010400 	.word	0x40010400
 8006f7c:	40014000 	.word	0x40014000
 8006f80:	40001800 	.word	0x40001800

08006f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d101      	bne.n	8006fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e042      	b.n	8007044 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d106      	bne.n	8006fd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7fc fa28 	bl	8003428 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2224      	movs	r2, #36	@ 0x24
 8006fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68da      	ldr	r2, [r3, #12]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006fee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 fa07 	bl	8007404 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	691a      	ldr	r2, [r3, #16]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007004:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	695a      	ldr	r2, [r3, #20]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007014:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68da      	ldr	r2, [r3, #12]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007024:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2220      	movs	r2, #32
 8007030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2220      	movs	r2, #32
 8007038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3708      	adds	r7, #8
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b08a      	sub	sp, #40	@ 0x28
 8007050:	af02      	add	r7, sp, #8
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	603b      	str	r3, [r7, #0]
 8007058:	4613      	mov	r3, r2
 800705a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800705c:	2300      	movs	r3, #0
 800705e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2b20      	cmp	r3, #32
 800706a:	d175      	bne.n	8007158 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d002      	beq.n	8007078 <HAL_UART_Transmit+0x2c>
 8007072:	88fb      	ldrh	r3, [r7, #6]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d101      	bne.n	800707c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e06e      	b.n	800715a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2221      	movs	r2, #33	@ 0x21
 8007086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800708a:	f7fc fdab 	bl	8003be4 <HAL_GetTick>
 800708e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	88fa      	ldrh	r2, [r7, #6]
 8007094:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	88fa      	ldrh	r2, [r7, #6]
 800709a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070a4:	d108      	bne.n	80070b8 <HAL_UART_Transmit+0x6c>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d104      	bne.n	80070b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80070ae:	2300      	movs	r3, #0
 80070b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	61bb      	str	r3, [r7, #24]
 80070b6:	e003      	b.n	80070c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070bc:	2300      	movs	r3, #0
 80070be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80070c0:	e02e      	b.n	8007120 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	9300      	str	r3, [sp, #0]
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	2200      	movs	r2, #0
 80070ca:	2180      	movs	r1, #128	@ 0x80
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f000 f8a3 	bl	8007218 <UART_WaitOnFlagUntilTimeout>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d005      	beq.n	80070e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2220      	movs	r2, #32
 80070dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e03a      	b.n	800715a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d10b      	bne.n	8007102 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	461a      	mov	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	3302      	adds	r3, #2
 80070fe:	61bb      	str	r3, [r7, #24]
 8007100:	e007      	b.n	8007112 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	781a      	ldrb	r2, [r3, #0]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	3301      	adds	r3, #1
 8007110:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007116:	b29b      	uxth	r3, r3
 8007118:	3b01      	subs	r3, #1
 800711a:	b29a      	uxth	r2, r3
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007124:	b29b      	uxth	r3, r3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1cb      	bne.n	80070c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	2200      	movs	r2, #0
 8007132:	2140      	movs	r1, #64	@ 0x40
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f000 f86f 	bl	8007218 <UART_WaitOnFlagUntilTimeout>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d005      	beq.n	800714c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2220      	movs	r2, #32
 8007144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e006      	b.n	800715a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2220      	movs	r2, #32
 8007150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007154:	2300      	movs	r3, #0
 8007156:	e000      	b.n	800715a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007158:	2302      	movs	r3, #2
  }
}
 800715a:	4618      	mov	r0, r3
 800715c:	3720      	adds	r7, #32
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007162:	b480      	push	{r7}
 8007164:	b085      	sub	sp, #20
 8007166:	af00      	add	r7, sp, #0
 8007168:	60f8      	str	r0, [r7, #12]
 800716a:	60b9      	str	r1, [r7, #8]
 800716c:	4613      	mov	r3, r2
 800716e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2b20      	cmp	r3, #32
 800717a:	d121      	bne.n	80071c0 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d002      	beq.n	8007188 <HAL_UART_Transmit_IT+0x26>
 8007182:	88fb      	ldrh	r3, [r7, #6]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e01a      	b.n	80071c2 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	88fa      	ldrh	r2, [r7, #6]
 8007196:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	88fa      	ldrh	r2, [r7, #6]
 800719c:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2221      	movs	r2, #33	@ 0x21
 80071a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68da      	ldr	r2, [r3, #12]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80071ba:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80071bc:	2300      	movs	r3, #0
 80071be:	e000      	b.n	80071c2 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80071c0:	2302      	movs	r3, #2
  }
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b084      	sub	sp, #16
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	60f8      	str	r0, [r7, #12]
 80071d6:	60b9      	str	r1, [r7, #8]
 80071d8:	4613      	mov	r3, r2
 80071da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b20      	cmp	r3, #32
 80071e6:	d112      	bne.n	800720e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d002      	beq.n	80071f4 <HAL_UART_Receive_IT+0x26>
 80071ee:	88fb      	ldrh	r3, [r7, #6]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d101      	bne.n	80071f8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e00b      	b.n	8007210 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80071fe:	88fb      	ldrh	r3, [r7, #6]
 8007200:	461a      	mov	r2, r3
 8007202:	68b9      	ldr	r1, [r7, #8]
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 f860 	bl	80072ca <UART_Start_Receive_IT>
 800720a:	4603      	mov	r3, r0
 800720c:	e000      	b.n	8007210 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800720e:	2302      	movs	r3, #2
  }
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b086      	sub	sp, #24
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	603b      	str	r3, [r7, #0]
 8007224:	4613      	mov	r3, r2
 8007226:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007228:	e03b      	b.n	80072a2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800722a:	6a3b      	ldr	r3, [r7, #32]
 800722c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007230:	d037      	beq.n	80072a2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007232:	f7fc fcd7 	bl	8003be4 <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	6a3a      	ldr	r2, [r7, #32]
 800723e:	429a      	cmp	r2, r3
 8007240:	d302      	bcc.n	8007248 <UART_WaitOnFlagUntilTimeout+0x30>
 8007242:	6a3b      	ldr	r3, [r7, #32]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d101      	bne.n	800724c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007248:	2303      	movs	r3, #3
 800724a:	e03a      	b.n	80072c2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	f003 0304 	and.w	r3, r3, #4
 8007256:	2b00      	cmp	r3, #0
 8007258:	d023      	beq.n	80072a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2b80      	cmp	r3, #128	@ 0x80
 800725e:	d020      	beq.n	80072a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	2b40      	cmp	r3, #64	@ 0x40
 8007264:	d01d      	beq.n	80072a2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 0308 	and.w	r3, r3, #8
 8007270:	2b08      	cmp	r3, #8
 8007272:	d116      	bne.n	80072a2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007274:	2300      	movs	r3, #0
 8007276:	617b      	str	r3, [r7, #20]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	617b      	str	r3, [r7, #20]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	617b      	str	r3, [r7, #20]
 8007288:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f000 f857 	bl	800733e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2208      	movs	r2, #8
 8007294:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e00f      	b.n	80072c2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	4013      	ands	r3, r2
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	bf0c      	ite	eq
 80072b2:	2301      	moveq	r3, #1
 80072b4:	2300      	movne	r3, #0
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	461a      	mov	r2, r3
 80072ba:	79fb      	ldrb	r3, [r7, #7]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d0b4      	beq.n	800722a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3718      	adds	r7, #24
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b085      	sub	sp, #20
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	60f8      	str	r0, [r7, #12]
 80072d2:	60b9      	str	r1, [r7, #8]
 80072d4:	4613      	mov	r3, r2
 80072d6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	88fa      	ldrh	r2, [r7, #6]
 80072e2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	88fa      	ldrh	r2, [r7, #6]
 80072e8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2222      	movs	r2, #34	@ 0x22
 80072f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d007      	beq.n	8007310 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68da      	ldr	r2, [r3, #12]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800730e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	695a      	ldr	r2, [r3, #20]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f042 0201 	orr.w	r2, r2, #1
 800731e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68da      	ldr	r2, [r3, #12]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f042 0220 	orr.w	r2, r2, #32
 800732e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3714      	adds	r7, #20
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr

0800733e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800733e:	b480      	push	{r7}
 8007340:	b095      	sub	sp, #84	@ 0x54
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	330c      	adds	r3, #12
 800734c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007350:	e853 3f00 	ldrex	r3, [r3]
 8007354:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007358:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800735c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	330c      	adds	r3, #12
 8007364:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007366:	643a      	str	r2, [r7, #64]	@ 0x40
 8007368:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800736c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800736e:	e841 2300 	strex	r3, r2, [r1]
 8007372:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1e5      	bne.n	8007346 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	3314      	adds	r3, #20
 8007380:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007382:	6a3b      	ldr	r3, [r7, #32]
 8007384:	e853 3f00 	ldrex	r3, [r3]
 8007388:	61fb      	str	r3, [r7, #28]
   return(result);
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	f023 0301 	bic.w	r3, r3, #1
 8007390:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	3314      	adds	r3, #20
 8007398:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800739a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800739c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073a2:	e841 2300 	strex	r3, r2, [r1]
 80073a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1e5      	bne.n	800737a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d119      	bne.n	80073ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	330c      	adds	r3, #12
 80073bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	e853 3f00 	ldrex	r3, [r3]
 80073c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	f023 0310 	bic.w	r3, r3, #16
 80073cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	330c      	adds	r3, #12
 80073d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073d6:	61ba      	str	r2, [r7, #24]
 80073d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073da:	6979      	ldr	r1, [r7, #20]
 80073dc:	69ba      	ldr	r2, [r7, #24]
 80073de:	e841 2300 	strex	r3, r2, [r1]
 80073e2:	613b      	str	r3, [r7, #16]
   return(result);
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1e5      	bne.n	80073b6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2220      	movs	r2, #32
 80073ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80073f8:	bf00      	nop
 80073fa:	3754      	adds	r7, #84	@ 0x54
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007408:	b0c0      	sub	sp, #256	@ 0x100
 800740a:	af00      	add	r7, sp, #0
 800740c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800741c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007420:	68d9      	ldr	r1, [r3, #12]
 8007422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	ea40 0301 	orr.w	r3, r0, r1
 800742c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800742e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007432:	689a      	ldr	r2, [r3, #8]
 8007434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	431a      	orrs	r2, r3
 800743c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	431a      	orrs	r2, r3
 8007444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007448:	69db      	ldr	r3, [r3, #28]
 800744a:	4313      	orrs	r3, r2
 800744c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800745c:	f021 010c 	bic.w	r1, r1, #12
 8007460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800746a:	430b      	orrs	r3, r1
 800746c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800746e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800747a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800747e:	6999      	ldr	r1, [r3, #24]
 8007480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	ea40 0301 	orr.w	r3, r0, r1
 800748a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800748c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	4b8f      	ldr	r3, [pc, #572]	@ (80076d0 <UART_SetConfig+0x2cc>)
 8007494:	429a      	cmp	r2, r3
 8007496:	d005      	beq.n	80074a4 <UART_SetConfig+0xa0>
 8007498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	4b8d      	ldr	r3, [pc, #564]	@ (80076d4 <UART_SetConfig+0x2d0>)
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d104      	bne.n	80074ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80074a4:	f7fe f83c 	bl	8005520 <HAL_RCC_GetPCLK2Freq>
 80074a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80074ac:	e003      	b.n	80074b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80074ae:	f7fe f823 	bl	80054f8 <HAL_RCC_GetPCLK1Freq>
 80074b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ba:	69db      	ldr	r3, [r3, #28]
 80074bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074c0:	f040 810c 	bne.w	80076dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80074c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074c8:	2200      	movs	r2, #0
 80074ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80074ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80074d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80074d6:	4622      	mov	r2, r4
 80074d8:	462b      	mov	r3, r5
 80074da:	1891      	adds	r1, r2, r2
 80074dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80074de:	415b      	adcs	r3, r3
 80074e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80074e6:	4621      	mov	r1, r4
 80074e8:	eb12 0801 	adds.w	r8, r2, r1
 80074ec:	4629      	mov	r1, r5
 80074ee:	eb43 0901 	adc.w	r9, r3, r1
 80074f2:	f04f 0200 	mov.w	r2, #0
 80074f6:	f04f 0300 	mov.w	r3, #0
 80074fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007502:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007506:	4690      	mov	r8, r2
 8007508:	4699      	mov	r9, r3
 800750a:	4623      	mov	r3, r4
 800750c:	eb18 0303 	adds.w	r3, r8, r3
 8007510:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007514:	462b      	mov	r3, r5
 8007516:	eb49 0303 	adc.w	r3, r9, r3
 800751a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800751e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800752a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800752e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007532:	460b      	mov	r3, r1
 8007534:	18db      	adds	r3, r3, r3
 8007536:	653b      	str	r3, [r7, #80]	@ 0x50
 8007538:	4613      	mov	r3, r2
 800753a:	eb42 0303 	adc.w	r3, r2, r3
 800753e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007540:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007544:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007548:	f7f9 fb96 	bl	8000c78 <__aeabi_uldivmod>
 800754c:	4602      	mov	r2, r0
 800754e:	460b      	mov	r3, r1
 8007550:	4b61      	ldr	r3, [pc, #388]	@ (80076d8 <UART_SetConfig+0x2d4>)
 8007552:	fba3 2302 	umull	r2, r3, r3, r2
 8007556:	095b      	lsrs	r3, r3, #5
 8007558:	011c      	lsls	r4, r3, #4
 800755a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800755e:	2200      	movs	r2, #0
 8007560:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007564:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007568:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800756c:	4642      	mov	r2, r8
 800756e:	464b      	mov	r3, r9
 8007570:	1891      	adds	r1, r2, r2
 8007572:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007574:	415b      	adcs	r3, r3
 8007576:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007578:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800757c:	4641      	mov	r1, r8
 800757e:	eb12 0a01 	adds.w	sl, r2, r1
 8007582:	4649      	mov	r1, r9
 8007584:	eb43 0b01 	adc.w	fp, r3, r1
 8007588:	f04f 0200 	mov.w	r2, #0
 800758c:	f04f 0300 	mov.w	r3, #0
 8007590:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007594:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007598:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800759c:	4692      	mov	sl, r2
 800759e:	469b      	mov	fp, r3
 80075a0:	4643      	mov	r3, r8
 80075a2:	eb1a 0303 	adds.w	r3, sl, r3
 80075a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80075aa:	464b      	mov	r3, r9
 80075ac:	eb4b 0303 	adc.w	r3, fp, r3
 80075b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80075b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80075c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80075c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80075c8:	460b      	mov	r3, r1
 80075ca:	18db      	adds	r3, r3, r3
 80075cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80075ce:	4613      	mov	r3, r2
 80075d0:	eb42 0303 	adc.w	r3, r2, r3
 80075d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80075d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80075da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80075de:	f7f9 fb4b 	bl	8000c78 <__aeabi_uldivmod>
 80075e2:	4602      	mov	r2, r0
 80075e4:	460b      	mov	r3, r1
 80075e6:	4611      	mov	r1, r2
 80075e8:	4b3b      	ldr	r3, [pc, #236]	@ (80076d8 <UART_SetConfig+0x2d4>)
 80075ea:	fba3 2301 	umull	r2, r3, r3, r1
 80075ee:	095b      	lsrs	r3, r3, #5
 80075f0:	2264      	movs	r2, #100	@ 0x64
 80075f2:	fb02 f303 	mul.w	r3, r2, r3
 80075f6:	1acb      	subs	r3, r1, r3
 80075f8:	00db      	lsls	r3, r3, #3
 80075fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80075fe:	4b36      	ldr	r3, [pc, #216]	@ (80076d8 <UART_SetConfig+0x2d4>)
 8007600:	fba3 2302 	umull	r2, r3, r3, r2
 8007604:	095b      	lsrs	r3, r3, #5
 8007606:	005b      	lsls	r3, r3, #1
 8007608:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800760c:	441c      	add	r4, r3
 800760e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007612:	2200      	movs	r2, #0
 8007614:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007618:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800761c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007620:	4642      	mov	r2, r8
 8007622:	464b      	mov	r3, r9
 8007624:	1891      	adds	r1, r2, r2
 8007626:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007628:	415b      	adcs	r3, r3
 800762a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800762c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007630:	4641      	mov	r1, r8
 8007632:	1851      	adds	r1, r2, r1
 8007634:	6339      	str	r1, [r7, #48]	@ 0x30
 8007636:	4649      	mov	r1, r9
 8007638:	414b      	adcs	r3, r1
 800763a:	637b      	str	r3, [r7, #52]	@ 0x34
 800763c:	f04f 0200 	mov.w	r2, #0
 8007640:	f04f 0300 	mov.w	r3, #0
 8007644:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007648:	4659      	mov	r1, fp
 800764a:	00cb      	lsls	r3, r1, #3
 800764c:	4651      	mov	r1, sl
 800764e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007652:	4651      	mov	r1, sl
 8007654:	00ca      	lsls	r2, r1, #3
 8007656:	4610      	mov	r0, r2
 8007658:	4619      	mov	r1, r3
 800765a:	4603      	mov	r3, r0
 800765c:	4642      	mov	r2, r8
 800765e:	189b      	adds	r3, r3, r2
 8007660:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007664:	464b      	mov	r3, r9
 8007666:	460a      	mov	r2, r1
 8007668:	eb42 0303 	adc.w	r3, r2, r3
 800766c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800767c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007680:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007684:	460b      	mov	r3, r1
 8007686:	18db      	adds	r3, r3, r3
 8007688:	62bb      	str	r3, [r7, #40]	@ 0x28
 800768a:	4613      	mov	r3, r2
 800768c:	eb42 0303 	adc.w	r3, r2, r3
 8007690:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007692:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007696:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800769a:	f7f9 faed 	bl	8000c78 <__aeabi_uldivmod>
 800769e:	4602      	mov	r2, r0
 80076a0:	460b      	mov	r3, r1
 80076a2:	4b0d      	ldr	r3, [pc, #52]	@ (80076d8 <UART_SetConfig+0x2d4>)
 80076a4:	fba3 1302 	umull	r1, r3, r3, r2
 80076a8:	095b      	lsrs	r3, r3, #5
 80076aa:	2164      	movs	r1, #100	@ 0x64
 80076ac:	fb01 f303 	mul.w	r3, r1, r3
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	00db      	lsls	r3, r3, #3
 80076b4:	3332      	adds	r3, #50	@ 0x32
 80076b6:	4a08      	ldr	r2, [pc, #32]	@ (80076d8 <UART_SetConfig+0x2d4>)
 80076b8:	fba2 2303 	umull	r2, r3, r2, r3
 80076bc:	095b      	lsrs	r3, r3, #5
 80076be:	f003 0207 	and.w	r2, r3, #7
 80076c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4422      	add	r2, r4
 80076ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80076cc:	e106      	b.n	80078dc <UART_SetConfig+0x4d8>
 80076ce:	bf00      	nop
 80076d0:	40011000 	.word	0x40011000
 80076d4:	40011400 	.word	0x40011400
 80076d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076e0:	2200      	movs	r2, #0
 80076e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80076e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80076ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80076ee:	4642      	mov	r2, r8
 80076f0:	464b      	mov	r3, r9
 80076f2:	1891      	adds	r1, r2, r2
 80076f4:	6239      	str	r1, [r7, #32]
 80076f6:	415b      	adcs	r3, r3
 80076f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80076fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80076fe:	4641      	mov	r1, r8
 8007700:	1854      	adds	r4, r2, r1
 8007702:	4649      	mov	r1, r9
 8007704:	eb43 0501 	adc.w	r5, r3, r1
 8007708:	f04f 0200 	mov.w	r2, #0
 800770c:	f04f 0300 	mov.w	r3, #0
 8007710:	00eb      	lsls	r3, r5, #3
 8007712:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007716:	00e2      	lsls	r2, r4, #3
 8007718:	4614      	mov	r4, r2
 800771a:	461d      	mov	r5, r3
 800771c:	4643      	mov	r3, r8
 800771e:	18e3      	adds	r3, r4, r3
 8007720:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007724:	464b      	mov	r3, r9
 8007726:	eb45 0303 	adc.w	r3, r5, r3
 800772a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800772e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800773a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800773e:	f04f 0200 	mov.w	r2, #0
 8007742:	f04f 0300 	mov.w	r3, #0
 8007746:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800774a:	4629      	mov	r1, r5
 800774c:	008b      	lsls	r3, r1, #2
 800774e:	4621      	mov	r1, r4
 8007750:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007754:	4621      	mov	r1, r4
 8007756:	008a      	lsls	r2, r1, #2
 8007758:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800775c:	f7f9 fa8c 	bl	8000c78 <__aeabi_uldivmod>
 8007760:	4602      	mov	r2, r0
 8007762:	460b      	mov	r3, r1
 8007764:	4b60      	ldr	r3, [pc, #384]	@ (80078e8 <UART_SetConfig+0x4e4>)
 8007766:	fba3 2302 	umull	r2, r3, r3, r2
 800776a:	095b      	lsrs	r3, r3, #5
 800776c:	011c      	lsls	r4, r3, #4
 800776e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007772:	2200      	movs	r2, #0
 8007774:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007778:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800777c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007780:	4642      	mov	r2, r8
 8007782:	464b      	mov	r3, r9
 8007784:	1891      	adds	r1, r2, r2
 8007786:	61b9      	str	r1, [r7, #24]
 8007788:	415b      	adcs	r3, r3
 800778a:	61fb      	str	r3, [r7, #28]
 800778c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007790:	4641      	mov	r1, r8
 8007792:	1851      	adds	r1, r2, r1
 8007794:	6139      	str	r1, [r7, #16]
 8007796:	4649      	mov	r1, r9
 8007798:	414b      	adcs	r3, r1
 800779a:	617b      	str	r3, [r7, #20]
 800779c:	f04f 0200 	mov.w	r2, #0
 80077a0:	f04f 0300 	mov.w	r3, #0
 80077a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80077a8:	4659      	mov	r1, fp
 80077aa:	00cb      	lsls	r3, r1, #3
 80077ac:	4651      	mov	r1, sl
 80077ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077b2:	4651      	mov	r1, sl
 80077b4:	00ca      	lsls	r2, r1, #3
 80077b6:	4610      	mov	r0, r2
 80077b8:	4619      	mov	r1, r3
 80077ba:	4603      	mov	r3, r0
 80077bc:	4642      	mov	r2, r8
 80077be:	189b      	adds	r3, r3, r2
 80077c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80077c4:	464b      	mov	r3, r9
 80077c6:	460a      	mov	r2, r1
 80077c8:	eb42 0303 	adc.w	r3, r2, r3
 80077cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80077d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80077da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80077dc:	f04f 0200 	mov.w	r2, #0
 80077e0:	f04f 0300 	mov.w	r3, #0
 80077e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80077e8:	4649      	mov	r1, r9
 80077ea:	008b      	lsls	r3, r1, #2
 80077ec:	4641      	mov	r1, r8
 80077ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077f2:	4641      	mov	r1, r8
 80077f4:	008a      	lsls	r2, r1, #2
 80077f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80077fa:	f7f9 fa3d 	bl	8000c78 <__aeabi_uldivmod>
 80077fe:	4602      	mov	r2, r0
 8007800:	460b      	mov	r3, r1
 8007802:	4611      	mov	r1, r2
 8007804:	4b38      	ldr	r3, [pc, #224]	@ (80078e8 <UART_SetConfig+0x4e4>)
 8007806:	fba3 2301 	umull	r2, r3, r3, r1
 800780a:	095b      	lsrs	r3, r3, #5
 800780c:	2264      	movs	r2, #100	@ 0x64
 800780e:	fb02 f303 	mul.w	r3, r2, r3
 8007812:	1acb      	subs	r3, r1, r3
 8007814:	011b      	lsls	r3, r3, #4
 8007816:	3332      	adds	r3, #50	@ 0x32
 8007818:	4a33      	ldr	r2, [pc, #204]	@ (80078e8 <UART_SetConfig+0x4e4>)
 800781a:	fba2 2303 	umull	r2, r3, r2, r3
 800781e:	095b      	lsrs	r3, r3, #5
 8007820:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007824:	441c      	add	r4, r3
 8007826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800782a:	2200      	movs	r2, #0
 800782c:	673b      	str	r3, [r7, #112]	@ 0x70
 800782e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007830:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007834:	4642      	mov	r2, r8
 8007836:	464b      	mov	r3, r9
 8007838:	1891      	adds	r1, r2, r2
 800783a:	60b9      	str	r1, [r7, #8]
 800783c:	415b      	adcs	r3, r3
 800783e:	60fb      	str	r3, [r7, #12]
 8007840:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007844:	4641      	mov	r1, r8
 8007846:	1851      	adds	r1, r2, r1
 8007848:	6039      	str	r1, [r7, #0]
 800784a:	4649      	mov	r1, r9
 800784c:	414b      	adcs	r3, r1
 800784e:	607b      	str	r3, [r7, #4]
 8007850:	f04f 0200 	mov.w	r2, #0
 8007854:	f04f 0300 	mov.w	r3, #0
 8007858:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800785c:	4659      	mov	r1, fp
 800785e:	00cb      	lsls	r3, r1, #3
 8007860:	4651      	mov	r1, sl
 8007862:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007866:	4651      	mov	r1, sl
 8007868:	00ca      	lsls	r2, r1, #3
 800786a:	4610      	mov	r0, r2
 800786c:	4619      	mov	r1, r3
 800786e:	4603      	mov	r3, r0
 8007870:	4642      	mov	r2, r8
 8007872:	189b      	adds	r3, r3, r2
 8007874:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007876:	464b      	mov	r3, r9
 8007878:	460a      	mov	r2, r1
 800787a:	eb42 0303 	adc.w	r3, r2, r3
 800787e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	663b      	str	r3, [r7, #96]	@ 0x60
 800788a:	667a      	str	r2, [r7, #100]	@ 0x64
 800788c:	f04f 0200 	mov.w	r2, #0
 8007890:	f04f 0300 	mov.w	r3, #0
 8007894:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007898:	4649      	mov	r1, r9
 800789a:	008b      	lsls	r3, r1, #2
 800789c:	4641      	mov	r1, r8
 800789e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078a2:	4641      	mov	r1, r8
 80078a4:	008a      	lsls	r2, r1, #2
 80078a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80078aa:	f7f9 f9e5 	bl	8000c78 <__aeabi_uldivmod>
 80078ae:	4602      	mov	r2, r0
 80078b0:	460b      	mov	r3, r1
 80078b2:	4b0d      	ldr	r3, [pc, #52]	@ (80078e8 <UART_SetConfig+0x4e4>)
 80078b4:	fba3 1302 	umull	r1, r3, r3, r2
 80078b8:	095b      	lsrs	r3, r3, #5
 80078ba:	2164      	movs	r1, #100	@ 0x64
 80078bc:	fb01 f303 	mul.w	r3, r1, r3
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	011b      	lsls	r3, r3, #4
 80078c4:	3332      	adds	r3, #50	@ 0x32
 80078c6:	4a08      	ldr	r2, [pc, #32]	@ (80078e8 <UART_SetConfig+0x4e4>)
 80078c8:	fba2 2303 	umull	r2, r3, r2, r3
 80078cc:	095b      	lsrs	r3, r3, #5
 80078ce:	f003 020f 	and.w	r2, r3, #15
 80078d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4422      	add	r2, r4
 80078da:	609a      	str	r2, [r3, #8]
}
 80078dc:	bf00      	nop
 80078de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80078e2:	46bd      	mov	sp, r7
 80078e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078e8:	51eb851f 	.word	0x51eb851f

080078ec <std>:
 80078ec:	2300      	movs	r3, #0
 80078ee:	b510      	push	{r4, lr}
 80078f0:	4604      	mov	r4, r0
 80078f2:	e9c0 3300 	strd	r3, r3, [r0]
 80078f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078fa:	6083      	str	r3, [r0, #8]
 80078fc:	8181      	strh	r1, [r0, #12]
 80078fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8007900:	81c2      	strh	r2, [r0, #14]
 8007902:	6183      	str	r3, [r0, #24]
 8007904:	4619      	mov	r1, r3
 8007906:	2208      	movs	r2, #8
 8007908:	305c      	adds	r0, #92	@ 0x5c
 800790a:	f000 f9fb 	bl	8007d04 <memset>
 800790e:	4b0d      	ldr	r3, [pc, #52]	@ (8007944 <std+0x58>)
 8007910:	6263      	str	r3, [r4, #36]	@ 0x24
 8007912:	4b0d      	ldr	r3, [pc, #52]	@ (8007948 <std+0x5c>)
 8007914:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007916:	4b0d      	ldr	r3, [pc, #52]	@ (800794c <std+0x60>)
 8007918:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800791a:	4b0d      	ldr	r3, [pc, #52]	@ (8007950 <std+0x64>)
 800791c:	6323      	str	r3, [r4, #48]	@ 0x30
 800791e:	4b0d      	ldr	r3, [pc, #52]	@ (8007954 <std+0x68>)
 8007920:	6224      	str	r4, [r4, #32]
 8007922:	429c      	cmp	r4, r3
 8007924:	d006      	beq.n	8007934 <std+0x48>
 8007926:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800792a:	4294      	cmp	r4, r2
 800792c:	d002      	beq.n	8007934 <std+0x48>
 800792e:	33d0      	adds	r3, #208	@ 0xd0
 8007930:	429c      	cmp	r4, r3
 8007932:	d105      	bne.n	8007940 <std+0x54>
 8007934:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800793c:	f000 ba5a 	b.w	8007df4 <__retarget_lock_init_recursive>
 8007940:	bd10      	pop	{r4, pc}
 8007942:	bf00      	nop
 8007944:	08007c0d 	.word	0x08007c0d
 8007948:	08007c2f 	.word	0x08007c2f
 800794c:	08007c67 	.word	0x08007c67
 8007950:	08007c8b 	.word	0x08007c8b
 8007954:	200006a4 	.word	0x200006a4

08007958 <stdio_exit_handler>:
 8007958:	4a02      	ldr	r2, [pc, #8]	@ (8007964 <stdio_exit_handler+0xc>)
 800795a:	4903      	ldr	r1, [pc, #12]	@ (8007968 <stdio_exit_handler+0x10>)
 800795c:	4803      	ldr	r0, [pc, #12]	@ (800796c <stdio_exit_handler+0x14>)
 800795e:	f000 b869 	b.w	8007a34 <_fwalk_sglue>
 8007962:	bf00      	nop
 8007964:	2000010c 	.word	0x2000010c
 8007968:	08008971 	.word	0x08008971
 800796c:	2000011c 	.word	0x2000011c

08007970 <cleanup_stdio>:
 8007970:	6841      	ldr	r1, [r0, #4]
 8007972:	4b0c      	ldr	r3, [pc, #48]	@ (80079a4 <cleanup_stdio+0x34>)
 8007974:	4299      	cmp	r1, r3
 8007976:	b510      	push	{r4, lr}
 8007978:	4604      	mov	r4, r0
 800797a:	d001      	beq.n	8007980 <cleanup_stdio+0x10>
 800797c:	f000 fff8 	bl	8008970 <_fflush_r>
 8007980:	68a1      	ldr	r1, [r4, #8]
 8007982:	4b09      	ldr	r3, [pc, #36]	@ (80079a8 <cleanup_stdio+0x38>)
 8007984:	4299      	cmp	r1, r3
 8007986:	d002      	beq.n	800798e <cleanup_stdio+0x1e>
 8007988:	4620      	mov	r0, r4
 800798a:	f000 fff1 	bl	8008970 <_fflush_r>
 800798e:	68e1      	ldr	r1, [r4, #12]
 8007990:	4b06      	ldr	r3, [pc, #24]	@ (80079ac <cleanup_stdio+0x3c>)
 8007992:	4299      	cmp	r1, r3
 8007994:	d004      	beq.n	80079a0 <cleanup_stdio+0x30>
 8007996:	4620      	mov	r0, r4
 8007998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800799c:	f000 bfe8 	b.w	8008970 <_fflush_r>
 80079a0:	bd10      	pop	{r4, pc}
 80079a2:	bf00      	nop
 80079a4:	200006a4 	.word	0x200006a4
 80079a8:	2000070c 	.word	0x2000070c
 80079ac:	20000774 	.word	0x20000774

080079b0 <global_stdio_init.part.0>:
 80079b0:	b510      	push	{r4, lr}
 80079b2:	4b0b      	ldr	r3, [pc, #44]	@ (80079e0 <global_stdio_init.part.0+0x30>)
 80079b4:	4c0b      	ldr	r4, [pc, #44]	@ (80079e4 <global_stdio_init.part.0+0x34>)
 80079b6:	4a0c      	ldr	r2, [pc, #48]	@ (80079e8 <global_stdio_init.part.0+0x38>)
 80079b8:	601a      	str	r2, [r3, #0]
 80079ba:	4620      	mov	r0, r4
 80079bc:	2200      	movs	r2, #0
 80079be:	2104      	movs	r1, #4
 80079c0:	f7ff ff94 	bl	80078ec <std>
 80079c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80079c8:	2201      	movs	r2, #1
 80079ca:	2109      	movs	r1, #9
 80079cc:	f7ff ff8e 	bl	80078ec <std>
 80079d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80079d4:	2202      	movs	r2, #2
 80079d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079da:	2112      	movs	r1, #18
 80079dc:	f7ff bf86 	b.w	80078ec <std>
 80079e0:	200007dc 	.word	0x200007dc
 80079e4:	200006a4 	.word	0x200006a4
 80079e8:	08007959 	.word	0x08007959

080079ec <__sfp_lock_acquire>:
 80079ec:	4801      	ldr	r0, [pc, #4]	@ (80079f4 <__sfp_lock_acquire+0x8>)
 80079ee:	f000 ba02 	b.w	8007df6 <__retarget_lock_acquire_recursive>
 80079f2:	bf00      	nop
 80079f4:	200007e5 	.word	0x200007e5

080079f8 <__sfp_lock_release>:
 80079f8:	4801      	ldr	r0, [pc, #4]	@ (8007a00 <__sfp_lock_release+0x8>)
 80079fa:	f000 b9fd 	b.w	8007df8 <__retarget_lock_release_recursive>
 80079fe:	bf00      	nop
 8007a00:	200007e5 	.word	0x200007e5

08007a04 <__sinit>:
 8007a04:	b510      	push	{r4, lr}
 8007a06:	4604      	mov	r4, r0
 8007a08:	f7ff fff0 	bl	80079ec <__sfp_lock_acquire>
 8007a0c:	6a23      	ldr	r3, [r4, #32]
 8007a0e:	b11b      	cbz	r3, 8007a18 <__sinit+0x14>
 8007a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a14:	f7ff bff0 	b.w	80079f8 <__sfp_lock_release>
 8007a18:	4b04      	ldr	r3, [pc, #16]	@ (8007a2c <__sinit+0x28>)
 8007a1a:	6223      	str	r3, [r4, #32]
 8007a1c:	4b04      	ldr	r3, [pc, #16]	@ (8007a30 <__sinit+0x2c>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1f5      	bne.n	8007a10 <__sinit+0xc>
 8007a24:	f7ff ffc4 	bl	80079b0 <global_stdio_init.part.0>
 8007a28:	e7f2      	b.n	8007a10 <__sinit+0xc>
 8007a2a:	bf00      	nop
 8007a2c:	08007971 	.word	0x08007971
 8007a30:	200007dc 	.word	0x200007dc

08007a34 <_fwalk_sglue>:
 8007a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a38:	4607      	mov	r7, r0
 8007a3a:	4688      	mov	r8, r1
 8007a3c:	4614      	mov	r4, r2
 8007a3e:	2600      	movs	r6, #0
 8007a40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a44:	f1b9 0901 	subs.w	r9, r9, #1
 8007a48:	d505      	bpl.n	8007a56 <_fwalk_sglue+0x22>
 8007a4a:	6824      	ldr	r4, [r4, #0]
 8007a4c:	2c00      	cmp	r4, #0
 8007a4e:	d1f7      	bne.n	8007a40 <_fwalk_sglue+0xc>
 8007a50:	4630      	mov	r0, r6
 8007a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a56:	89ab      	ldrh	r3, [r5, #12]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d907      	bls.n	8007a6c <_fwalk_sglue+0x38>
 8007a5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a60:	3301      	adds	r3, #1
 8007a62:	d003      	beq.n	8007a6c <_fwalk_sglue+0x38>
 8007a64:	4629      	mov	r1, r5
 8007a66:	4638      	mov	r0, r7
 8007a68:	47c0      	blx	r8
 8007a6a:	4306      	orrs	r6, r0
 8007a6c:	3568      	adds	r5, #104	@ 0x68
 8007a6e:	e7e9      	b.n	8007a44 <_fwalk_sglue+0x10>

08007a70 <iprintf>:
 8007a70:	b40f      	push	{r0, r1, r2, r3}
 8007a72:	b507      	push	{r0, r1, r2, lr}
 8007a74:	4906      	ldr	r1, [pc, #24]	@ (8007a90 <iprintf+0x20>)
 8007a76:	ab04      	add	r3, sp, #16
 8007a78:	6808      	ldr	r0, [r1, #0]
 8007a7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a7e:	6881      	ldr	r1, [r0, #8]
 8007a80:	9301      	str	r3, [sp, #4]
 8007a82:	f000 fc4b 	bl	800831c <_vfiprintf_r>
 8007a86:	b003      	add	sp, #12
 8007a88:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a8c:	b004      	add	sp, #16
 8007a8e:	4770      	bx	lr
 8007a90:	20000118 	.word	0x20000118

08007a94 <setbuf>:
 8007a94:	fab1 f281 	clz	r2, r1
 8007a98:	0952      	lsrs	r2, r2, #5
 8007a9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a9e:	0052      	lsls	r2, r2, #1
 8007aa0:	f000 b800 	b.w	8007aa4 <setvbuf>

08007aa4 <setvbuf>:
 8007aa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007aa8:	461d      	mov	r5, r3
 8007aaa:	4b57      	ldr	r3, [pc, #348]	@ (8007c08 <setvbuf+0x164>)
 8007aac:	681f      	ldr	r7, [r3, #0]
 8007aae:	4604      	mov	r4, r0
 8007ab0:	460e      	mov	r6, r1
 8007ab2:	4690      	mov	r8, r2
 8007ab4:	b127      	cbz	r7, 8007ac0 <setvbuf+0x1c>
 8007ab6:	6a3b      	ldr	r3, [r7, #32]
 8007ab8:	b913      	cbnz	r3, 8007ac0 <setvbuf+0x1c>
 8007aba:	4638      	mov	r0, r7
 8007abc:	f7ff ffa2 	bl	8007a04 <__sinit>
 8007ac0:	f1b8 0f02 	cmp.w	r8, #2
 8007ac4:	d006      	beq.n	8007ad4 <setvbuf+0x30>
 8007ac6:	f1b8 0f01 	cmp.w	r8, #1
 8007aca:	f200 809a 	bhi.w	8007c02 <setvbuf+0x15e>
 8007ace:	2d00      	cmp	r5, #0
 8007ad0:	f2c0 8097 	blt.w	8007c02 <setvbuf+0x15e>
 8007ad4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ad6:	07d9      	lsls	r1, r3, #31
 8007ad8:	d405      	bmi.n	8007ae6 <setvbuf+0x42>
 8007ada:	89a3      	ldrh	r3, [r4, #12]
 8007adc:	059a      	lsls	r2, r3, #22
 8007ade:	d402      	bmi.n	8007ae6 <setvbuf+0x42>
 8007ae0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ae2:	f000 f988 	bl	8007df6 <__retarget_lock_acquire_recursive>
 8007ae6:	4621      	mov	r1, r4
 8007ae8:	4638      	mov	r0, r7
 8007aea:	f000 ff41 	bl	8008970 <_fflush_r>
 8007aee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007af0:	b141      	cbz	r1, 8007b04 <setvbuf+0x60>
 8007af2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007af6:	4299      	cmp	r1, r3
 8007af8:	d002      	beq.n	8007b00 <setvbuf+0x5c>
 8007afa:	4638      	mov	r0, r7
 8007afc:	f000 f98c 	bl	8007e18 <_free_r>
 8007b00:	2300      	movs	r3, #0
 8007b02:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b04:	2300      	movs	r3, #0
 8007b06:	61a3      	str	r3, [r4, #24]
 8007b08:	6063      	str	r3, [r4, #4]
 8007b0a:	89a3      	ldrh	r3, [r4, #12]
 8007b0c:	061b      	lsls	r3, r3, #24
 8007b0e:	d503      	bpl.n	8007b18 <setvbuf+0x74>
 8007b10:	6921      	ldr	r1, [r4, #16]
 8007b12:	4638      	mov	r0, r7
 8007b14:	f000 f980 	bl	8007e18 <_free_r>
 8007b18:	89a3      	ldrh	r3, [r4, #12]
 8007b1a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8007b1e:	f023 0303 	bic.w	r3, r3, #3
 8007b22:	f1b8 0f02 	cmp.w	r8, #2
 8007b26:	81a3      	strh	r3, [r4, #12]
 8007b28:	d061      	beq.n	8007bee <setvbuf+0x14a>
 8007b2a:	ab01      	add	r3, sp, #4
 8007b2c:	466a      	mov	r2, sp
 8007b2e:	4621      	mov	r1, r4
 8007b30:	4638      	mov	r0, r7
 8007b32:	f000 ff45 	bl	80089c0 <__swhatbuf_r>
 8007b36:	89a3      	ldrh	r3, [r4, #12]
 8007b38:	4318      	orrs	r0, r3
 8007b3a:	81a0      	strh	r0, [r4, #12]
 8007b3c:	bb2d      	cbnz	r5, 8007b8a <setvbuf+0xe6>
 8007b3e:	9d00      	ldr	r5, [sp, #0]
 8007b40:	4628      	mov	r0, r5
 8007b42:	f000 f9b3 	bl	8007eac <malloc>
 8007b46:	4606      	mov	r6, r0
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	d152      	bne.n	8007bf2 <setvbuf+0x14e>
 8007b4c:	f8dd 9000 	ldr.w	r9, [sp]
 8007b50:	45a9      	cmp	r9, r5
 8007b52:	d140      	bne.n	8007bd6 <setvbuf+0x132>
 8007b54:	f04f 35ff 	mov.w	r5, #4294967295
 8007b58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b5c:	f043 0202 	orr.w	r2, r3, #2
 8007b60:	81a2      	strh	r2, [r4, #12]
 8007b62:	2200      	movs	r2, #0
 8007b64:	60a2      	str	r2, [r4, #8]
 8007b66:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8007b6a:	6022      	str	r2, [r4, #0]
 8007b6c:	6122      	str	r2, [r4, #16]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	6162      	str	r2, [r4, #20]
 8007b72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007b74:	07d6      	lsls	r6, r2, #31
 8007b76:	d404      	bmi.n	8007b82 <setvbuf+0xde>
 8007b78:	0598      	lsls	r0, r3, #22
 8007b7a:	d402      	bmi.n	8007b82 <setvbuf+0xde>
 8007b7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b7e:	f000 f93b 	bl	8007df8 <__retarget_lock_release_recursive>
 8007b82:	4628      	mov	r0, r5
 8007b84:	b003      	add	sp, #12
 8007b86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b8a:	2e00      	cmp	r6, #0
 8007b8c:	d0d8      	beq.n	8007b40 <setvbuf+0x9c>
 8007b8e:	6a3b      	ldr	r3, [r7, #32]
 8007b90:	b913      	cbnz	r3, 8007b98 <setvbuf+0xf4>
 8007b92:	4638      	mov	r0, r7
 8007b94:	f7ff ff36 	bl	8007a04 <__sinit>
 8007b98:	f1b8 0f01 	cmp.w	r8, #1
 8007b9c:	bf08      	it	eq
 8007b9e:	89a3      	ldrheq	r3, [r4, #12]
 8007ba0:	6026      	str	r6, [r4, #0]
 8007ba2:	bf04      	itt	eq
 8007ba4:	f043 0301 	orreq.w	r3, r3, #1
 8007ba8:	81a3      	strheq	r3, [r4, #12]
 8007baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bae:	f013 0208 	ands.w	r2, r3, #8
 8007bb2:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007bb6:	d01e      	beq.n	8007bf6 <setvbuf+0x152>
 8007bb8:	07d9      	lsls	r1, r3, #31
 8007bba:	bf41      	itttt	mi
 8007bbc:	2200      	movmi	r2, #0
 8007bbe:	426d      	negmi	r5, r5
 8007bc0:	60a2      	strmi	r2, [r4, #8]
 8007bc2:	61a5      	strmi	r5, [r4, #24]
 8007bc4:	bf58      	it	pl
 8007bc6:	60a5      	strpl	r5, [r4, #8]
 8007bc8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007bca:	07d2      	lsls	r2, r2, #31
 8007bcc:	d401      	bmi.n	8007bd2 <setvbuf+0x12e>
 8007bce:	059b      	lsls	r3, r3, #22
 8007bd0:	d513      	bpl.n	8007bfa <setvbuf+0x156>
 8007bd2:	2500      	movs	r5, #0
 8007bd4:	e7d5      	b.n	8007b82 <setvbuf+0xde>
 8007bd6:	4648      	mov	r0, r9
 8007bd8:	f000 f968 	bl	8007eac <malloc>
 8007bdc:	4606      	mov	r6, r0
 8007bde:	2800      	cmp	r0, #0
 8007be0:	d0b8      	beq.n	8007b54 <setvbuf+0xb0>
 8007be2:	89a3      	ldrh	r3, [r4, #12]
 8007be4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007be8:	81a3      	strh	r3, [r4, #12]
 8007bea:	464d      	mov	r5, r9
 8007bec:	e7cf      	b.n	8007b8e <setvbuf+0xea>
 8007bee:	2500      	movs	r5, #0
 8007bf0:	e7b2      	b.n	8007b58 <setvbuf+0xb4>
 8007bf2:	46a9      	mov	r9, r5
 8007bf4:	e7f5      	b.n	8007be2 <setvbuf+0x13e>
 8007bf6:	60a2      	str	r2, [r4, #8]
 8007bf8:	e7e6      	b.n	8007bc8 <setvbuf+0x124>
 8007bfa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bfc:	f000 f8fc 	bl	8007df8 <__retarget_lock_release_recursive>
 8007c00:	e7e7      	b.n	8007bd2 <setvbuf+0x12e>
 8007c02:	f04f 35ff 	mov.w	r5, #4294967295
 8007c06:	e7bc      	b.n	8007b82 <setvbuf+0xde>
 8007c08:	20000118 	.word	0x20000118

08007c0c <__sread>:
 8007c0c:	b510      	push	{r4, lr}
 8007c0e:	460c      	mov	r4, r1
 8007c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c14:	f000 f8a0 	bl	8007d58 <_read_r>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	bfab      	itete	ge
 8007c1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007c1e:	89a3      	ldrhlt	r3, [r4, #12]
 8007c20:	181b      	addge	r3, r3, r0
 8007c22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007c26:	bfac      	ite	ge
 8007c28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007c2a:	81a3      	strhlt	r3, [r4, #12]
 8007c2c:	bd10      	pop	{r4, pc}

08007c2e <__swrite>:
 8007c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c32:	461f      	mov	r7, r3
 8007c34:	898b      	ldrh	r3, [r1, #12]
 8007c36:	05db      	lsls	r3, r3, #23
 8007c38:	4605      	mov	r5, r0
 8007c3a:	460c      	mov	r4, r1
 8007c3c:	4616      	mov	r6, r2
 8007c3e:	d505      	bpl.n	8007c4c <__swrite+0x1e>
 8007c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c44:	2302      	movs	r3, #2
 8007c46:	2200      	movs	r2, #0
 8007c48:	f000 f874 	bl	8007d34 <_lseek_r>
 8007c4c:	89a3      	ldrh	r3, [r4, #12]
 8007c4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c56:	81a3      	strh	r3, [r4, #12]
 8007c58:	4632      	mov	r2, r6
 8007c5a:	463b      	mov	r3, r7
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c62:	f000 b88b 	b.w	8007d7c <_write_r>

08007c66 <__sseek>:
 8007c66:	b510      	push	{r4, lr}
 8007c68:	460c      	mov	r4, r1
 8007c6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c6e:	f000 f861 	bl	8007d34 <_lseek_r>
 8007c72:	1c43      	adds	r3, r0, #1
 8007c74:	89a3      	ldrh	r3, [r4, #12]
 8007c76:	bf15      	itete	ne
 8007c78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007c7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c82:	81a3      	strheq	r3, [r4, #12]
 8007c84:	bf18      	it	ne
 8007c86:	81a3      	strhne	r3, [r4, #12]
 8007c88:	bd10      	pop	{r4, pc}

08007c8a <__sclose>:
 8007c8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c8e:	f000 b841 	b.w	8007d14 <_close_r>

08007c92 <_vsniprintf_r>:
 8007c92:	b530      	push	{r4, r5, lr}
 8007c94:	4614      	mov	r4, r2
 8007c96:	2c00      	cmp	r4, #0
 8007c98:	b09b      	sub	sp, #108	@ 0x6c
 8007c9a:	4605      	mov	r5, r0
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	da05      	bge.n	8007cac <_vsniprintf_r+0x1a>
 8007ca0:	238b      	movs	r3, #139	@ 0x8b
 8007ca2:	6003      	str	r3, [r0, #0]
 8007ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca8:	b01b      	add	sp, #108	@ 0x6c
 8007caa:	bd30      	pop	{r4, r5, pc}
 8007cac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007cb0:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007cb4:	bf14      	ite	ne
 8007cb6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007cba:	4623      	moveq	r3, r4
 8007cbc:	9302      	str	r3, [sp, #8]
 8007cbe:	9305      	str	r3, [sp, #20]
 8007cc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007cc4:	9100      	str	r1, [sp, #0]
 8007cc6:	9104      	str	r1, [sp, #16]
 8007cc8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007ccc:	4669      	mov	r1, sp
 8007cce:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007cd0:	f000 f9fe 	bl	80080d0 <_svfiprintf_r>
 8007cd4:	1c43      	adds	r3, r0, #1
 8007cd6:	bfbc      	itt	lt
 8007cd8:	238b      	movlt	r3, #139	@ 0x8b
 8007cda:	602b      	strlt	r3, [r5, #0]
 8007cdc:	2c00      	cmp	r4, #0
 8007cde:	d0e3      	beq.n	8007ca8 <_vsniprintf_r+0x16>
 8007ce0:	9b00      	ldr	r3, [sp, #0]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	701a      	strb	r2, [r3, #0]
 8007ce6:	e7df      	b.n	8007ca8 <_vsniprintf_r+0x16>

08007ce8 <vsniprintf>:
 8007ce8:	b507      	push	{r0, r1, r2, lr}
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	4613      	mov	r3, r2
 8007cee:	460a      	mov	r2, r1
 8007cf0:	4601      	mov	r1, r0
 8007cf2:	4803      	ldr	r0, [pc, #12]	@ (8007d00 <vsniprintf+0x18>)
 8007cf4:	6800      	ldr	r0, [r0, #0]
 8007cf6:	f7ff ffcc 	bl	8007c92 <_vsniprintf_r>
 8007cfa:	b003      	add	sp, #12
 8007cfc:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d00:	20000118 	.word	0x20000118

08007d04 <memset>:
 8007d04:	4402      	add	r2, r0
 8007d06:	4603      	mov	r3, r0
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d100      	bne.n	8007d0e <memset+0xa>
 8007d0c:	4770      	bx	lr
 8007d0e:	f803 1b01 	strb.w	r1, [r3], #1
 8007d12:	e7f9      	b.n	8007d08 <memset+0x4>

08007d14 <_close_r>:
 8007d14:	b538      	push	{r3, r4, r5, lr}
 8007d16:	4d06      	ldr	r5, [pc, #24]	@ (8007d30 <_close_r+0x1c>)
 8007d18:	2300      	movs	r3, #0
 8007d1a:	4604      	mov	r4, r0
 8007d1c:	4608      	mov	r0, r1
 8007d1e:	602b      	str	r3, [r5, #0]
 8007d20:	f7fb fc3d 	bl	800359e <_close>
 8007d24:	1c43      	adds	r3, r0, #1
 8007d26:	d102      	bne.n	8007d2e <_close_r+0x1a>
 8007d28:	682b      	ldr	r3, [r5, #0]
 8007d2a:	b103      	cbz	r3, 8007d2e <_close_r+0x1a>
 8007d2c:	6023      	str	r3, [r4, #0]
 8007d2e:	bd38      	pop	{r3, r4, r5, pc}
 8007d30:	200007e0 	.word	0x200007e0

08007d34 <_lseek_r>:
 8007d34:	b538      	push	{r3, r4, r5, lr}
 8007d36:	4d07      	ldr	r5, [pc, #28]	@ (8007d54 <_lseek_r+0x20>)
 8007d38:	4604      	mov	r4, r0
 8007d3a:	4608      	mov	r0, r1
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	2200      	movs	r2, #0
 8007d40:	602a      	str	r2, [r5, #0]
 8007d42:	461a      	mov	r2, r3
 8007d44:	f7fb fc52 	bl	80035ec <_lseek>
 8007d48:	1c43      	adds	r3, r0, #1
 8007d4a:	d102      	bne.n	8007d52 <_lseek_r+0x1e>
 8007d4c:	682b      	ldr	r3, [r5, #0]
 8007d4e:	b103      	cbz	r3, 8007d52 <_lseek_r+0x1e>
 8007d50:	6023      	str	r3, [r4, #0]
 8007d52:	bd38      	pop	{r3, r4, r5, pc}
 8007d54:	200007e0 	.word	0x200007e0

08007d58 <_read_r>:
 8007d58:	b538      	push	{r3, r4, r5, lr}
 8007d5a:	4d07      	ldr	r5, [pc, #28]	@ (8007d78 <_read_r+0x20>)
 8007d5c:	4604      	mov	r4, r0
 8007d5e:	4608      	mov	r0, r1
 8007d60:	4611      	mov	r1, r2
 8007d62:	2200      	movs	r2, #0
 8007d64:	602a      	str	r2, [r5, #0]
 8007d66:	461a      	mov	r2, r3
 8007d68:	f7fb fbe0 	bl	800352c <_read>
 8007d6c:	1c43      	adds	r3, r0, #1
 8007d6e:	d102      	bne.n	8007d76 <_read_r+0x1e>
 8007d70:	682b      	ldr	r3, [r5, #0]
 8007d72:	b103      	cbz	r3, 8007d76 <_read_r+0x1e>
 8007d74:	6023      	str	r3, [r4, #0]
 8007d76:	bd38      	pop	{r3, r4, r5, pc}
 8007d78:	200007e0 	.word	0x200007e0

08007d7c <_write_r>:
 8007d7c:	b538      	push	{r3, r4, r5, lr}
 8007d7e:	4d07      	ldr	r5, [pc, #28]	@ (8007d9c <_write_r+0x20>)
 8007d80:	4604      	mov	r4, r0
 8007d82:	4608      	mov	r0, r1
 8007d84:	4611      	mov	r1, r2
 8007d86:	2200      	movs	r2, #0
 8007d88:	602a      	str	r2, [r5, #0]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	f7fb fbeb 	bl	8003566 <_write>
 8007d90:	1c43      	adds	r3, r0, #1
 8007d92:	d102      	bne.n	8007d9a <_write_r+0x1e>
 8007d94:	682b      	ldr	r3, [r5, #0]
 8007d96:	b103      	cbz	r3, 8007d9a <_write_r+0x1e>
 8007d98:	6023      	str	r3, [r4, #0]
 8007d9a:	bd38      	pop	{r3, r4, r5, pc}
 8007d9c:	200007e0 	.word	0x200007e0

08007da0 <__errno>:
 8007da0:	4b01      	ldr	r3, [pc, #4]	@ (8007da8 <__errno+0x8>)
 8007da2:	6818      	ldr	r0, [r3, #0]
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	20000118 	.word	0x20000118

08007dac <__libc_init_array>:
 8007dac:	b570      	push	{r4, r5, r6, lr}
 8007dae:	4d0d      	ldr	r5, [pc, #52]	@ (8007de4 <__libc_init_array+0x38>)
 8007db0:	4c0d      	ldr	r4, [pc, #52]	@ (8007de8 <__libc_init_array+0x3c>)
 8007db2:	1b64      	subs	r4, r4, r5
 8007db4:	10a4      	asrs	r4, r4, #2
 8007db6:	2600      	movs	r6, #0
 8007db8:	42a6      	cmp	r6, r4
 8007dba:	d109      	bne.n	8007dd0 <__libc_init_array+0x24>
 8007dbc:	4d0b      	ldr	r5, [pc, #44]	@ (8007dec <__libc_init_array+0x40>)
 8007dbe:	4c0c      	ldr	r4, [pc, #48]	@ (8007df0 <__libc_init_array+0x44>)
 8007dc0:	f001 fed4 	bl	8009b6c <_init>
 8007dc4:	1b64      	subs	r4, r4, r5
 8007dc6:	10a4      	asrs	r4, r4, #2
 8007dc8:	2600      	movs	r6, #0
 8007dca:	42a6      	cmp	r6, r4
 8007dcc:	d105      	bne.n	8007dda <__libc_init_array+0x2e>
 8007dce:	bd70      	pop	{r4, r5, r6, pc}
 8007dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dd4:	4798      	blx	r3
 8007dd6:	3601      	adds	r6, #1
 8007dd8:	e7ee      	b.n	8007db8 <__libc_init_array+0xc>
 8007dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dde:	4798      	blx	r3
 8007de0:	3601      	adds	r6, #1
 8007de2:	e7f2      	b.n	8007dca <__libc_init_array+0x1e>
 8007de4:	0800a820 	.word	0x0800a820
 8007de8:	0800a820 	.word	0x0800a820
 8007dec:	0800a820 	.word	0x0800a820
 8007df0:	0800a824 	.word	0x0800a824

08007df4 <__retarget_lock_init_recursive>:
 8007df4:	4770      	bx	lr

08007df6 <__retarget_lock_acquire_recursive>:
 8007df6:	4770      	bx	lr

08007df8 <__retarget_lock_release_recursive>:
 8007df8:	4770      	bx	lr

08007dfa <memcpy>:
 8007dfa:	440a      	add	r2, r1
 8007dfc:	4291      	cmp	r1, r2
 8007dfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e02:	d100      	bne.n	8007e06 <memcpy+0xc>
 8007e04:	4770      	bx	lr
 8007e06:	b510      	push	{r4, lr}
 8007e08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e10:	4291      	cmp	r1, r2
 8007e12:	d1f9      	bne.n	8007e08 <memcpy+0xe>
 8007e14:	bd10      	pop	{r4, pc}
	...

08007e18 <_free_r>:
 8007e18:	b538      	push	{r3, r4, r5, lr}
 8007e1a:	4605      	mov	r5, r0
 8007e1c:	2900      	cmp	r1, #0
 8007e1e:	d041      	beq.n	8007ea4 <_free_r+0x8c>
 8007e20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e24:	1f0c      	subs	r4, r1, #4
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	bfb8      	it	lt
 8007e2a:	18e4      	addlt	r4, r4, r3
 8007e2c:	f000 f8e8 	bl	8008000 <__malloc_lock>
 8007e30:	4a1d      	ldr	r2, [pc, #116]	@ (8007ea8 <_free_r+0x90>)
 8007e32:	6813      	ldr	r3, [r2, #0]
 8007e34:	b933      	cbnz	r3, 8007e44 <_free_r+0x2c>
 8007e36:	6063      	str	r3, [r4, #4]
 8007e38:	6014      	str	r4, [r2, #0]
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e40:	f000 b8e4 	b.w	800800c <__malloc_unlock>
 8007e44:	42a3      	cmp	r3, r4
 8007e46:	d908      	bls.n	8007e5a <_free_r+0x42>
 8007e48:	6820      	ldr	r0, [r4, #0]
 8007e4a:	1821      	adds	r1, r4, r0
 8007e4c:	428b      	cmp	r3, r1
 8007e4e:	bf01      	itttt	eq
 8007e50:	6819      	ldreq	r1, [r3, #0]
 8007e52:	685b      	ldreq	r3, [r3, #4]
 8007e54:	1809      	addeq	r1, r1, r0
 8007e56:	6021      	streq	r1, [r4, #0]
 8007e58:	e7ed      	b.n	8007e36 <_free_r+0x1e>
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	b10b      	cbz	r3, 8007e64 <_free_r+0x4c>
 8007e60:	42a3      	cmp	r3, r4
 8007e62:	d9fa      	bls.n	8007e5a <_free_r+0x42>
 8007e64:	6811      	ldr	r1, [r2, #0]
 8007e66:	1850      	adds	r0, r2, r1
 8007e68:	42a0      	cmp	r0, r4
 8007e6a:	d10b      	bne.n	8007e84 <_free_r+0x6c>
 8007e6c:	6820      	ldr	r0, [r4, #0]
 8007e6e:	4401      	add	r1, r0
 8007e70:	1850      	adds	r0, r2, r1
 8007e72:	4283      	cmp	r3, r0
 8007e74:	6011      	str	r1, [r2, #0]
 8007e76:	d1e0      	bne.n	8007e3a <_free_r+0x22>
 8007e78:	6818      	ldr	r0, [r3, #0]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	6053      	str	r3, [r2, #4]
 8007e7e:	4408      	add	r0, r1
 8007e80:	6010      	str	r0, [r2, #0]
 8007e82:	e7da      	b.n	8007e3a <_free_r+0x22>
 8007e84:	d902      	bls.n	8007e8c <_free_r+0x74>
 8007e86:	230c      	movs	r3, #12
 8007e88:	602b      	str	r3, [r5, #0]
 8007e8a:	e7d6      	b.n	8007e3a <_free_r+0x22>
 8007e8c:	6820      	ldr	r0, [r4, #0]
 8007e8e:	1821      	adds	r1, r4, r0
 8007e90:	428b      	cmp	r3, r1
 8007e92:	bf04      	itt	eq
 8007e94:	6819      	ldreq	r1, [r3, #0]
 8007e96:	685b      	ldreq	r3, [r3, #4]
 8007e98:	6063      	str	r3, [r4, #4]
 8007e9a:	bf04      	itt	eq
 8007e9c:	1809      	addeq	r1, r1, r0
 8007e9e:	6021      	streq	r1, [r4, #0]
 8007ea0:	6054      	str	r4, [r2, #4]
 8007ea2:	e7ca      	b.n	8007e3a <_free_r+0x22>
 8007ea4:	bd38      	pop	{r3, r4, r5, pc}
 8007ea6:	bf00      	nop
 8007ea8:	200007ec 	.word	0x200007ec

08007eac <malloc>:
 8007eac:	4b02      	ldr	r3, [pc, #8]	@ (8007eb8 <malloc+0xc>)
 8007eae:	4601      	mov	r1, r0
 8007eb0:	6818      	ldr	r0, [r3, #0]
 8007eb2:	f000 b825 	b.w	8007f00 <_malloc_r>
 8007eb6:	bf00      	nop
 8007eb8:	20000118 	.word	0x20000118

08007ebc <sbrk_aligned>:
 8007ebc:	b570      	push	{r4, r5, r6, lr}
 8007ebe:	4e0f      	ldr	r6, [pc, #60]	@ (8007efc <sbrk_aligned+0x40>)
 8007ec0:	460c      	mov	r4, r1
 8007ec2:	6831      	ldr	r1, [r6, #0]
 8007ec4:	4605      	mov	r5, r0
 8007ec6:	b911      	cbnz	r1, 8007ece <sbrk_aligned+0x12>
 8007ec8:	f000 feac 	bl	8008c24 <_sbrk_r>
 8007ecc:	6030      	str	r0, [r6, #0]
 8007ece:	4621      	mov	r1, r4
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	f000 fea7 	bl	8008c24 <_sbrk_r>
 8007ed6:	1c43      	adds	r3, r0, #1
 8007ed8:	d103      	bne.n	8007ee2 <sbrk_aligned+0x26>
 8007eda:	f04f 34ff 	mov.w	r4, #4294967295
 8007ede:	4620      	mov	r0, r4
 8007ee0:	bd70      	pop	{r4, r5, r6, pc}
 8007ee2:	1cc4      	adds	r4, r0, #3
 8007ee4:	f024 0403 	bic.w	r4, r4, #3
 8007ee8:	42a0      	cmp	r0, r4
 8007eea:	d0f8      	beq.n	8007ede <sbrk_aligned+0x22>
 8007eec:	1a21      	subs	r1, r4, r0
 8007eee:	4628      	mov	r0, r5
 8007ef0:	f000 fe98 	bl	8008c24 <_sbrk_r>
 8007ef4:	3001      	adds	r0, #1
 8007ef6:	d1f2      	bne.n	8007ede <sbrk_aligned+0x22>
 8007ef8:	e7ef      	b.n	8007eda <sbrk_aligned+0x1e>
 8007efa:	bf00      	nop
 8007efc:	200007e8 	.word	0x200007e8

08007f00 <_malloc_r>:
 8007f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f04:	1ccd      	adds	r5, r1, #3
 8007f06:	f025 0503 	bic.w	r5, r5, #3
 8007f0a:	3508      	adds	r5, #8
 8007f0c:	2d0c      	cmp	r5, #12
 8007f0e:	bf38      	it	cc
 8007f10:	250c      	movcc	r5, #12
 8007f12:	2d00      	cmp	r5, #0
 8007f14:	4606      	mov	r6, r0
 8007f16:	db01      	blt.n	8007f1c <_malloc_r+0x1c>
 8007f18:	42a9      	cmp	r1, r5
 8007f1a:	d904      	bls.n	8007f26 <_malloc_r+0x26>
 8007f1c:	230c      	movs	r3, #12
 8007f1e:	6033      	str	r3, [r6, #0]
 8007f20:	2000      	movs	r0, #0
 8007f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ffc <_malloc_r+0xfc>
 8007f2a:	f000 f869 	bl	8008000 <__malloc_lock>
 8007f2e:	f8d8 3000 	ldr.w	r3, [r8]
 8007f32:	461c      	mov	r4, r3
 8007f34:	bb44      	cbnz	r4, 8007f88 <_malloc_r+0x88>
 8007f36:	4629      	mov	r1, r5
 8007f38:	4630      	mov	r0, r6
 8007f3a:	f7ff ffbf 	bl	8007ebc <sbrk_aligned>
 8007f3e:	1c43      	adds	r3, r0, #1
 8007f40:	4604      	mov	r4, r0
 8007f42:	d158      	bne.n	8007ff6 <_malloc_r+0xf6>
 8007f44:	f8d8 4000 	ldr.w	r4, [r8]
 8007f48:	4627      	mov	r7, r4
 8007f4a:	2f00      	cmp	r7, #0
 8007f4c:	d143      	bne.n	8007fd6 <_malloc_r+0xd6>
 8007f4e:	2c00      	cmp	r4, #0
 8007f50:	d04b      	beq.n	8007fea <_malloc_r+0xea>
 8007f52:	6823      	ldr	r3, [r4, #0]
 8007f54:	4639      	mov	r1, r7
 8007f56:	4630      	mov	r0, r6
 8007f58:	eb04 0903 	add.w	r9, r4, r3
 8007f5c:	f000 fe62 	bl	8008c24 <_sbrk_r>
 8007f60:	4581      	cmp	r9, r0
 8007f62:	d142      	bne.n	8007fea <_malloc_r+0xea>
 8007f64:	6821      	ldr	r1, [r4, #0]
 8007f66:	1a6d      	subs	r5, r5, r1
 8007f68:	4629      	mov	r1, r5
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	f7ff ffa6 	bl	8007ebc <sbrk_aligned>
 8007f70:	3001      	adds	r0, #1
 8007f72:	d03a      	beq.n	8007fea <_malloc_r+0xea>
 8007f74:	6823      	ldr	r3, [r4, #0]
 8007f76:	442b      	add	r3, r5
 8007f78:	6023      	str	r3, [r4, #0]
 8007f7a:	f8d8 3000 	ldr.w	r3, [r8]
 8007f7e:	685a      	ldr	r2, [r3, #4]
 8007f80:	bb62      	cbnz	r2, 8007fdc <_malloc_r+0xdc>
 8007f82:	f8c8 7000 	str.w	r7, [r8]
 8007f86:	e00f      	b.n	8007fa8 <_malloc_r+0xa8>
 8007f88:	6822      	ldr	r2, [r4, #0]
 8007f8a:	1b52      	subs	r2, r2, r5
 8007f8c:	d420      	bmi.n	8007fd0 <_malloc_r+0xd0>
 8007f8e:	2a0b      	cmp	r2, #11
 8007f90:	d917      	bls.n	8007fc2 <_malloc_r+0xc2>
 8007f92:	1961      	adds	r1, r4, r5
 8007f94:	42a3      	cmp	r3, r4
 8007f96:	6025      	str	r5, [r4, #0]
 8007f98:	bf18      	it	ne
 8007f9a:	6059      	strne	r1, [r3, #4]
 8007f9c:	6863      	ldr	r3, [r4, #4]
 8007f9e:	bf08      	it	eq
 8007fa0:	f8c8 1000 	streq.w	r1, [r8]
 8007fa4:	5162      	str	r2, [r4, r5]
 8007fa6:	604b      	str	r3, [r1, #4]
 8007fa8:	4630      	mov	r0, r6
 8007faa:	f000 f82f 	bl	800800c <__malloc_unlock>
 8007fae:	f104 000b 	add.w	r0, r4, #11
 8007fb2:	1d23      	adds	r3, r4, #4
 8007fb4:	f020 0007 	bic.w	r0, r0, #7
 8007fb8:	1ac2      	subs	r2, r0, r3
 8007fba:	bf1c      	itt	ne
 8007fbc:	1a1b      	subne	r3, r3, r0
 8007fbe:	50a3      	strne	r3, [r4, r2]
 8007fc0:	e7af      	b.n	8007f22 <_malloc_r+0x22>
 8007fc2:	6862      	ldr	r2, [r4, #4]
 8007fc4:	42a3      	cmp	r3, r4
 8007fc6:	bf0c      	ite	eq
 8007fc8:	f8c8 2000 	streq.w	r2, [r8]
 8007fcc:	605a      	strne	r2, [r3, #4]
 8007fce:	e7eb      	b.n	8007fa8 <_malloc_r+0xa8>
 8007fd0:	4623      	mov	r3, r4
 8007fd2:	6864      	ldr	r4, [r4, #4]
 8007fd4:	e7ae      	b.n	8007f34 <_malloc_r+0x34>
 8007fd6:	463c      	mov	r4, r7
 8007fd8:	687f      	ldr	r7, [r7, #4]
 8007fda:	e7b6      	b.n	8007f4a <_malloc_r+0x4a>
 8007fdc:	461a      	mov	r2, r3
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	42a3      	cmp	r3, r4
 8007fe2:	d1fb      	bne.n	8007fdc <_malloc_r+0xdc>
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	6053      	str	r3, [r2, #4]
 8007fe8:	e7de      	b.n	8007fa8 <_malloc_r+0xa8>
 8007fea:	230c      	movs	r3, #12
 8007fec:	6033      	str	r3, [r6, #0]
 8007fee:	4630      	mov	r0, r6
 8007ff0:	f000 f80c 	bl	800800c <__malloc_unlock>
 8007ff4:	e794      	b.n	8007f20 <_malloc_r+0x20>
 8007ff6:	6005      	str	r5, [r0, #0]
 8007ff8:	e7d6      	b.n	8007fa8 <_malloc_r+0xa8>
 8007ffa:	bf00      	nop
 8007ffc:	200007ec 	.word	0x200007ec

08008000 <__malloc_lock>:
 8008000:	4801      	ldr	r0, [pc, #4]	@ (8008008 <__malloc_lock+0x8>)
 8008002:	f7ff bef8 	b.w	8007df6 <__retarget_lock_acquire_recursive>
 8008006:	bf00      	nop
 8008008:	200007e4 	.word	0x200007e4

0800800c <__malloc_unlock>:
 800800c:	4801      	ldr	r0, [pc, #4]	@ (8008014 <__malloc_unlock+0x8>)
 800800e:	f7ff bef3 	b.w	8007df8 <__retarget_lock_release_recursive>
 8008012:	bf00      	nop
 8008014:	200007e4 	.word	0x200007e4

08008018 <__ssputs_r>:
 8008018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800801c:	688e      	ldr	r6, [r1, #8]
 800801e:	461f      	mov	r7, r3
 8008020:	42be      	cmp	r6, r7
 8008022:	680b      	ldr	r3, [r1, #0]
 8008024:	4682      	mov	sl, r0
 8008026:	460c      	mov	r4, r1
 8008028:	4690      	mov	r8, r2
 800802a:	d82d      	bhi.n	8008088 <__ssputs_r+0x70>
 800802c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008030:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008034:	d026      	beq.n	8008084 <__ssputs_r+0x6c>
 8008036:	6965      	ldr	r5, [r4, #20]
 8008038:	6909      	ldr	r1, [r1, #16]
 800803a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800803e:	eba3 0901 	sub.w	r9, r3, r1
 8008042:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008046:	1c7b      	adds	r3, r7, #1
 8008048:	444b      	add	r3, r9
 800804a:	106d      	asrs	r5, r5, #1
 800804c:	429d      	cmp	r5, r3
 800804e:	bf38      	it	cc
 8008050:	461d      	movcc	r5, r3
 8008052:	0553      	lsls	r3, r2, #21
 8008054:	d527      	bpl.n	80080a6 <__ssputs_r+0x8e>
 8008056:	4629      	mov	r1, r5
 8008058:	f7ff ff52 	bl	8007f00 <_malloc_r>
 800805c:	4606      	mov	r6, r0
 800805e:	b360      	cbz	r0, 80080ba <__ssputs_r+0xa2>
 8008060:	6921      	ldr	r1, [r4, #16]
 8008062:	464a      	mov	r2, r9
 8008064:	f7ff fec9 	bl	8007dfa <memcpy>
 8008068:	89a3      	ldrh	r3, [r4, #12]
 800806a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800806e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008072:	81a3      	strh	r3, [r4, #12]
 8008074:	6126      	str	r6, [r4, #16]
 8008076:	6165      	str	r5, [r4, #20]
 8008078:	444e      	add	r6, r9
 800807a:	eba5 0509 	sub.w	r5, r5, r9
 800807e:	6026      	str	r6, [r4, #0]
 8008080:	60a5      	str	r5, [r4, #8]
 8008082:	463e      	mov	r6, r7
 8008084:	42be      	cmp	r6, r7
 8008086:	d900      	bls.n	800808a <__ssputs_r+0x72>
 8008088:	463e      	mov	r6, r7
 800808a:	6820      	ldr	r0, [r4, #0]
 800808c:	4632      	mov	r2, r6
 800808e:	4641      	mov	r1, r8
 8008090:	f000 fd8c 	bl	8008bac <memmove>
 8008094:	68a3      	ldr	r3, [r4, #8]
 8008096:	1b9b      	subs	r3, r3, r6
 8008098:	60a3      	str	r3, [r4, #8]
 800809a:	6823      	ldr	r3, [r4, #0]
 800809c:	4433      	add	r3, r6
 800809e:	6023      	str	r3, [r4, #0]
 80080a0:	2000      	movs	r0, #0
 80080a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a6:	462a      	mov	r2, r5
 80080a8:	f000 fdcc 	bl	8008c44 <_realloc_r>
 80080ac:	4606      	mov	r6, r0
 80080ae:	2800      	cmp	r0, #0
 80080b0:	d1e0      	bne.n	8008074 <__ssputs_r+0x5c>
 80080b2:	6921      	ldr	r1, [r4, #16]
 80080b4:	4650      	mov	r0, sl
 80080b6:	f7ff feaf 	bl	8007e18 <_free_r>
 80080ba:	230c      	movs	r3, #12
 80080bc:	f8ca 3000 	str.w	r3, [sl]
 80080c0:	89a3      	ldrh	r3, [r4, #12]
 80080c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080c6:	81a3      	strh	r3, [r4, #12]
 80080c8:	f04f 30ff 	mov.w	r0, #4294967295
 80080cc:	e7e9      	b.n	80080a2 <__ssputs_r+0x8a>
	...

080080d0 <_svfiprintf_r>:
 80080d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d4:	4698      	mov	r8, r3
 80080d6:	898b      	ldrh	r3, [r1, #12]
 80080d8:	061b      	lsls	r3, r3, #24
 80080da:	b09d      	sub	sp, #116	@ 0x74
 80080dc:	4607      	mov	r7, r0
 80080de:	460d      	mov	r5, r1
 80080e0:	4614      	mov	r4, r2
 80080e2:	d510      	bpl.n	8008106 <_svfiprintf_r+0x36>
 80080e4:	690b      	ldr	r3, [r1, #16]
 80080e6:	b973      	cbnz	r3, 8008106 <_svfiprintf_r+0x36>
 80080e8:	2140      	movs	r1, #64	@ 0x40
 80080ea:	f7ff ff09 	bl	8007f00 <_malloc_r>
 80080ee:	6028      	str	r0, [r5, #0]
 80080f0:	6128      	str	r0, [r5, #16]
 80080f2:	b930      	cbnz	r0, 8008102 <_svfiprintf_r+0x32>
 80080f4:	230c      	movs	r3, #12
 80080f6:	603b      	str	r3, [r7, #0]
 80080f8:	f04f 30ff 	mov.w	r0, #4294967295
 80080fc:	b01d      	add	sp, #116	@ 0x74
 80080fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008102:	2340      	movs	r3, #64	@ 0x40
 8008104:	616b      	str	r3, [r5, #20]
 8008106:	2300      	movs	r3, #0
 8008108:	9309      	str	r3, [sp, #36]	@ 0x24
 800810a:	2320      	movs	r3, #32
 800810c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008110:	f8cd 800c 	str.w	r8, [sp, #12]
 8008114:	2330      	movs	r3, #48	@ 0x30
 8008116:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80082b4 <_svfiprintf_r+0x1e4>
 800811a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800811e:	f04f 0901 	mov.w	r9, #1
 8008122:	4623      	mov	r3, r4
 8008124:	469a      	mov	sl, r3
 8008126:	f813 2b01 	ldrb.w	r2, [r3], #1
 800812a:	b10a      	cbz	r2, 8008130 <_svfiprintf_r+0x60>
 800812c:	2a25      	cmp	r2, #37	@ 0x25
 800812e:	d1f9      	bne.n	8008124 <_svfiprintf_r+0x54>
 8008130:	ebba 0b04 	subs.w	fp, sl, r4
 8008134:	d00b      	beq.n	800814e <_svfiprintf_r+0x7e>
 8008136:	465b      	mov	r3, fp
 8008138:	4622      	mov	r2, r4
 800813a:	4629      	mov	r1, r5
 800813c:	4638      	mov	r0, r7
 800813e:	f7ff ff6b 	bl	8008018 <__ssputs_r>
 8008142:	3001      	adds	r0, #1
 8008144:	f000 80a7 	beq.w	8008296 <_svfiprintf_r+0x1c6>
 8008148:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800814a:	445a      	add	r2, fp
 800814c:	9209      	str	r2, [sp, #36]	@ 0x24
 800814e:	f89a 3000 	ldrb.w	r3, [sl]
 8008152:	2b00      	cmp	r3, #0
 8008154:	f000 809f 	beq.w	8008296 <_svfiprintf_r+0x1c6>
 8008158:	2300      	movs	r3, #0
 800815a:	f04f 32ff 	mov.w	r2, #4294967295
 800815e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008162:	f10a 0a01 	add.w	sl, sl, #1
 8008166:	9304      	str	r3, [sp, #16]
 8008168:	9307      	str	r3, [sp, #28]
 800816a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800816e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008170:	4654      	mov	r4, sl
 8008172:	2205      	movs	r2, #5
 8008174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008178:	484e      	ldr	r0, [pc, #312]	@ (80082b4 <_svfiprintf_r+0x1e4>)
 800817a:	f7f8 f849 	bl	8000210 <memchr>
 800817e:	9a04      	ldr	r2, [sp, #16]
 8008180:	b9d8      	cbnz	r0, 80081ba <_svfiprintf_r+0xea>
 8008182:	06d0      	lsls	r0, r2, #27
 8008184:	bf44      	itt	mi
 8008186:	2320      	movmi	r3, #32
 8008188:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800818c:	0711      	lsls	r1, r2, #28
 800818e:	bf44      	itt	mi
 8008190:	232b      	movmi	r3, #43	@ 0x2b
 8008192:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008196:	f89a 3000 	ldrb.w	r3, [sl]
 800819a:	2b2a      	cmp	r3, #42	@ 0x2a
 800819c:	d015      	beq.n	80081ca <_svfiprintf_r+0xfa>
 800819e:	9a07      	ldr	r2, [sp, #28]
 80081a0:	4654      	mov	r4, sl
 80081a2:	2000      	movs	r0, #0
 80081a4:	f04f 0c0a 	mov.w	ip, #10
 80081a8:	4621      	mov	r1, r4
 80081aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081ae:	3b30      	subs	r3, #48	@ 0x30
 80081b0:	2b09      	cmp	r3, #9
 80081b2:	d94b      	bls.n	800824c <_svfiprintf_r+0x17c>
 80081b4:	b1b0      	cbz	r0, 80081e4 <_svfiprintf_r+0x114>
 80081b6:	9207      	str	r2, [sp, #28]
 80081b8:	e014      	b.n	80081e4 <_svfiprintf_r+0x114>
 80081ba:	eba0 0308 	sub.w	r3, r0, r8
 80081be:	fa09 f303 	lsl.w	r3, r9, r3
 80081c2:	4313      	orrs	r3, r2
 80081c4:	9304      	str	r3, [sp, #16]
 80081c6:	46a2      	mov	sl, r4
 80081c8:	e7d2      	b.n	8008170 <_svfiprintf_r+0xa0>
 80081ca:	9b03      	ldr	r3, [sp, #12]
 80081cc:	1d19      	adds	r1, r3, #4
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	9103      	str	r1, [sp, #12]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	bfbb      	ittet	lt
 80081d6:	425b      	neglt	r3, r3
 80081d8:	f042 0202 	orrlt.w	r2, r2, #2
 80081dc:	9307      	strge	r3, [sp, #28]
 80081de:	9307      	strlt	r3, [sp, #28]
 80081e0:	bfb8      	it	lt
 80081e2:	9204      	strlt	r2, [sp, #16]
 80081e4:	7823      	ldrb	r3, [r4, #0]
 80081e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80081e8:	d10a      	bne.n	8008200 <_svfiprintf_r+0x130>
 80081ea:	7863      	ldrb	r3, [r4, #1]
 80081ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80081ee:	d132      	bne.n	8008256 <_svfiprintf_r+0x186>
 80081f0:	9b03      	ldr	r3, [sp, #12]
 80081f2:	1d1a      	adds	r2, r3, #4
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	9203      	str	r2, [sp, #12]
 80081f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081fc:	3402      	adds	r4, #2
 80081fe:	9305      	str	r3, [sp, #20]
 8008200:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80082c4 <_svfiprintf_r+0x1f4>
 8008204:	7821      	ldrb	r1, [r4, #0]
 8008206:	2203      	movs	r2, #3
 8008208:	4650      	mov	r0, sl
 800820a:	f7f8 f801 	bl	8000210 <memchr>
 800820e:	b138      	cbz	r0, 8008220 <_svfiprintf_r+0x150>
 8008210:	9b04      	ldr	r3, [sp, #16]
 8008212:	eba0 000a 	sub.w	r0, r0, sl
 8008216:	2240      	movs	r2, #64	@ 0x40
 8008218:	4082      	lsls	r2, r0
 800821a:	4313      	orrs	r3, r2
 800821c:	3401      	adds	r4, #1
 800821e:	9304      	str	r3, [sp, #16]
 8008220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008224:	4824      	ldr	r0, [pc, #144]	@ (80082b8 <_svfiprintf_r+0x1e8>)
 8008226:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800822a:	2206      	movs	r2, #6
 800822c:	f7f7 fff0 	bl	8000210 <memchr>
 8008230:	2800      	cmp	r0, #0
 8008232:	d036      	beq.n	80082a2 <_svfiprintf_r+0x1d2>
 8008234:	4b21      	ldr	r3, [pc, #132]	@ (80082bc <_svfiprintf_r+0x1ec>)
 8008236:	bb1b      	cbnz	r3, 8008280 <_svfiprintf_r+0x1b0>
 8008238:	9b03      	ldr	r3, [sp, #12]
 800823a:	3307      	adds	r3, #7
 800823c:	f023 0307 	bic.w	r3, r3, #7
 8008240:	3308      	adds	r3, #8
 8008242:	9303      	str	r3, [sp, #12]
 8008244:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008246:	4433      	add	r3, r6
 8008248:	9309      	str	r3, [sp, #36]	@ 0x24
 800824a:	e76a      	b.n	8008122 <_svfiprintf_r+0x52>
 800824c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008250:	460c      	mov	r4, r1
 8008252:	2001      	movs	r0, #1
 8008254:	e7a8      	b.n	80081a8 <_svfiprintf_r+0xd8>
 8008256:	2300      	movs	r3, #0
 8008258:	3401      	adds	r4, #1
 800825a:	9305      	str	r3, [sp, #20]
 800825c:	4619      	mov	r1, r3
 800825e:	f04f 0c0a 	mov.w	ip, #10
 8008262:	4620      	mov	r0, r4
 8008264:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008268:	3a30      	subs	r2, #48	@ 0x30
 800826a:	2a09      	cmp	r2, #9
 800826c:	d903      	bls.n	8008276 <_svfiprintf_r+0x1a6>
 800826e:	2b00      	cmp	r3, #0
 8008270:	d0c6      	beq.n	8008200 <_svfiprintf_r+0x130>
 8008272:	9105      	str	r1, [sp, #20]
 8008274:	e7c4      	b.n	8008200 <_svfiprintf_r+0x130>
 8008276:	fb0c 2101 	mla	r1, ip, r1, r2
 800827a:	4604      	mov	r4, r0
 800827c:	2301      	movs	r3, #1
 800827e:	e7f0      	b.n	8008262 <_svfiprintf_r+0x192>
 8008280:	ab03      	add	r3, sp, #12
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	462a      	mov	r2, r5
 8008286:	4b0e      	ldr	r3, [pc, #56]	@ (80082c0 <_svfiprintf_r+0x1f0>)
 8008288:	a904      	add	r1, sp, #16
 800828a:	4638      	mov	r0, r7
 800828c:	f3af 8000 	nop.w
 8008290:	1c42      	adds	r2, r0, #1
 8008292:	4606      	mov	r6, r0
 8008294:	d1d6      	bne.n	8008244 <_svfiprintf_r+0x174>
 8008296:	89ab      	ldrh	r3, [r5, #12]
 8008298:	065b      	lsls	r3, r3, #25
 800829a:	f53f af2d 	bmi.w	80080f8 <_svfiprintf_r+0x28>
 800829e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082a0:	e72c      	b.n	80080fc <_svfiprintf_r+0x2c>
 80082a2:	ab03      	add	r3, sp, #12
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	462a      	mov	r2, r5
 80082a8:	4b05      	ldr	r3, [pc, #20]	@ (80082c0 <_svfiprintf_r+0x1f0>)
 80082aa:	a904      	add	r1, sp, #16
 80082ac:	4638      	mov	r0, r7
 80082ae:	f000 f9bb 	bl	8008628 <_printf_i>
 80082b2:	e7ed      	b.n	8008290 <_svfiprintf_r+0x1c0>
 80082b4:	0800a7b1 	.word	0x0800a7b1
 80082b8:	0800a7bb 	.word	0x0800a7bb
 80082bc:	00000000 	.word	0x00000000
 80082c0:	08008019 	.word	0x08008019
 80082c4:	0800a7b7 	.word	0x0800a7b7

080082c8 <__sfputc_r>:
 80082c8:	6893      	ldr	r3, [r2, #8]
 80082ca:	3b01      	subs	r3, #1
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	b410      	push	{r4}
 80082d0:	6093      	str	r3, [r2, #8]
 80082d2:	da08      	bge.n	80082e6 <__sfputc_r+0x1e>
 80082d4:	6994      	ldr	r4, [r2, #24]
 80082d6:	42a3      	cmp	r3, r4
 80082d8:	db01      	blt.n	80082de <__sfputc_r+0x16>
 80082da:	290a      	cmp	r1, #10
 80082dc:	d103      	bne.n	80082e6 <__sfputc_r+0x1e>
 80082de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082e2:	f000 bbcf 	b.w	8008a84 <__swbuf_r>
 80082e6:	6813      	ldr	r3, [r2, #0]
 80082e8:	1c58      	adds	r0, r3, #1
 80082ea:	6010      	str	r0, [r2, #0]
 80082ec:	7019      	strb	r1, [r3, #0]
 80082ee:	4608      	mov	r0, r1
 80082f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082f4:	4770      	bx	lr

080082f6 <__sfputs_r>:
 80082f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f8:	4606      	mov	r6, r0
 80082fa:	460f      	mov	r7, r1
 80082fc:	4614      	mov	r4, r2
 80082fe:	18d5      	adds	r5, r2, r3
 8008300:	42ac      	cmp	r4, r5
 8008302:	d101      	bne.n	8008308 <__sfputs_r+0x12>
 8008304:	2000      	movs	r0, #0
 8008306:	e007      	b.n	8008318 <__sfputs_r+0x22>
 8008308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800830c:	463a      	mov	r2, r7
 800830e:	4630      	mov	r0, r6
 8008310:	f7ff ffda 	bl	80082c8 <__sfputc_r>
 8008314:	1c43      	adds	r3, r0, #1
 8008316:	d1f3      	bne.n	8008300 <__sfputs_r+0xa>
 8008318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800831c <_vfiprintf_r>:
 800831c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008320:	460d      	mov	r5, r1
 8008322:	b09d      	sub	sp, #116	@ 0x74
 8008324:	4614      	mov	r4, r2
 8008326:	4698      	mov	r8, r3
 8008328:	4606      	mov	r6, r0
 800832a:	b118      	cbz	r0, 8008334 <_vfiprintf_r+0x18>
 800832c:	6a03      	ldr	r3, [r0, #32]
 800832e:	b90b      	cbnz	r3, 8008334 <_vfiprintf_r+0x18>
 8008330:	f7ff fb68 	bl	8007a04 <__sinit>
 8008334:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008336:	07d9      	lsls	r1, r3, #31
 8008338:	d405      	bmi.n	8008346 <_vfiprintf_r+0x2a>
 800833a:	89ab      	ldrh	r3, [r5, #12]
 800833c:	059a      	lsls	r2, r3, #22
 800833e:	d402      	bmi.n	8008346 <_vfiprintf_r+0x2a>
 8008340:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008342:	f7ff fd58 	bl	8007df6 <__retarget_lock_acquire_recursive>
 8008346:	89ab      	ldrh	r3, [r5, #12]
 8008348:	071b      	lsls	r3, r3, #28
 800834a:	d501      	bpl.n	8008350 <_vfiprintf_r+0x34>
 800834c:	692b      	ldr	r3, [r5, #16]
 800834e:	b99b      	cbnz	r3, 8008378 <_vfiprintf_r+0x5c>
 8008350:	4629      	mov	r1, r5
 8008352:	4630      	mov	r0, r6
 8008354:	f000 fbd4 	bl	8008b00 <__swsetup_r>
 8008358:	b170      	cbz	r0, 8008378 <_vfiprintf_r+0x5c>
 800835a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800835c:	07dc      	lsls	r4, r3, #31
 800835e:	d504      	bpl.n	800836a <_vfiprintf_r+0x4e>
 8008360:	f04f 30ff 	mov.w	r0, #4294967295
 8008364:	b01d      	add	sp, #116	@ 0x74
 8008366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800836a:	89ab      	ldrh	r3, [r5, #12]
 800836c:	0598      	lsls	r0, r3, #22
 800836e:	d4f7      	bmi.n	8008360 <_vfiprintf_r+0x44>
 8008370:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008372:	f7ff fd41 	bl	8007df8 <__retarget_lock_release_recursive>
 8008376:	e7f3      	b.n	8008360 <_vfiprintf_r+0x44>
 8008378:	2300      	movs	r3, #0
 800837a:	9309      	str	r3, [sp, #36]	@ 0x24
 800837c:	2320      	movs	r3, #32
 800837e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008382:	f8cd 800c 	str.w	r8, [sp, #12]
 8008386:	2330      	movs	r3, #48	@ 0x30
 8008388:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008538 <_vfiprintf_r+0x21c>
 800838c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008390:	f04f 0901 	mov.w	r9, #1
 8008394:	4623      	mov	r3, r4
 8008396:	469a      	mov	sl, r3
 8008398:	f813 2b01 	ldrb.w	r2, [r3], #1
 800839c:	b10a      	cbz	r2, 80083a2 <_vfiprintf_r+0x86>
 800839e:	2a25      	cmp	r2, #37	@ 0x25
 80083a0:	d1f9      	bne.n	8008396 <_vfiprintf_r+0x7a>
 80083a2:	ebba 0b04 	subs.w	fp, sl, r4
 80083a6:	d00b      	beq.n	80083c0 <_vfiprintf_r+0xa4>
 80083a8:	465b      	mov	r3, fp
 80083aa:	4622      	mov	r2, r4
 80083ac:	4629      	mov	r1, r5
 80083ae:	4630      	mov	r0, r6
 80083b0:	f7ff ffa1 	bl	80082f6 <__sfputs_r>
 80083b4:	3001      	adds	r0, #1
 80083b6:	f000 80a7 	beq.w	8008508 <_vfiprintf_r+0x1ec>
 80083ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083bc:	445a      	add	r2, fp
 80083be:	9209      	str	r2, [sp, #36]	@ 0x24
 80083c0:	f89a 3000 	ldrb.w	r3, [sl]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f000 809f 	beq.w	8008508 <_vfiprintf_r+0x1ec>
 80083ca:	2300      	movs	r3, #0
 80083cc:	f04f 32ff 	mov.w	r2, #4294967295
 80083d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083d4:	f10a 0a01 	add.w	sl, sl, #1
 80083d8:	9304      	str	r3, [sp, #16]
 80083da:	9307      	str	r3, [sp, #28]
 80083dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80083e2:	4654      	mov	r4, sl
 80083e4:	2205      	movs	r2, #5
 80083e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083ea:	4853      	ldr	r0, [pc, #332]	@ (8008538 <_vfiprintf_r+0x21c>)
 80083ec:	f7f7 ff10 	bl	8000210 <memchr>
 80083f0:	9a04      	ldr	r2, [sp, #16]
 80083f2:	b9d8      	cbnz	r0, 800842c <_vfiprintf_r+0x110>
 80083f4:	06d1      	lsls	r1, r2, #27
 80083f6:	bf44      	itt	mi
 80083f8:	2320      	movmi	r3, #32
 80083fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083fe:	0713      	lsls	r3, r2, #28
 8008400:	bf44      	itt	mi
 8008402:	232b      	movmi	r3, #43	@ 0x2b
 8008404:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008408:	f89a 3000 	ldrb.w	r3, [sl]
 800840c:	2b2a      	cmp	r3, #42	@ 0x2a
 800840e:	d015      	beq.n	800843c <_vfiprintf_r+0x120>
 8008410:	9a07      	ldr	r2, [sp, #28]
 8008412:	4654      	mov	r4, sl
 8008414:	2000      	movs	r0, #0
 8008416:	f04f 0c0a 	mov.w	ip, #10
 800841a:	4621      	mov	r1, r4
 800841c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008420:	3b30      	subs	r3, #48	@ 0x30
 8008422:	2b09      	cmp	r3, #9
 8008424:	d94b      	bls.n	80084be <_vfiprintf_r+0x1a2>
 8008426:	b1b0      	cbz	r0, 8008456 <_vfiprintf_r+0x13a>
 8008428:	9207      	str	r2, [sp, #28]
 800842a:	e014      	b.n	8008456 <_vfiprintf_r+0x13a>
 800842c:	eba0 0308 	sub.w	r3, r0, r8
 8008430:	fa09 f303 	lsl.w	r3, r9, r3
 8008434:	4313      	orrs	r3, r2
 8008436:	9304      	str	r3, [sp, #16]
 8008438:	46a2      	mov	sl, r4
 800843a:	e7d2      	b.n	80083e2 <_vfiprintf_r+0xc6>
 800843c:	9b03      	ldr	r3, [sp, #12]
 800843e:	1d19      	adds	r1, r3, #4
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	9103      	str	r1, [sp, #12]
 8008444:	2b00      	cmp	r3, #0
 8008446:	bfbb      	ittet	lt
 8008448:	425b      	neglt	r3, r3
 800844a:	f042 0202 	orrlt.w	r2, r2, #2
 800844e:	9307      	strge	r3, [sp, #28]
 8008450:	9307      	strlt	r3, [sp, #28]
 8008452:	bfb8      	it	lt
 8008454:	9204      	strlt	r2, [sp, #16]
 8008456:	7823      	ldrb	r3, [r4, #0]
 8008458:	2b2e      	cmp	r3, #46	@ 0x2e
 800845a:	d10a      	bne.n	8008472 <_vfiprintf_r+0x156>
 800845c:	7863      	ldrb	r3, [r4, #1]
 800845e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008460:	d132      	bne.n	80084c8 <_vfiprintf_r+0x1ac>
 8008462:	9b03      	ldr	r3, [sp, #12]
 8008464:	1d1a      	adds	r2, r3, #4
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	9203      	str	r2, [sp, #12]
 800846a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800846e:	3402      	adds	r4, #2
 8008470:	9305      	str	r3, [sp, #20]
 8008472:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008548 <_vfiprintf_r+0x22c>
 8008476:	7821      	ldrb	r1, [r4, #0]
 8008478:	2203      	movs	r2, #3
 800847a:	4650      	mov	r0, sl
 800847c:	f7f7 fec8 	bl	8000210 <memchr>
 8008480:	b138      	cbz	r0, 8008492 <_vfiprintf_r+0x176>
 8008482:	9b04      	ldr	r3, [sp, #16]
 8008484:	eba0 000a 	sub.w	r0, r0, sl
 8008488:	2240      	movs	r2, #64	@ 0x40
 800848a:	4082      	lsls	r2, r0
 800848c:	4313      	orrs	r3, r2
 800848e:	3401      	adds	r4, #1
 8008490:	9304      	str	r3, [sp, #16]
 8008492:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008496:	4829      	ldr	r0, [pc, #164]	@ (800853c <_vfiprintf_r+0x220>)
 8008498:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800849c:	2206      	movs	r2, #6
 800849e:	f7f7 feb7 	bl	8000210 <memchr>
 80084a2:	2800      	cmp	r0, #0
 80084a4:	d03f      	beq.n	8008526 <_vfiprintf_r+0x20a>
 80084a6:	4b26      	ldr	r3, [pc, #152]	@ (8008540 <_vfiprintf_r+0x224>)
 80084a8:	bb1b      	cbnz	r3, 80084f2 <_vfiprintf_r+0x1d6>
 80084aa:	9b03      	ldr	r3, [sp, #12]
 80084ac:	3307      	adds	r3, #7
 80084ae:	f023 0307 	bic.w	r3, r3, #7
 80084b2:	3308      	adds	r3, #8
 80084b4:	9303      	str	r3, [sp, #12]
 80084b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084b8:	443b      	add	r3, r7
 80084ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80084bc:	e76a      	b.n	8008394 <_vfiprintf_r+0x78>
 80084be:	fb0c 3202 	mla	r2, ip, r2, r3
 80084c2:	460c      	mov	r4, r1
 80084c4:	2001      	movs	r0, #1
 80084c6:	e7a8      	b.n	800841a <_vfiprintf_r+0xfe>
 80084c8:	2300      	movs	r3, #0
 80084ca:	3401      	adds	r4, #1
 80084cc:	9305      	str	r3, [sp, #20]
 80084ce:	4619      	mov	r1, r3
 80084d0:	f04f 0c0a 	mov.w	ip, #10
 80084d4:	4620      	mov	r0, r4
 80084d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084da:	3a30      	subs	r2, #48	@ 0x30
 80084dc:	2a09      	cmp	r2, #9
 80084de:	d903      	bls.n	80084e8 <_vfiprintf_r+0x1cc>
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d0c6      	beq.n	8008472 <_vfiprintf_r+0x156>
 80084e4:	9105      	str	r1, [sp, #20]
 80084e6:	e7c4      	b.n	8008472 <_vfiprintf_r+0x156>
 80084e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80084ec:	4604      	mov	r4, r0
 80084ee:	2301      	movs	r3, #1
 80084f0:	e7f0      	b.n	80084d4 <_vfiprintf_r+0x1b8>
 80084f2:	ab03      	add	r3, sp, #12
 80084f4:	9300      	str	r3, [sp, #0]
 80084f6:	462a      	mov	r2, r5
 80084f8:	4b12      	ldr	r3, [pc, #72]	@ (8008544 <_vfiprintf_r+0x228>)
 80084fa:	a904      	add	r1, sp, #16
 80084fc:	4630      	mov	r0, r6
 80084fe:	f3af 8000 	nop.w
 8008502:	4607      	mov	r7, r0
 8008504:	1c78      	adds	r0, r7, #1
 8008506:	d1d6      	bne.n	80084b6 <_vfiprintf_r+0x19a>
 8008508:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800850a:	07d9      	lsls	r1, r3, #31
 800850c:	d405      	bmi.n	800851a <_vfiprintf_r+0x1fe>
 800850e:	89ab      	ldrh	r3, [r5, #12]
 8008510:	059a      	lsls	r2, r3, #22
 8008512:	d402      	bmi.n	800851a <_vfiprintf_r+0x1fe>
 8008514:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008516:	f7ff fc6f 	bl	8007df8 <__retarget_lock_release_recursive>
 800851a:	89ab      	ldrh	r3, [r5, #12]
 800851c:	065b      	lsls	r3, r3, #25
 800851e:	f53f af1f 	bmi.w	8008360 <_vfiprintf_r+0x44>
 8008522:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008524:	e71e      	b.n	8008364 <_vfiprintf_r+0x48>
 8008526:	ab03      	add	r3, sp, #12
 8008528:	9300      	str	r3, [sp, #0]
 800852a:	462a      	mov	r2, r5
 800852c:	4b05      	ldr	r3, [pc, #20]	@ (8008544 <_vfiprintf_r+0x228>)
 800852e:	a904      	add	r1, sp, #16
 8008530:	4630      	mov	r0, r6
 8008532:	f000 f879 	bl	8008628 <_printf_i>
 8008536:	e7e4      	b.n	8008502 <_vfiprintf_r+0x1e6>
 8008538:	0800a7b1 	.word	0x0800a7b1
 800853c:	0800a7bb 	.word	0x0800a7bb
 8008540:	00000000 	.word	0x00000000
 8008544:	080082f7 	.word	0x080082f7
 8008548:	0800a7b7 	.word	0x0800a7b7

0800854c <_printf_common>:
 800854c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008550:	4616      	mov	r6, r2
 8008552:	4698      	mov	r8, r3
 8008554:	688a      	ldr	r2, [r1, #8]
 8008556:	690b      	ldr	r3, [r1, #16]
 8008558:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800855c:	4293      	cmp	r3, r2
 800855e:	bfb8      	it	lt
 8008560:	4613      	movlt	r3, r2
 8008562:	6033      	str	r3, [r6, #0]
 8008564:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008568:	4607      	mov	r7, r0
 800856a:	460c      	mov	r4, r1
 800856c:	b10a      	cbz	r2, 8008572 <_printf_common+0x26>
 800856e:	3301      	adds	r3, #1
 8008570:	6033      	str	r3, [r6, #0]
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	0699      	lsls	r1, r3, #26
 8008576:	bf42      	ittt	mi
 8008578:	6833      	ldrmi	r3, [r6, #0]
 800857a:	3302      	addmi	r3, #2
 800857c:	6033      	strmi	r3, [r6, #0]
 800857e:	6825      	ldr	r5, [r4, #0]
 8008580:	f015 0506 	ands.w	r5, r5, #6
 8008584:	d106      	bne.n	8008594 <_printf_common+0x48>
 8008586:	f104 0a19 	add.w	sl, r4, #25
 800858a:	68e3      	ldr	r3, [r4, #12]
 800858c:	6832      	ldr	r2, [r6, #0]
 800858e:	1a9b      	subs	r3, r3, r2
 8008590:	42ab      	cmp	r3, r5
 8008592:	dc26      	bgt.n	80085e2 <_printf_common+0x96>
 8008594:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008598:	6822      	ldr	r2, [r4, #0]
 800859a:	3b00      	subs	r3, #0
 800859c:	bf18      	it	ne
 800859e:	2301      	movne	r3, #1
 80085a0:	0692      	lsls	r2, r2, #26
 80085a2:	d42b      	bmi.n	80085fc <_printf_common+0xb0>
 80085a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80085a8:	4641      	mov	r1, r8
 80085aa:	4638      	mov	r0, r7
 80085ac:	47c8      	blx	r9
 80085ae:	3001      	adds	r0, #1
 80085b0:	d01e      	beq.n	80085f0 <_printf_common+0xa4>
 80085b2:	6823      	ldr	r3, [r4, #0]
 80085b4:	6922      	ldr	r2, [r4, #16]
 80085b6:	f003 0306 	and.w	r3, r3, #6
 80085ba:	2b04      	cmp	r3, #4
 80085bc:	bf02      	ittt	eq
 80085be:	68e5      	ldreq	r5, [r4, #12]
 80085c0:	6833      	ldreq	r3, [r6, #0]
 80085c2:	1aed      	subeq	r5, r5, r3
 80085c4:	68a3      	ldr	r3, [r4, #8]
 80085c6:	bf0c      	ite	eq
 80085c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085cc:	2500      	movne	r5, #0
 80085ce:	4293      	cmp	r3, r2
 80085d0:	bfc4      	itt	gt
 80085d2:	1a9b      	subgt	r3, r3, r2
 80085d4:	18ed      	addgt	r5, r5, r3
 80085d6:	2600      	movs	r6, #0
 80085d8:	341a      	adds	r4, #26
 80085da:	42b5      	cmp	r5, r6
 80085dc:	d11a      	bne.n	8008614 <_printf_common+0xc8>
 80085de:	2000      	movs	r0, #0
 80085e0:	e008      	b.n	80085f4 <_printf_common+0xa8>
 80085e2:	2301      	movs	r3, #1
 80085e4:	4652      	mov	r2, sl
 80085e6:	4641      	mov	r1, r8
 80085e8:	4638      	mov	r0, r7
 80085ea:	47c8      	blx	r9
 80085ec:	3001      	adds	r0, #1
 80085ee:	d103      	bne.n	80085f8 <_printf_common+0xac>
 80085f0:	f04f 30ff 	mov.w	r0, #4294967295
 80085f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085f8:	3501      	adds	r5, #1
 80085fa:	e7c6      	b.n	800858a <_printf_common+0x3e>
 80085fc:	18e1      	adds	r1, r4, r3
 80085fe:	1c5a      	adds	r2, r3, #1
 8008600:	2030      	movs	r0, #48	@ 0x30
 8008602:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008606:	4422      	add	r2, r4
 8008608:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800860c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008610:	3302      	adds	r3, #2
 8008612:	e7c7      	b.n	80085a4 <_printf_common+0x58>
 8008614:	2301      	movs	r3, #1
 8008616:	4622      	mov	r2, r4
 8008618:	4641      	mov	r1, r8
 800861a:	4638      	mov	r0, r7
 800861c:	47c8      	blx	r9
 800861e:	3001      	adds	r0, #1
 8008620:	d0e6      	beq.n	80085f0 <_printf_common+0xa4>
 8008622:	3601      	adds	r6, #1
 8008624:	e7d9      	b.n	80085da <_printf_common+0x8e>
	...

08008628 <_printf_i>:
 8008628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800862c:	7e0f      	ldrb	r7, [r1, #24]
 800862e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008630:	2f78      	cmp	r7, #120	@ 0x78
 8008632:	4691      	mov	r9, r2
 8008634:	4680      	mov	r8, r0
 8008636:	460c      	mov	r4, r1
 8008638:	469a      	mov	sl, r3
 800863a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800863e:	d807      	bhi.n	8008650 <_printf_i+0x28>
 8008640:	2f62      	cmp	r7, #98	@ 0x62
 8008642:	d80a      	bhi.n	800865a <_printf_i+0x32>
 8008644:	2f00      	cmp	r7, #0
 8008646:	f000 80d2 	beq.w	80087ee <_printf_i+0x1c6>
 800864a:	2f58      	cmp	r7, #88	@ 0x58
 800864c:	f000 80b9 	beq.w	80087c2 <_printf_i+0x19a>
 8008650:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008654:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008658:	e03a      	b.n	80086d0 <_printf_i+0xa8>
 800865a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800865e:	2b15      	cmp	r3, #21
 8008660:	d8f6      	bhi.n	8008650 <_printf_i+0x28>
 8008662:	a101      	add	r1, pc, #4	@ (adr r1, 8008668 <_printf_i+0x40>)
 8008664:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008668:	080086c1 	.word	0x080086c1
 800866c:	080086d5 	.word	0x080086d5
 8008670:	08008651 	.word	0x08008651
 8008674:	08008651 	.word	0x08008651
 8008678:	08008651 	.word	0x08008651
 800867c:	08008651 	.word	0x08008651
 8008680:	080086d5 	.word	0x080086d5
 8008684:	08008651 	.word	0x08008651
 8008688:	08008651 	.word	0x08008651
 800868c:	08008651 	.word	0x08008651
 8008690:	08008651 	.word	0x08008651
 8008694:	080087d5 	.word	0x080087d5
 8008698:	080086ff 	.word	0x080086ff
 800869c:	0800878f 	.word	0x0800878f
 80086a0:	08008651 	.word	0x08008651
 80086a4:	08008651 	.word	0x08008651
 80086a8:	080087f7 	.word	0x080087f7
 80086ac:	08008651 	.word	0x08008651
 80086b0:	080086ff 	.word	0x080086ff
 80086b4:	08008651 	.word	0x08008651
 80086b8:	08008651 	.word	0x08008651
 80086bc:	08008797 	.word	0x08008797
 80086c0:	6833      	ldr	r3, [r6, #0]
 80086c2:	1d1a      	adds	r2, r3, #4
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	6032      	str	r2, [r6, #0]
 80086c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80086d0:	2301      	movs	r3, #1
 80086d2:	e09d      	b.n	8008810 <_printf_i+0x1e8>
 80086d4:	6833      	ldr	r3, [r6, #0]
 80086d6:	6820      	ldr	r0, [r4, #0]
 80086d8:	1d19      	adds	r1, r3, #4
 80086da:	6031      	str	r1, [r6, #0]
 80086dc:	0606      	lsls	r6, r0, #24
 80086de:	d501      	bpl.n	80086e4 <_printf_i+0xbc>
 80086e0:	681d      	ldr	r5, [r3, #0]
 80086e2:	e003      	b.n	80086ec <_printf_i+0xc4>
 80086e4:	0645      	lsls	r5, r0, #25
 80086e6:	d5fb      	bpl.n	80086e0 <_printf_i+0xb8>
 80086e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80086ec:	2d00      	cmp	r5, #0
 80086ee:	da03      	bge.n	80086f8 <_printf_i+0xd0>
 80086f0:	232d      	movs	r3, #45	@ 0x2d
 80086f2:	426d      	negs	r5, r5
 80086f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086f8:	4859      	ldr	r0, [pc, #356]	@ (8008860 <_printf_i+0x238>)
 80086fa:	230a      	movs	r3, #10
 80086fc:	e011      	b.n	8008722 <_printf_i+0xfa>
 80086fe:	6821      	ldr	r1, [r4, #0]
 8008700:	6833      	ldr	r3, [r6, #0]
 8008702:	0608      	lsls	r0, r1, #24
 8008704:	f853 5b04 	ldr.w	r5, [r3], #4
 8008708:	d402      	bmi.n	8008710 <_printf_i+0xe8>
 800870a:	0649      	lsls	r1, r1, #25
 800870c:	bf48      	it	mi
 800870e:	b2ad      	uxthmi	r5, r5
 8008710:	2f6f      	cmp	r7, #111	@ 0x6f
 8008712:	4853      	ldr	r0, [pc, #332]	@ (8008860 <_printf_i+0x238>)
 8008714:	6033      	str	r3, [r6, #0]
 8008716:	bf14      	ite	ne
 8008718:	230a      	movne	r3, #10
 800871a:	2308      	moveq	r3, #8
 800871c:	2100      	movs	r1, #0
 800871e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008722:	6866      	ldr	r6, [r4, #4]
 8008724:	60a6      	str	r6, [r4, #8]
 8008726:	2e00      	cmp	r6, #0
 8008728:	bfa2      	ittt	ge
 800872a:	6821      	ldrge	r1, [r4, #0]
 800872c:	f021 0104 	bicge.w	r1, r1, #4
 8008730:	6021      	strge	r1, [r4, #0]
 8008732:	b90d      	cbnz	r5, 8008738 <_printf_i+0x110>
 8008734:	2e00      	cmp	r6, #0
 8008736:	d04b      	beq.n	80087d0 <_printf_i+0x1a8>
 8008738:	4616      	mov	r6, r2
 800873a:	fbb5 f1f3 	udiv	r1, r5, r3
 800873e:	fb03 5711 	mls	r7, r3, r1, r5
 8008742:	5dc7      	ldrb	r7, [r0, r7]
 8008744:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008748:	462f      	mov	r7, r5
 800874a:	42bb      	cmp	r3, r7
 800874c:	460d      	mov	r5, r1
 800874e:	d9f4      	bls.n	800873a <_printf_i+0x112>
 8008750:	2b08      	cmp	r3, #8
 8008752:	d10b      	bne.n	800876c <_printf_i+0x144>
 8008754:	6823      	ldr	r3, [r4, #0]
 8008756:	07df      	lsls	r7, r3, #31
 8008758:	d508      	bpl.n	800876c <_printf_i+0x144>
 800875a:	6923      	ldr	r3, [r4, #16]
 800875c:	6861      	ldr	r1, [r4, #4]
 800875e:	4299      	cmp	r1, r3
 8008760:	bfde      	ittt	le
 8008762:	2330      	movle	r3, #48	@ 0x30
 8008764:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008768:	f106 36ff 	addle.w	r6, r6, #4294967295
 800876c:	1b92      	subs	r2, r2, r6
 800876e:	6122      	str	r2, [r4, #16]
 8008770:	f8cd a000 	str.w	sl, [sp]
 8008774:	464b      	mov	r3, r9
 8008776:	aa03      	add	r2, sp, #12
 8008778:	4621      	mov	r1, r4
 800877a:	4640      	mov	r0, r8
 800877c:	f7ff fee6 	bl	800854c <_printf_common>
 8008780:	3001      	adds	r0, #1
 8008782:	d14a      	bne.n	800881a <_printf_i+0x1f2>
 8008784:	f04f 30ff 	mov.w	r0, #4294967295
 8008788:	b004      	add	sp, #16
 800878a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800878e:	6823      	ldr	r3, [r4, #0]
 8008790:	f043 0320 	orr.w	r3, r3, #32
 8008794:	6023      	str	r3, [r4, #0]
 8008796:	4833      	ldr	r0, [pc, #204]	@ (8008864 <_printf_i+0x23c>)
 8008798:	2778      	movs	r7, #120	@ 0x78
 800879a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	6831      	ldr	r1, [r6, #0]
 80087a2:	061f      	lsls	r7, r3, #24
 80087a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80087a8:	d402      	bmi.n	80087b0 <_printf_i+0x188>
 80087aa:	065f      	lsls	r7, r3, #25
 80087ac:	bf48      	it	mi
 80087ae:	b2ad      	uxthmi	r5, r5
 80087b0:	6031      	str	r1, [r6, #0]
 80087b2:	07d9      	lsls	r1, r3, #31
 80087b4:	bf44      	itt	mi
 80087b6:	f043 0320 	orrmi.w	r3, r3, #32
 80087ba:	6023      	strmi	r3, [r4, #0]
 80087bc:	b11d      	cbz	r5, 80087c6 <_printf_i+0x19e>
 80087be:	2310      	movs	r3, #16
 80087c0:	e7ac      	b.n	800871c <_printf_i+0xf4>
 80087c2:	4827      	ldr	r0, [pc, #156]	@ (8008860 <_printf_i+0x238>)
 80087c4:	e7e9      	b.n	800879a <_printf_i+0x172>
 80087c6:	6823      	ldr	r3, [r4, #0]
 80087c8:	f023 0320 	bic.w	r3, r3, #32
 80087cc:	6023      	str	r3, [r4, #0]
 80087ce:	e7f6      	b.n	80087be <_printf_i+0x196>
 80087d0:	4616      	mov	r6, r2
 80087d2:	e7bd      	b.n	8008750 <_printf_i+0x128>
 80087d4:	6833      	ldr	r3, [r6, #0]
 80087d6:	6825      	ldr	r5, [r4, #0]
 80087d8:	6961      	ldr	r1, [r4, #20]
 80087da:	1d18      	adds	r0, r3, #4
 80087dc:	6030      	str	r0, [r6, #0]
 80087de:	062e      	lsls	r6, r5, #24
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	d501      	bpl.n	80087e8 <_printf_i+0x1c0>
 80087e4:	6019      	str	r1, [r3, #0]
 80087e6:	e002      	b.n	80087ee <_printf_i+0x1c6>
 80087e8:	0668      	lsls	r0, r5, #25
 80087ea:	d5fb      	bpl.n	80087e4 <_printf_i+0x1bc>
 80087ec:	8019      	strh	r1, [r3, #0]
 80087ee:	2300      	movs	r3, #0
 80087f0:	6123      	str	r3, [r4, #16]
 80087f2:	4616      	mov	r6, r2
 80087f4:	e7bc      	b.n	8008770 <_printf_i+0x148>
 80087f6:	6833      	ldr	r3, [r6, #0]
 80087f8:	1d1a      	adds	r2, r3, #4
 80087fa:	6032      	str	r2, [r6, #0]
 80087fc:	681e      	ldr	r6, [r3, #0]
 80087fe:	6862      	ldr	r2, [r4, #4]
 8008800:	2100      	movs	r1, #0
 8008802:	4630      	mov	r0, r6
 8008804:	f7f7 fd04 	bl	8000210 <memchr>
 8008808:	b108      	cbz	r0, 800880e <_printf_i+0x1e6>
 800880a:	1b80      	subs	r0, r0, r6
 800880c:	6060      	str	r0, [r4, #4]
 800880e:	6863      	ldr	r3, [r4, #4]
 8008810:	6123      	str	r3, [r4, #16]
 8008812:	2300      	movs	r3, #0
 8008814:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008818:	e7aa      	b.n	8008770 <_printf_i+0x148>
 800881a:	6923      	ldr	r3, [r4, #16]
 800881c:	4632      	mov	r2, r6
 800881e:	4649      	mov	r1, r9
 8008820:	4640      	mov	r0, r8
 8008822:	47d0      	blx	sl
 8008824:	3001      	adds	r0, #1
 8008826:	d0ad      	beq.n	8008784 <_printf_i+0x15c>
 8008828:	6823      	ldr	r3, [r4, #0]
 800882a:	079b      	lsls	r3, r3, #30
 800882c:	d413      	bmi.n	8008856 <_printf_i+0x22e>
 800882e:	68e0      	ldr	r0, [r4, #12]
 8008830:	9b03      	ldr	r3, [sp, #12]
 8008832:	4298      	cmp	r0, r3
 8008834:	bfb8      	it	lt
 8008836:	4618      	movlt	r0, r3
 8008838:	e7a6      	b.n	8008788 <_printf_i+0x160>
 800883a:	2301      	movs	r3, #1
 800883c:	4632      	mov	r2, r6
 800883e:	4649      	mov	r1, r9
 8008840:	4640      	mov	r0, r8
 8008842:	47d0      	blx	sl
 8008844:	3001      	adds	r0, #1
 8008846:	d09d      	beq.n	8008784 <_printf_i+0x15c>
 8008848:	3501      	adds	r5, #1
 800884a:	68e3      	ldr	r3, [r4, #12]
 800884c:	9903      	ldr	r1, [sp, #12]
 800884e:	1a5b      	subs	r3, r3, r1
 8008850:	42ab      	cmp	r3, r5
 8008852:	dcf2      	bgt.n	800883a <_printf_i+0x212>
 8008854:	e7eb      	b.n	800882e <_printf_i+0x206>
 8008856:	2500      	movs	r5, #0
 8008858:	f104 0619 	add.w	r6, r4, #25
 800885c:	e7f5      	b.n	800884a <_printf_i+0x222>
 800885e:	bf00      	nop
 8008860:	0800a7c2 	.word	0x0800a7c2
 8008864:	0800a7d3 	.word	0x0800a7d3

08008868 <__sflush_r>:
 8008868:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800886c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008870:	0716      	lsls	r6, r2, #28
 8008872:	4605      	mov	r5, r0
 8008874:	460c      	mov	r4, r1
 8008876:	d454      	bmi.n	8008922 <__sflush_r+0xba>
 8008878:	684b      	ldr	r3, [r1, #4]
 800887a:	2b00      	cmp	r3, #0
 800887c:	dc02      	bgt.n	8008884 <__sflush_r+0x1c>
 800887e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008880:	2b00      	cmp	r3, #0
 8008882:	dd48      	ble.n	8008916 <__sflush_r+0xae>
 8008884:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008886:	2e00      	cmp	r6, #0
 8008888:	d045      	beq.n	8008916 <__sflush_r+0xae>
 800888a:	2300      	movs	r3, #0
 800888c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008890:	682f      	ldr	r7, [r5, #0]
 8008892:	6a21      	ldr	r1, [r4, #32]
 8008894:	602b      	str	r3, [r5, #0]
 8008896:	d030      	beq.n	80088fa <__sflush_r+0x92>
 8008898:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800889a:	89a3      	ldrh	r3, [r4, #12]
 800889c:	0759      	lsls	r1, r3, #29
 800889e:	d505      	bpl.n	80088ac <__sflush_r+0x44>
 80088a0:	6863      	ldr	r3, [r4, #4]
 80088a2:	1ad2      	subs	r2, r2, r3
 80088a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80088a6:	b10b      	cbz	r3, 80088ac <__sflush_r+0x44>
 80088a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80088aa:	1ad2      	subs	r2, r2, r3
 80088ac:	2300      	movs	r3, #0
 80088ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088b0:	6a21      	ldr	r1, [r4, #32]
 80088b2:	4628      	mov	r0, r5
 80088b4:	47b0      	blx	r6
 80088b6:	1c43      	adds	r3, r0, #1
 80088b8:	89a3      	ldrh	r3, [r4, #12]
 80088ba:	d106      	bne.n	80088ca <__sflush_r+0x62>
 80088bc:	6829      	ldr	r1, [r5, #0]
 80088be:	291d      	cmp	r1, #29
 80088c0:	d82b      	bhi.n	800891a <__sflush_r+0xb2>
 80088c2:	4a2a      	ldr	r2, [pc, #168]	@ (800896c <__sflush_r+0x104>)
 80088c4:	410a      	asrs	r2, r1
 80088c6:	07d6      	lsls	r6, r2, #31
 80088c8:	d427      	bmi.n	800891a <__sflush_r+0xb2>
 80088ca:	2200      	movs	r2, #0
 80088cc:	6062      	str	r2, [r4, #4]
 80088ce:	04d9      	lsls	r1, r3, #19
 80088d0:	6922      	ldr	r2, [r4, #16]
 80088d2:	6022      	str	r2, [r4, #0]
 80088d4:	d504      	bpl.n	80088e0 <__sflush_r+0x78>
 80088d6:	1c42      	adds	r2, r0, #1
 80088d8:	d101      	bne.n	80088de <__sflush_r+0x76>
 80088da:	682b      	ldr	r3, [r5, #0]
 80088dc:	b903      	cbnz	r3, 80088e0 <__sflush_r+0x78>
 80088de:	6560      	str	r0, [r4, #84]	@ 0x54
 80088e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088e2:	602f      	str	r7, [r5, #0]
 80088e4:	b1b9      	cbz	r1, 8008916 <__sflush_r+0xae>
 80088e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088ea:	4299      	cmp	r1, r3
 80088ec:	d002      	beq.n	80088f4 <__sflush_r+0x8c>
 80088ee:	4628      	mov	r0, r5
 80088f0:	f7ff fa92 	bl	8007e18 <_free_r>
 80088f4:	2300      	movs	r3, #0
 80088f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80088f8:	e00d      	b.n	8008916 <__sflush_r+0xae>
 80088fa:	2301      	movs	r3, #1
 80088fc:	4628      	mov	r0, r5
 80088fe:	47b0      	blx	r6
 8008900:	4602      	mov	r2, r0
 8008902:	1c50      	adds	r0, r2, #1
 8008904:	d1c9      	bne.n	800889a <__sflush_r+0x32>
 8008906:	682b      	ldr	r3, [r5, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d0c6      	beq.n	800889a <__sflush_r+0x32>
 800890c:	2b1d      	cmp	r3, #29
 800890e:	d001      	beq.n	8008914 <__sflush_r+0xac>
 8008910:	2b16      	cmp	r3, #22
 8008912:	d11e      	bne.n	8008952 <__sflush_r+0xea>
 8008914:	602f      	str	r7, [r5, #0]
 8008916:	2000      	movs	r0, #0
 8008918:	e022      	b.n	8008960 <__sflush_r+0xf8>
 800891a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800891e:	b21b      	sxth	r3, r3
 8008920:	e01b      	b.n	800895a <__sflush_r+0xf2>
 8008922:	690f      	ldr	r7, [r1, #16]
 8008924:	2f00      	cmp	r7, #0
 8008926:	d0f6      	beq.n	8008916 <__sflush_r+0xae>
 8008928:	0793      	lsls	r3, r2, #30
 800892a:	680e      	ldr	r6, [r1, #0]
 800892c:	bf08      	it	eq
 800892e:	694b      	ldreq	r3, [r1, #20]
 8008930:	600f      	str	r7, [r1, #0]
 8008932:	bf18      	it	ne
 8008934:	2300      	movne	r3, #0
 8008936:	eba6 0807 	sub.w	r8, r6, r7
 800893a:	608b      	str	r3, [r1, #8]
 800893c:	f1b8 0f00 	cmp.w	r8, #0
 8008940:	dde9      	ble.n	8008916 <__sflush_r+0xae>
 8008942:	6a21      	ldr	r1, [r4, #32]
 8008944:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008946:	4643      	mov	r3, r8
 8008948:	463a      	mov	r2, r7
 800894a:	4628      	mov	r0, r5
 800894c:	47b0      	blx	r6
 800894e:	2800      	cmp	r0, #0
 8008950:	dc08      	bgt.n	8008964 <__sflush_r+0xfc>
 8008952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008956:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800895a:	81a3      	strh	r3, [r4, #12]
 800895c:	f04f 30ff 	mov.w	r0, #4294967295
 8008960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008964:	4407      	add	r7, r0
 8008966:	eba8 0800 	sub.w	r8, r8, r0
 800896a:	e7e7      	b.n	800893c <__sflush_r+0xd4>
 800896c:	dfbffffe 	.word	0xdfbffffe

08008970 <_fflush_r>:
 8008970:	b538      	push	{r3, r4, r5, lr}
 8008972:	690b      	ldr	r3, [r1, #16]
 8008974:	4605      	mov	r5, r0
 8008976:	460c      	mov	r4, r1
 8008978:	b913      	cbnz	r3, 8008980 <_fflush_r+0x10>
 800897a:	2500      	movs	r5, #0
 800897c:	4628      	mov	r0, r5
 800897e:	bd38      	pop	{r3, r4, r5, pc}
 8008980:	b118      	cbz	r0, 800898a <_fflush_r+0x1a>
 8008982:	6a03      	ldr	r3, [r0, #32]
 8008984:	b90b      	cbnz	r3, 800898a <_fflush_r+0x1a>
 8008986:	f7ff f83d 	bl	8007a04 <__sinit>
 800898a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d0f3      	beq.n	800897a <_fflush_r+0xa>
 8008992:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008994:	07d0      	lsls	r0, r2, #31
 8008996:	d404      	bmi.n	80089a2 <_fflush_r+0x32>
 8008998:	0599      	lsls	r1, r3, #22
 800899a:	d402      	bmi.n	80089a2 <_fflush_r+0x32>
 800899c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800899e:	f7ff fa2a 	bl	8007df6 <__retarget_lock_acquire_recursive>
 80089a2:	4628      	mov	r0, r5
 80089a4:	4621      	mov	r1, r4
 80089a6:	f7ff ff5f 	bl	8008868 <__sflush_r>
 80089aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80089ac:	07da      	lsls	r2, r3, #31
 80089ae:	4605      	mov	r5, r0
 80089b0:	d4e4      	bmi.n	800897c <_fflush_r+0xc>
 80089b2:	89a3      	ldrh	r3, [r4, #12]
 80089b4:	059b      	lsls	r3, r3, #22
 80089b6:	d4e1      	bmi.n	800897c <_fflush_r+0xc>
 80089b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089ba:	f7ff fa1d 	bl	8007df8 <__retarget_lock_release_recursive>
 80089be:	e7dd      	b.n	800897c <_fflush_r+0xc>

080089c0 <__swhatbuf_r>:
 80089c0:	b570      	push	{r4, r5, r6, lr}
 80089c2:	460c      	mov	r4, r1
 80089c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089c8:	2900      	cmp	r1, #0
 80089ca:	b096      	sub	sp, #88	@ 0x58
 80089cc:	4615      	mov	r5, r2
 80089ce:	461e      	mov	r6, r3
 80089d0:	da0d      	bge.n	80089ee <__swhatbuf_r+0x2e>
 80089d2:	89a3      	ldrh	r3, [r4, #12]
 80089d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80089d8:	f04f 0100 	mov.w	r1, #0
 80089dc:	bf14      	ite	ne
 80089de:	2340      	movne	r3, #64	@ 0x40
 80089e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80089e4:	2000      	movs	r0, #0
 80089e6:	6031      	str	r1, [r6, #0]
 80089e8:	602b      	str	r3, [r5, #0]
 80089ea:	b016      	add	sp, #88	@ 0x58
 80089ec:	bd70      	pop	{r4, r5, r6, pc}
 80089ee:	466a      	mov	r2, sp
 80089f0:	f000 f8f6 	bl	8008be0 <_fstat_r>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	dbec      	blt.n	80089d2 <__swhatbuf_r+0x12>
 80089f8:	9901      	ldr	r1, [sp, #4]
 80089fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80089fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008a02:	4259      	negs	r1, r3
 8008a04:	4159      	adcs	r1, r3
 8008a06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a0a:	e7eb      	b.n	80089e4 <__swhatbuf_r+0x24>

08008a0c <__smakebuf_r>:
 8008a0c:	898b      	ldrh	r3, [r1, #12]
 8008a0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a10:	079d      	lsls	r5, r3, #30
 8008a12:	4606      	mov	r6, r0
 8008a14:	460c      	mov	r4, r1
 8008a16:	d507      	bpl.n	8008a28 <__smakebuf_r+0x1c>
 8008a18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a1c:	6023      	str	r3, [r4, #0]
 8008a1e:	6123      	str	r3, [r4, #16]
 8008a20:	2301      	movs	r3, #1
 8008a22:	6163      	str	r3, [r4, #20]
 8008a24:	b003      	add	sp, #12
 8008a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a28:	ab01      	add	r3, sp, #4
 8008a2a:	466a      	mov	r2, sp
 8008a2c:	f7ff ffc8 	bl	80089c0 <__swhatbuf_r>
 8008a30:	9f00      	ldr	r7, [sp, #0]
 8008a32:	4605      	mov	r5, r0
 8008a34:	4639      	mov	r1, r7
 8008a36:	4630      	mov	r0, r6
 8008a38:	f7ff fa62 	bl	8007f00 <_malloc_r>
 8008a3c:	b948      	cbnz	r0, 8008a52 <__smakebuf_r+0x46>
 8008a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a42:	059a      	lsls	r2, r3, #22
 8008a44:	d4ee      	bmi.n	8008a24 <__smakebuf_r+0x18>
 8008a46:	f023 0303 	bic.w	r3, r3, #3
 8008a4a:	f043 0302 	orr.w	r3, r3, #2
 8008a4e:	81a3      	strh	r3, [r4, #12]
 8008a50:	e7e2      	b.n	8008a18 <__smakebuf_r+0xc>
 8008a52:	89a3      	ldrh	r3, [r4, #12]
 8008a54:	6020      	str	r0, [r4, #0]
 8008a56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a5a:	81a3      	strh	r3, [r4, #12]
 8008a5c:	9b01      	ldr	r3, [sp, #4]
 8008a5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a62:	b15b      	cbz	r3, 8008a7c <__smakebuf_r+0x70>
 8008a64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a68:	4630      	mov	r0, r6
 8008a6a:	f000 f8cb 	bl	8008c04 <_isatty_r>
 8008a6e:	b128      	cbz	r0, 8008a7c <__smakebuf_r+0x70>
 8008a70:	89a3      	ldrh	r3, [r4, #12]
 8008a72:	f023 0303 	bic.w	r3, r3, #3
 8008a76:	f043 0301 	orr.w	r3, r3, #1
 8008a7a:	81a3      	strh	r3, [r4, #12]
 8008a7c:	89a3      	ldrh	r3, [r4, #12]
 8008a7e:	431d      	orrs	r5, r3
 8008a80:	81a5      	strh	r5, [r4, #12]
 8008a82:	e7cf      	b.n	8008a24 <__smakebuf_r+0x18>

08008a84 <__swbuf_r>:
 8008a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a86:	460e      	mov	r6, r1
 8008a88:	4614      	mov	r4, r2
 8008a8a:	4605      	mov	r5, r0
 8008a8c:	b118      	cbz	r0, 8008a96 <__swbuf_r+0x12>
 8008a8e:	6a03      	ldr	r3, [r0, #32]
 8008a90:	b90b      	cbnz	r3, 8008a96 <__swbuf_r+0x12>
 8008a92:	f7fe ffb7 	bl	8007a04 <__sinit>
 8008a96:	69a3      	ldr	r3, [r4, #24]
 8008a98:	60a3      	str	r3, [r4, #8]
 8008a9a:	89a3      	ldrh	r3, [r4, #12]
 8008a9c:	071a      	lsls	r2, r3, #28
 8008a9e:	d501      	bpl.n	8008aa4 <__swbuf_r+0x20>
 8008aa0:	6923      	ldr	r3, [r4, #16]
 8008aa2:	b943      	cbnz	r3, 8008ab6 <__swbuf_r+0x32>
 8008aa4:	4621      	mov	r1, r4
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	f000 f82a 	bl	8008b00 <__swsetup_r>
 8008aac:	b118      	cbz	r0, 8008ab6 <__swbuf_r+0x32>
 8008aae:	f04f 37ff 	mov.w	r7, #4294967295
 8008ab2:	4638      	mov	r0, r7
 8008ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	6922      	ldr	r2, [r4, #16]
 8008aba:	1a98      	subs	r0, r3, r2
 8008abc:	6963      	ldr	r3, [r4, #20]
 8008abe:	b2f6      	uxtb	r6, r6
 8008ac0:	4283      	cmp	r3, r0
 8008ac2:	4637      	mov	r7, r6
 8008ac4:	dc05      	bgt.n	8008ad2 <__swbuf_r+0x4e>
 8008ac6:	4621      	mov	r1, r4
 8008ac8:	4628      	mov	r0, r5
 8008aca:	f7ff ff51 	bl	8008970 <_fflush_r>
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	d1ed      	bne.n	8008aae <__swbuf_r+0x2a>
 8008ad2:	68a3      	ldr	r3, [r4, #8]
 8008ad4:	3b01      	subs	r3, #1
 8008ad6:	60a3      	str	r3, [r4, #8]
 8008ad8:	6823      	ldr	r3, [r4, #0]
 8008ada:	1c5a      	adds	r2, r3, #1
 8008adc:	6022      	str	r2, [r4, #0]
 8008ade:	701e      	strb	r6, [r3, #0]
 8008ae0:	6962      	ldr	r2, [r4, #20]
 8008ae2:	1c43      	adds	r3, r0, #1
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d004      	beq.n	8008af2 <__swbuf_r+0x6e>
 8008ae8:	89a3      	ldrh	r3, [r4, #12]
 8008aea:	07db      	lsls	r3, r3, #31
 8008aec:	d5e1      	bpl.n	8008ab2 <__swbuf_r+0x2e>
 8008aee:	2e0a      	cmp	r6, #10
 8008af0:	d1df      	bne.n	8008ab2 <__swbuf_r+0x2e>
 8008af2:	4621      	mov	r1, r4
 8008af4:	4628      	mov	r0, r5
 8008af6:	f7ff ff3b 	bl	8008970 <_fflush_r>
 8008afa:	2800      	cmp	r0, #0
 8008afc:	d0d9      	beq.n	8008ab2 <__swbuf_r+0x2e>
 8008afe:	e7d6      	b.n	8008aae <__swbuf_r+0x2a>

08008b00 <__swsetup_r>:
 8008b00:	b538      	push	{r3, r4, r5, lr}
 8008b02:	4b29      	ldr	r3, [pc, #164]	@ (8008ba8 <__swsetup_r+0xa8>)
 8008b04:	4605      	mov	r5, r0
 8008b06:	6818      	ldr	r0, [r3, #0]
 8008b08:	460c      	mov	r4, r1
 8008b0a:	b118      	cbz	r0, 8008b14 <__swsetup_r+0x14>
 8008b0c:	6a03      	ldr	r3, [r0, #32]
 8008b0e:	b90b      	cbnz	r3, 8008b14 <__swsetup_r+0x14>
 8008b10:	f7fe ff78 	bl	8007a04 <__sinit>
 8008b14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b18:	0719      	lsls	r1, r3, #28
 8008b1a:	d422      	bmi.n	8008b62 <__swsetup_r+0x62>
 8008b1c:	06da      	lsls	r2, r3, #27
 8008b1e:	d407      	bmi.n	8008b30 <__swsetup_r+0x30>
 8008b20:	2209      	movs	r2, #9
 8008b22:	602a      	str	r2, [r5, #0]
 8008b24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b28:	81a3      	strh	r3, [r4, #12]
 8008b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b2e:	e033      	b.n	8008b98 <__swsetup_r+0x98>
 8008b30:	0758      	lsls	r0, r3, #29
 8008b32:	d512      	bpl.n	8008b5a <__swsetup_r+0x5a>
 8008b34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b36:	b141      	cbz	r1, 8008b4a <__swsetup_r+0x4a>
 8008b38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b3c:	4299      	cmp	r1, r3
 8008b3e:	d002      	beq.n	8008b46 <__swsetup_r+0x46>
 8008b40:	4628      	mov	r0, r5
 8008b42:	f7ff f969 	bl	8007e18 <_free_r>
 8008b46:	2300      	movs	r3, #0
 8008b48:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b4a:	89a3      	ldrh	r3, [r4, #12]
 8008b4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008b50:	81a3      	strh	r3, [r4, #12]
 8008b52:	2300      	movs	r3, #0
 8008b54:	6063      	str	r3, [r4, #4]
 8008b56:	6923      	ldr	r3, [r4, #16]
 8008b58:	6023      	str	r3, [r4, #0]
 8008b5a:	89a3      	ldrh	r3, [r4, #12]
 8008b5c:	f043 0308 	orr.w	r3, r3, #8
 8008b60:	81a3      	strh	r3, [r4, #12]
 8008b62:	6923      	ldr	r3, [r4, #16]
 8008b64:	b94b      	cbnz	r3, 8008b7a <__swsetup_r+0x7a>
 8008b66:	89a3      	ldrh	r3, [r4, #12]
 8008b68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008b6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b70:	d003      	beq.n	8008b7a <__swsetup_r+0x7a>
 8008b72:	4621      	mov	r1, r4
 8008b74:	4628      	mov	r0, r5
 8008b76:	f7ff ff49 	bl	8008a0c <__smakebuf_r>
 8008b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b7e:	f013 0201 	ands.w	r2, r3, #1
 8008b82:	d00a      	beq.n	8008b9a <__swsetup_r+0x9a>
 8008b84:	2200      	movs	r2, #0
 8008b86:	60a2      	str	r2, [r4, #8]
 8008b88:	6962      	ldr	r2, [r4, #20]
 8008b8a:	4252      	negs	r2, r2
 8008b8c:	61a2      	str	r2, [r4, #24]
 8008b8e:	6922      	ldr	r2, [r4, #16]
 8008b90:	b942      	cbnz	r2, 8008ba4 <__swsetup_r+0xa4>
 8008b92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008b96:	d1c5      	bne.n	8008b24 <__swsetup_r+0x24>
 8008b98:	bd38      	pop	{r3, r4, r5, pc}
 8008b9a:	0799      	lsls	r1, r3, #30
 8008b9c:	bf58      	it	pl
 8008b9e:	6962      	ldrpl	r2, [r4, #20]
 8008ba0:	60a2      	str	r2, [r4, #8]
 8008ba2:	e7f4      	b.n	8008b8e <__swsetup_r+0x8e>
 8008ba4:	2000      	movs	r0, #0
 8008ba6:	e7f7      	b.n	8008b98 <__swsetup_r+0x98>
 8008ba8:	20000118 	.word	0x20000118

08008bac <memmove>:
 8008bac:	4288      	cmp	r0, r1
 8008bae:	b510      	push	{r4, lr}
 8008bb0:	eb01 0402 	add.w	r4, r1, r2
 8008bb4:	d902      	bls.n	8008bbc <memmove+0x10>
 8008bb6:	4284      	cmp	r4, r0
 8008bb8:	4623      	mov	r3, r4
 8008bba:	d807      	bhi.n	8008bcc <memmove+0x20>
 8008bbc:	1e43      	subs	r3, r0, #1
 8008bbe:	42a1      	cmp	r1, r4
 8008bc0:	d008      	beq.n	8008bd4 <memmove+0x28>
 8008bc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bca:	e7f8      	b.n	8008bbe <memmove+0x12>
 8008bcc:	4402      	add	r2, r0
 8008bce:	4601      	mov	r1, r0
 8008bd0:	428a      	cmp	r2, r1
 8008bd2:	d100      	bne.n	8008bd6 <memmove+0x2a>
 8008bd4:	bd10      	pop	{r4, pc}
 8008bd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008bda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008bde:	e7f7      	b.n	8008bd0 <memmove+0x24>

08008be0 <_fstat_r>:
 8008be0:	b538      	push	{r3, r4, r5, lr}
 8008be2:	4d07      	ldr	r5, [pc, #28]	@ (8008c00 <_fstat_r+0x20>)
 8008be4:	2300      	movs	r3, #0
 8008be6:	4604      	mov	r4, r0
 8008be8:	4608      	mov	r0, r1
 8008bea:	4611      	mov	r1, r2
 8008bec:	602b      	str	r3, [r5, #0]
 8008bee:	f7fa fce2 	bl	80035b6 <_fstat>
 8008bf2:	1c43      	adds	r3, r0, #1
 8008bf4:	d102      	bne.n	8008bfc <_fstat_r+0x1c>
 8008bf6:	682b      	ldr	r3, [r5, #0]
 8008bf8:	b103      	cbz	r3, 8008bfc <_fstat_r+0x1c>
 8008bfa:	6023      	str	r3, [r4, #0]
 8008bfc:	bd38      	pop	{r3, r4, r5, pc}
 8008bfe:	bf00      	nop
 8008c00:	200007e0 	.word	0x200007e0

08008c04 <_isatty_r>:
 8008c04:	b538      	push	{r3, r4, r5, lr}
 8008c06:	4d06      	ldr	r5, [pc, #24]	@ (8008c20 <_isatty_r+0x1c>)
 8008c08:	2300      	movs	r3, #0
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	4608      	mov	r0, r1
 8008c0e:	602b      	str	r3, [r5, #0]
 8008c10:	f7fa fce1 	bl	80035d6 <_isatty>
 8008c14:	1c43      	adds	r3, r0, #1
 8008c16:	d102      	bne.n	8008c1e <_isatty_r+0x1a>
 8008c18:	682b      	ldr	r3, [r5, #0]
 8008c1a:	b103      	cbz	r3, 8008c1e <_isatty_r+0x1a>
 8008c1c:	6023      	str	r3, [r4, #0]
 8008c1e:	bd38      	pop	{r3, r4, r5, pc}
 8008c20:	200007e0 	.word	0x200007e0

08008c24 <_sbrk_r>:
 8008c24:	b538      	push	{r3, r4, r5, lr}
 8008c26:	4d06      	ldr	r5, [pc, #24]	@ (8008c40 <_sbrk_r+0x1c>)
 8008c28:	2300      	movs	r3, #0
 8008c2a:	4604      	mov	r4, r0
 8008c2c:	4608      	mov	r0, r1
 8008c2e:	602b      	str	r3, [r5, #0]
 8008c30:	f7fa fcea 	bl	8003608 <_sbrk>
 8008c34:	1c43      	adds	r3, r0, #1
 8008c36:	d102      	bne.n	8008c3e <_sbrk_r+0x1a>
 8008c38:	682b      	ldr	r3, [r5, #0]
 8008c3a:	b103      	cbz	r3, 8008c3e <_sbrk_r+0x1a>
 8008c3c:	6023      	str	r3, [r4, #0]
 8008c3e:	bd38      	pop	{r3, r4, r5, pc}
 8008c40:	200007e0 	.word	0x200007e0

08008c44 <_realloc_r>:
 8008c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c48:	4680      	mov	r8, r0
 8008c4a:	4615      	mov	r5, r2
 8008c4c:	460c      	mov	r4, r1
 8008c4e:	b921      	cbnz	r1, 8008c5a <_realloc_r+0x16>
 8008c50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c54:	4611      	mov	r1, r2
 8008c56:	f7ff b953 	b.w	8007f00 <_malloc_r>
 8008c5a:	b92a      	cbnz	r2, 8008c68 <_realloc_r+0x24>
 8008c5c:	f7ff f8dc 	bl	8007e18 <_free_r>
 8008c60:	2400      	movs	r4, #0
 8008c62:	4620      	mov	r0, r4
 8008c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c68:	f000 f81a 	bl	8008ca0 <_malloc_usable_size_r>
 8008c6c:	4285      	cmp	r5, r0
 8008c6e:	4606      	mov	r6, r0
 8008c70:	d802      	bhi.n	8008c78 <_realloc_r+0x34>
 8008c72:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008c76:	d8f4      	bhi.n	8008c62 <_realloc_r+0x1e>
 8008c78:	4629      	mov	r1, r5
 8008c7a:	4640      	mov	r0, r8
 8008c7c:	f7ff f940 	bl	8007f00 <_malloc_r>
 8008c80:	4607      	mov	r7, r0
 8008c82:	2800      	cmp	r0, #0
 8008c84:	d0ec      	beq.n	8008c60 <_realloc_r+0x1c>
 8008c86:	42b5      	cmp	r5, r6
 8008c88:	462a      	mov	r2, r5
 8008c8a:	4621      	mov	r1, r4
 8008c8c:	bf28      	it	cs
 8008c8e:	4632      	movcs	r2, r6
 8008c90:	f7ff f8b3 	bl	8007dfa <memcpy>
 8008c94:	4621      	mov	r1, r4
 8008c96:	4640      	mov	r0, r8
 8008c98:	f7ff f8be 	bl	8007e18 <_free_r>
 8008c9c:	463c      	mov	r4, r7
 8008c9e:	e7e0      	b.n	8008c62 <_realloc_r+0x1e>

08008ca0 <_malloc_usable_size_r>:
 8008ca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ca4:	1f18      	subs	r0, r3, #4
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	bfbc      	itt	lt
 8008caa:	580b      	ldrlt	r3, [r1, r0]
 8008cac:	18c0      	addlt	r0, r0, r3
 8008cae:	4770      	bx	lr

08008cb0 <pow>:
 8008cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cb2:	ed2d 8b02 	vpush	{d8}
 8008cb6:	eeb0 8a40 	vmov.f32	s16, s0
 8008cba:	eef0 8a60 	vmov.f32	s17, s1
 8008cbe:	ec55 4b11 	vmov	r4, r5, d1
 8008cc2:	f000 f871 	bl	8008da8 <__ieee754_pow>
 8008cc6:	4622      	mov	r2, r4
 8008cc8:	462b      	mov	r3, r5
 8008cca:	4620      	mov	r0, r4
 8008ccc:	4629      	mov	r1, r5
 8008cce:	ec57 6b10 	vmov	r6, r7, d0
 8008cd2:	f7f7 ff43 	bl	8000b5c <__aeabi_dcmpun>
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	d13b      	bne.n	8008d52 <pow+0xa2>
 8008cda:	ec51 0b18 	vmov	r0, r1, d8
 8008cde:	2200      	movs	r2, #0
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	f7f7 ff09 	bl	8000af8 <__aeabi_dcmpeq>
 8008ce6:	b1b8      	cbz	r0, 8008d18 <pow+0x68>
 8008ce8:	2200      	movs	r2, #0
 8008cea:	2300      	movs	r3, #0
 8008cec:	4620      	mov	r0, r4
 8008cee:	4629      	mov	r1, r5
 8008cf0:	f7f7 ff02 	bl	8000af8 <__aeabi_dcmpeq>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	d146      	bne.n	8008d86 <pow+0xd6>
 8008cf8:	ec45 4b10 	vmov	d0, r4, r5
 8008cfc:	f000 f848 	bl	8008d90 <finite>
 8008d00:	b338      	cbz	r0, 8008d52 <pow+0xa2>
 8008d02:	2200      	movs	r2, #0
 8008d04:	2300      	movs	r3, #0
 8008d06:	4620      	mov	r0, r4
 8008d08:	4629      	mov	r1, r5
 8008d0a:	f7f7 feff 	bl	8000b0c <__aeabi_dcmplt>
 8008d0e:	b300      	cbz	r0, 8008d52 <pow+0xa2>
 8008d10:	f7ff f846 	bl	8007da0 <__errno>
 8008d14:	2322      	movs	r3, #34	@ 0x22
 8008d16:	e01b      	b.n	8008d50 <pow+0xa0>
 8008d18:	ec47 6b10 	vmov	d0, r6, r7
 8008d1c:	f000 f838 	bl	8008d90 <finite>
 8008d20:	b9e0      	cbnz	r0, 8008d5c <pow+0xac>
 8008d22:	eeb0 0a48 	vmov.f32	s0, s16
 8008d26:	eef0 0a68 	vmov.f32	s1, s17
 8008d2a:	f000 f831 	bl	8008d90 <finite>
 8008d2e:	b1a8      	cbz	r0, 8008d5c <pow+0xac>
 8008d30:	ec45 4b10 	vmov	d0, r4, r5
 8008d34:	f000 f82c 	bl	8008d90 <finite>
 8008d38:	b180      	cbz	r0, 8008d5c <pow+0xac>
 8008d3a:	4632      	mov	r2, r6
 8008d3c:	463b      	mov	r3, r7
 8008d3e:	4630      	mov	r0, r6
 8008d40:	4639      	mov	r1, r7
 8008d42:	f7f7 ff0b 	bl	8000b5c <__aeabi_dcmpun>
 8008d46:	2800      	cmp	r0, #0
 8008d48:	d0e2      	beq.n	8008d10 <pow+0x60>
 8008d4a:	f7ff f829 	bl	8007da0 <__errno>
 8008d4e:	2321      	movs	r3, #33	@ 0x21
 8008d50:	6003      	str	r3, [r0, #0]
 8008d52:	ecbd 8b02 	vpop	{d8}
 8008d56:	ec47 6b10 	vmov	d0, r6, r7
 8008d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	2300      	movs	r3, #0
 8008d60:	4630      	mov	r0, r6
 8008d62:	4639      	mov	r1, r7
 8008d64:	f7f7 fec8 	bl	8000af8 <__aeabi_dcmpeq>
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	d0f2      	beq.n	8008d52 <pow+0xa2>
 8008d6c:	eeb0 0a48 	vmov.f32	s0, s16
 8008d70:	eef0 0a68 	vmov.f32	s1, s17
 8008d74:	f000 f80c 	bl	8008d90 <finite>
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	d0ea      	beq.n	8008d52 <pow+0xa2>
 8008d7c:	ec45 4b10 	vmov	d0, r4, r5
 8008d80:	f000 f806 	bl	8008d90 <finite>
 8008d84:	e7c3      	b.n	8008d0e <pow+0x5e>
 8008d86:	4f01      	ldr	r7, [pc, #4]	@ (8008d8c <pow+0xdc>)
 8008d88:	2600      	movs	r6, #0
 8008d8a:	e7e2      	b.n	8008d52 <pow+0xa2>
 8008d8c:	3ff00000 	.word	0x3ff00000

08008d90 <finite>:
 8008d90:	b082      	sub	sp, #8
 8008d92:	ed8d 0b00 	vstr	d0, [sp]
 8008d96:	9801      	ldr	r0, [sp, #4]
 8008d98:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8008d9c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8008da0:	0fc0      	lsrs	r0, r0, #31
 8008da2:	b002      	add	sp, #8
 8008da4:	4770      	bx	lr
	...

08008da8 <__ieee754_pow>:
 8008da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dac:	b091      	sub	sp, #68	@ 0x44
 8008dae:	ed8d 1b00 	vstr	d1, [sp]
 8008db2:	e9dd 1900 	ldrd	r1, r9, [sp]
 8008db6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8008dba:	ea5a 0001 	orrs.w	r0, sl, r1
 8008dbe:	ec57 6b10 	vmov	r6, r7, d0
 8008dc2:	d113      	bne.n	8008dec <__ieee754_pow+0x44>
 8008dc4:	19b3      	adds	r3, r6, r6
 8008dc6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8008dca:	4152      	adcs	r2, r2
 8008dcc:	4298      	cmp	r0, r3
 8008dce:	4b98      	ldr	r3, [pc, #608]	@ (8009030 <__ieee754_pow+0x288>)
 8008dd0:	4193      	sbcs	r3, r2
 8008dd2:	f080 84ea 	bcs.w	80097aa <__ieee754_pow+0xa02>
 8008dd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008dda:	4630      	mov	r0, r6
 8008ddc:	4639      	mov	r1, r7
 8008dde:	f7f7 fa6d 	bl	80002bc <__adddf3>
 8008de2:	ec41 0b10 	vmov	d0, r0, r1
 8008de6:	b011      	add	sp, #68	@ 0x44
 8008de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dec:	4a91      	ldr	r2, [pc, #580]	@ (8009034 <__ieee754_pow+0x28c>)
 8008dee:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008df2:	4590      	cmp	r8, r2
 8008df4:	463d      	mov	r5, r7
 8008df6:	4633      	mov	r3, r6
 8008df8:	d806      	bhi.n	8008e08 <__ieee754_pow+0x60>
 8008dfa:	d101      	bne.n	8008e00 <__ieee754_pow+0x58>
 8008dfc:	2e00      	cmp	r6, #0
 8008dfe:	d1ea      	bne.n	8008dd6 <__ieee754_pow+0x2e>
 8008e00:	4592      	cmp	sl, r2
 8008e02:	d801      	bhi.n	8008e08 <__ieee754_pow+0x60>
 8008e04:	d10e      	bne.n	8008e24 <__ieee754_pow+0x7c>
 8008e06:	b169      	cbz	r1, 8008e24 <__ieee754_pow+0x7c>
 8008e08:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8008e0c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8008e10:	431d      	orrs	r5, r3
 8008e12:	d1e0      	bne.n	8008dd6 <__ieee754_pow+0x2e>
 8008e14:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008e18:	18db      	adds	r3, r3, r3
 8008e1a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8008e1e:	4152      	adcs	r2, r2
 8008e20:	429d      	cmp	r5, r3
 8008e22:	e7d4      	b.n	8008dce <__ieee754_pow+0x26>
 8008e24:	2d00      	cmp	r5, #0
 8008e26:	46c3      	mov	fp, r8
 8008e28:	da3a      	bge.n	8008ea0 <__ieee754_pow+0xf8>
 8008e2a:	4a83      	ldr	r2, [pc, #524]	@ (8009038 <__ieee754_pow+0x290>)
 8008e2c:	4592      	cmp	sl, r2
 8008e2e:	d84d      	bhi.n	8008ecc <__ieee754_pow+0x124>
 8008e30:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8008e34:	4592      	cmp	sl, r2
 8008e36:	f240 84c7 	bls.w	80097c8 <__ieee754_pow+0xa20>
 8008e3a:	ea4f 522a 	mov.w	r2, sl, asr #20
 8008e3e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8008e42:	2a14      	cmp	r2, #20
 8008e44:	dd0f      	ble.n	8008e66 <__ieee754_pow+0xbe>
 8008e46:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8008e4a:	fa21 f402 	lsr.w	r4, r1, r2
 8008e4e:	fa04 f202 	lsl.w	r2, r4, r2
 8008e52:	428a      	cmp	r2, r1
 8008e54:	f040 84b8 	bne.w	80097c8 <__ieee754_pow+0xa20>
 8008e58:	f004 0401 	and.w	r4, r4, #1
 8008e5c:	f1c4 0402 	rsb	r4, r4, #2
 8008e60:	2900      	cmp	r1, #0
 8008e62:	d158      	bne.n	8008f16 <__ieee754_pow+0x16e>
 8008e64:	e00e      	b.n	8008e84 <__ieee754_pow+0xdc>
 8008e66:	2900      	cmp	r1, #0
 8008e68:	d154      	bne.n	8008f14 <__ieee754_pow+0x16c>
 8008e6a:	f1c2 0214 	rsb	r2, r2, #20
 8008e6e:	fa4a f402 	asr.w	r4, sl, r2
 8008e72:	fa04 f202 	lsl.w	r2, r4, r2
 8008e76:	4552      	cmp	r2, sl
 8008e78:	f040 84a3 	bne.w	80097c2 <__ieee754_pow+0xa1a>
 8008e7c:	f004 0401 	and.w	r4, r4, #1
 8008e80:	f1c4 0402 	rsb	r4, r4, #2
 8008e84:	4a6d      	ldr	r2, [pc, #436]	@ (800903c <__ieee754_pow+0x294>)
 8008e86:	4592      	cmp	sl, r2
 8008e88:	d12e      	bne.n	8008ee8 <__ieee754_pow+0x140>
 8008e8a:	f1b9 0f00 	cmp.w	r9, #0
 8008e8e:	f280 8494 	bge.w	80097ba <__ieee754_pow+0xa12>
 8008e92:	496a      	ldr	r1, [pc, #424]	@ (800903c <__ieee754_pow+0x294>)
 8008e94:	4632      	mov	r2, r6
 8008e96:	463b      	mov	r3, r7
 8008e98:	2000      	movs	r0, #0
 8008e9a:	f7f7 fcef 	bl	800087c <__aeabi_ddiv>
 8008e9e:	e7a0      	b.n	8008de2 <__ieee754_pow+0x3a>
 8008ea0:	2400      	movs	r4, #0
 8008ea2:	bbc1      	cbnz	r1, 8008f16 <__ieee754_pow+0x16e>
 8008ea4:	4a63      	ldr	r2, [pc, #396]	@ (8009034 <__ieee754_pow+0x28c>)
 8008ea6:	4592      	cmp	sl, r2
 8008ea8:	d1ec      	bne.n	8008e84 <__ieee754_pow+0xdc>
 8008eaa:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8008eae:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8008eb2:	431a      	orrs	r2, r3
 8008eb4:	f000 8479 	beq.w	80097aa <__ieee754_pow+0xa02>
 8008eb8:	4b61      	ldr	r3, [pc, #388]	@ (8009040 <__ieee754_pow+0x298>)
 8008eba:	4598      	cmp	r8, r3
 8008ebc:	d908      	bls.n	8008ed0 <__ieee754_pow+0x128>
 8008ebe:	f1b9 0f00 	cmp.w	r9, #0
 8008ec2:	f2c0 8476 	blt.w	80097b2 <__ieee754_pow+0xa0a>
 8008ec6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008eca:	e78a      	b.n	8008de2 <__ieee754_pow+0x3a>
 8008ecc:	2402      	movs	r4, #2
 8008ece:	e7e8      	b.n	8008ea2 <__ieee754_pow+0xfa>
 8008ed0:	f1b9 0f00 	cmp.w	r9, #0
 8008ed4:	f04f 0000 	mov.w	r0, #0
 8008ed8:	f04f 0100 	mov.w	r1, #0
 8008edc:	da81      	bge.n	8008de2 <__ieee754_pow+0x3a>
 8008ede:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008ee2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008ee6:	e77c      	b.n	8008de2 <__ieee754_pow+0x3a>
 8008ee8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8008eec:	d106      	bne.n	8008efc <__ieee754_pow+0x154>
 8008eee:	4632      	mov	r2, r6
 8008ef0:	463b      	mov	r3, r7
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	4639      	mov	r1, r7
 8008ef6:	f7f7 fb97 	bl	8000628 <__aeabi_dmul>
 8008efa:	e772      	b.n	8008de2 <__ieee754_pow+0x3a>
 8008efc:	4a51      	ldr	r2, [pc, #324]	@ (8009044 <__ieee754_pow+0x29c>)
 8008efe:	4591      	cmp	r9, r2
 8008f00:	d109      	bne.n	8008f16 <__ieee754_pow+0x16e>
 8008f02:	2d00      	cmp	r5, #0
 8008f04:	db07      	blt.n	8008f16 <__ieee754_pow+0x16e>
 8008f06:	ec47 6b10 	vmov	d0, r6, r7
 8008f0a:	b011      	add	sp, #68	@ 0x44
 8008f0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f10:	f000 bd52 	b.w	80099b8 <__ieee754_sqrt>
 8008f14:	2400      	movs	r4, #0
 8008f16:	ec47 6b10 	vmov	d0, r6, r7
 8008f1a:	9302      	str	r3, [sp, #8]
 8008f1c:	f000 fc88 	bl	8009830 <fabs>
 8008f20:	9b02      	ldr	r3, [sp, #8]
 8008f22:	ec51 0b10 	vmov	r0, r1, d0
 8008f26:	bb53      	cbnz	r3, 8008f7e <__ieee754_pow+0x1d6>
 8008f28:	4b44      	ldr	r3, [pc, #272]	@ (800903c <__ieee754_pow+0x294>)
 8008f2a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d002      	beq.n	8008f38 <__ieee754_pow+0x190>
 8008f32:	f1b8 0f00 	cmp.w	r8, #0
 8008f36:	d122      	bne.n	8008f7e <__ieee754_pow+0x1d6>
 8008f38:	f1b9 0f00 	cmp.w	r9, #0
 8008f3c:	da05      	bge.n	8008f4a <__ieee754_pow+0x1a2>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	460b      	mov	r3, r1
 8008f42:	2000      	movs	r0, #0
 8008f44:	493d      	ldr	r1, [pc, #244]	@ (800903c <__ieee754_pow+0x294>)
 8008f46:	f7f7 fc99 	bl	800087c <__aeabi_ddiv>
 8008f4a:	2d00      	cmp	r5, #0
 8008f4c:	f6bf af49 	bge.w	8008de2 <__ieee754_pow+0x3a>
 8008f50:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8008f54:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8008f58:	ea58 0804 	orrs.w	r8, r8, r4
 8008f5c:	d108      	bne.n	8008f70 <__ieee754_pow+0x1c8>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	460b      	mov	r3, r1
 8008f62:	4610      	mov	r0, r2
 8008f64:	4619      	mov	r1, r3
 8008f66:	f7f7 f9a7 	bl	80002b8 <__aeabi_dsub>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	e794      	b.n	8008e9a <__ieee754_pow+0xf2>
 8008f70:	2c01      	cmp	r4, #1
 8008f72:	f47f af36 	bne.w	8008de2 <__ieee754_pow+0x3a>
 8008f76:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	e731      	b.n	8008de2 <__ieee754_pow+0x3a>
 8008f7e:	0feb      	lsrs	r3, r5, #31
 8008f80:	3b01      	subs	r3, #1
 8008f82:	ea53 0204 	orrs.w	r2, r3, r4
 8008f86:	d102      	bne.n	8008f8e <__ieee754_pow+0x1e6>
 8008f88:	4632      	mov	r2, r6
 8008f8a:	463b      	mov	r3, r7
 8008f8c:	e7e9      	b.n	8008f62 <__ieee754_pow+0x1ba>
 8008f8e:	3c01      	subs	r4, #1
 8008f90:	431c      	orrs	r4, r3
 8008f92:	d016      	beq.n	8008fc2 <__ieee754_pow+0x21a>
 8008f94:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8009020 <__ieee754_pow+0x278>
 8008f98:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8008f9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008fa0:	f240 8112 	bls.w	80091c8 <__ieee754_pow+0x420>
 8008fa4:	4b28      	ldr	r3, [pc, #160]	@ (8009048 <__ieee754_pow+0x2a0>)
 8008fa6:	459a      	cmp	sl, r3
 8008fa8:	4b25      	ldr	r3, [pc, #148]	@ (8009040 <__ieee754_pow+0x298>)
 8008faa:	d916      	bls.n	8008fda <__ieee754_pow+0x232>
 8008fac:	4598      	cmp	r8, r3
 8008fae:	d80b      	bhi.n	8008fc8 <__ieee754_pow+0x220>
 8008fb0:	f1b9 0f00 	cmp.w	r9, #0
 8008fb4:	da0b      	bge.n	8008fce <__ieee754_pow+0x226>
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	b011      	add	sp, #68	@ 0x44
 8008fba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fbe:	f000 bcf3 	b.w	80099a8 <__math_oflow>
 8008fc2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8009028 <__ieee754_pow+0x280>
 8008fc6:	e7e7      	b.n	8008f98 <__ieee754_pow+0x1f0>
 8008fc8:	f1b9 0f00 	cmp.w	r9, #0
 8008fcc:	dcf3      	bgt.n	8008fb6 <__ieee754_pow+0x20e>
 8008fce:	2000      	movs	r0, #0
 8008fd0:	b011      	add	sp, #68	@ 0x44
 8008fd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd6:	f000 bcdf 	b.w	8009998 <__math_uflow>
 8008fda:	4598      	cmp	r8, r3
 8008fdc:	d20c      	bcs.n	8008ff8 <__ieee754_pow+0x250>
 8008fde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	f7f7 fd91 	bl	8000b0c <__aeabi_dcmplt>
 8008fea:	3800      	subs	r0, #0
 8008fec:	bf18      	it	ne
 8008fee:	2001      	movne	r0, #1
 8008ff0:	f1b9 0f00 	cmp.w	r9, #0
 8008ff4:	daec      	bge.n	8008fd0 <__ieee754_pow+0x228>
 8008ff6:	e7df      	b.n	8008fb8 <__ieee754_pow+0x210>
 8008ff8:	4b10      	ldr	r3, [pc, #64]	@ (800903c <__ieee754_pow+0x294>)
 8008ffa:	4598      	cmp	r8, r3
 8008ffc:	f04f 0200 	mov.w	r2, #0
 8009000:	d924      	bls.n	800904c <__ieee754_pow+0x2a4>
 8009002:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009006:	2300      	movs	r3, #0
 8009008:	f7f7 fd80 	bl	8000b0c <__aeabi_dcmplt>
 800900c:	3800      	subs	r0, #0
 800900e:	bf18      	it	ne
 8009010:	2001      	movne	r0, #1
 8009012:	f1b9 0f00 	cmp.w	r9, #0
 8009016:	dccf      	bgt.n	8008fb8 <__ieee754_pow+0x210>
 8009018:	e7da      	b.n	8008fd0 <__ieee754_pow+0x228>
 800901a:	bf00      	nop
 800901c:	f3af 8000 	nop.w
 8009020:	00000000 	.word	0x00000000
 8009024:	3ff00000 	.word	0x3ff00000
 8009028:	00000000 	.word	0x00000000
 800902c:	bff00000 	.word	0xbff00000
 8009030:	fff00000 	.word	0xfff00000
 8009034:	7ff00000 	.word	0x7ff00000
 8009038:	433fffff 	.word	0x433fffff
 800903c:	3ff00000 	.word	0x3ff00000
 8009040:	3fefffff 	.word	0x3fefffff
 8009044:	3fe00000 	.word	0x3fe00000
 8009048:	43f00000 	.word	0x43f00000
 800904c:	4b5a      	ldr	r3, [pc, #360]	@ (80091b8 <__ieee754_pow+0x410>)
 800904e:	f7f7 f933 	bl	80002b8 <__aeabi_dsub>
 8009052:	a351      	add	r3, pc, #324	@ (adr r3, 8009198 <__ieee754_pow+0x3f0>)
 8009054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009058:	4604      	mov	r4, r0
 800905a:	460d      	mov	r5, r1
 800905c:	f7f7 fae4 	bl	8000628 <__aeabi_dmul>
 8009060:	a34f      	add	r3, pc, #316	@ (adr r3, 80091a0 <__ieee754_pow+0x3f8>)
 8009062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009066:	4606      	mov	r6, r0
 8009068:	460f      	mov	r7, r1
 800906a:	4620      	mov	r0, r4
 800906c:	4629      	mov	r1, r5
 800906e:	f7f7 fadb 	bl	8000628 <__aeabi_dmul>
 8009072:	4b52      	ldr	r3, [pc, #328]	@ (80091bc <__ieee754_pow+0x414>)
 8009074:	4682      	mov	sl, r0
 8009076:	468b      	mov	fp, r1
 8009078:	2200      	movs	r2, #0
 800907a:	4620      	mov	r0, r4
 800907c:	4629      	mov	r1, r5
 800907e:	f7f7 fad3 	bl	8000628 <__aeabi_dmul>
 8009082:	4602      	mov	r2, r0
 8009084:	460b      	mov	r3, r1
 8009086:	a148      	add	r1, pc, #288	@ (adr r1, 80091a8 <__ieee754_pow+0x400>)
 8009088:	e9d1 0100 	ldrd	r0, r1, [r1]
 800908c:	f7f7 f914 	bl	80002b8 <__aeabi_dsub>
 8009090:	4622      	mov	r2, r4
 8009092:	462b      	mov	r3, r5
 8009094:	f7f7 fac8 	bl	8000628 <__aeabi_dmul>
 8009098:	4602      	mov	r2, r0
 800909a:	460b      	mov	r3, r1
 800909c:	2000      	movs	r0, #0
 800909e:	4948      	ldr	r1, [pc, #288]	@ (80091c0 <__ieee754_pow+0x418>)
 80090a0:	f7f7 f90a 	bl	80002b8 <__aeabi_dsub>
 80090a4:	4622      	mov	r2, r4
 80090a6:	4680      	mov	r8, r0
 80090a8:	4689      	mov	r9, r1
 80090aa:	462b      	mov	r3, r5
 80090ac:	4620      	mov	r0, r4
 80090ae:	4629      	mov	r1, r5
 80090b0:	f7f7 faba 	bl	8000628 <__aeabi_dmul>
 80090b4:	4602      	mov	r2, r0
 80090b6:	460b      	mov	r3, r1
 80090b8:	4640      	mov	r0, r8
 80090ba:	4649      	mov	r1, r9
 80090bc:	f7f7 fab4 	bl	8000628 <__aeabi_dmul>
 80090c0:	a33b      	add	r3, pc, #236	@ (adr r3, 80091b0 <__ieee754_pow+0x408>)
 80090c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c6:	f7f7 faaf 	bl	8000628 <__aeabi_dmul>
 80090ca:	4602      	mov	r2, r0
 80090cc:	460b      	mov	r3, r1
 80090ce:	4650      	mov	r0, sl
 80090d0:	4659      	mov	r1, fp
 80090d2:	f7f7 f8f1 	bl	80002b8 <__aeabi_dsub>
 80090d6:	4602      	mov	r2, r0
 80090d8:	460b      	mov	r3, r1
 80090da:	4680      	mov	r8, r0
 80090dc:	4689      	mov	r9, r1
 80090de:	4630      	mov	r0, r6
 80090e0:	4639      	mov	r1, r7
 80090e2:	f7f7 f8eb 	bl	80002bc <__adddf3>
 80090e6:	2400      	movs	r4, #0
 80090e8:	4632      	mov	r2, r6
 80090ea:	463b      	mov	r3, r7
 80090ec:	4620      	mov	r0, r4
 80090ee:	460d      	mov	r5, r1
 80090f0:	f7f7 f8e2 	bl	80002b8 <__aeabi_dsub>
 80090f4:	4602      	mov	r2, r0
 80090f6:	460b      	mov	r3, r1
 80090f8:	4640      	mov	r0, r8
 80090fa:	4649      	mov	r1, r9
 80090fc:	f7f7 f8dc 	bl	80002b8 <__aeabi_dsub>
 8009100:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009104:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009108:	2300      	movs	r3, #0
 800910a:	9304      	str	r3, [sp, #16]
 800910c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009110:	4606      	mov	r6, r0
 8009112:	460f      	mov	r7, r1
 8009114:	4652      	mov	r2, sl
 8009116:	465b      	mov	r3, fp
 8009118:	e9dd 0100 	ldrd	r0, r1, [sp]
 800911c:	f7f7 f8cc 	bl	80002b8 <__aeabi_dsub>
 8009120:	4622      	mov	r2, r4
 8009122:	462b      	mov	r3, r5
 8009124:	f7f7 fa80 	bl	8000628 <__aeabi_dmul>
 8009128:	e9dd 2300 	ldrd	r2, r3, [sp]
 800912c:	4680      	mov	r8, r0
 800912e:	4689      	mov	r9, r1
 8009130:	4630      	mov	r0, r6
 8009132:	4639      	mov	r1, r7
 8009134:	f7f7 fa78 	bl	8000628 <__aeabi_dmul>
 8009138:	4602      	mov	r2, r0
 800913a:	460b      	mov	r3, r1
 800913c:	4640      	mov	r0, r8
 800913e:	4649      	mov	r1, r9
 8009140:	f7f7 f8bc 	bl	80002bc <__adddf3>
 8009144:	4652      	mov	r2, sl
 8009146:	465b      	mov	r3, fp
 8009148:	4606      	mov	r6, r0
 800914a:	460f      	mov	r7, r1
 800914c:	4620      	mov	r0, r4
 800914e:	4629      	mov	r1, r5
 8009150:	f7f7 fa6a 	bl	8000628 <__aeabi_dmul>
 8009154:	460b      	mov	r3, r1
 8009156:	4602      	mov	r2, r0
 8009158:	4680      	mov	r8, r0
 800915a:	4689      	mov	r9, r1
 800915c:	4630      	mov	r0, r6
 800915e:	4639      	mov	r1, r7
 8009160:	f7f7 f8ac 	bl	80002bc <__adddf3>
 8009164:	4b17      	ldr	r3, [pc, #92]	@ (80091c4 <__ieee754_pow+0x41c>)
 8009166:	4299      	cmp	r1, r3
 8009168:	4604      	mov	r4, r0
 800916a:	460d      	mov	r5, r1
 800916c:	468a      	mov	sl, r1
 800916e:	468b      	mov	fp, r1
 8009170:	f340 82ef 	ble.w	8009752 <__ieee754_pow+0x9aa>
 8009174:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8009178:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800917c:	4303      	orrs	r3, r0
 800917e:	f000 81e8 	beq.w	8009552 <__ieee754_pow+0x7aa>
 8009182:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009186:	2200      	movs	r2, #0
 8009188:	2300      	movs	r3, #0
 800918a:	f7f7 fcbf 	bl	8000b0c <__aeabi_dcmplt>
 800918e:	3800      	subs	r0, #0
 8009190:	bf18      	it	ne
 8009192:	2001      	movne	r0, #1
 8009194:	e710      	b.n	8008fb8 <__ieee754_pow+0x210>
 8009196:	bf00      	nop
 8009198:	60000000 	.word	0x60000000
 800919c:	3ff71547 	.word	0x3ff71547
 80091a0:	f85ddf44 	.word	0xf85ddf44
 80091a4:	3e54ae0b 	.word	0x3e54ae0b
 80091a8:	55555555 	.word	0x55555555
 80091ac:	3fd55555 	.word	0x3fd55555
 80091b0:	652b82fe 	.word	0x652b82fe
 80091b4:	3ff71547 	.word	0x3ff71547
 80091b8:	3ff00000 	.word	0x3ff00000
 80091bc:	3fd00000 	.word	0x3fd00000
 80091c0:	3fe00000 	.word	0x3fe00000
 80091c4:	408fffff 	.word	0x408fffff
 80091c8:	4bd5      	ldr	r3, [pc, #852]	@ (8009520 <__ieee754_pow+0x778>)
 80091ca:	402b      	ands	r3, r5
 80091cc:	2200      	movs	r2, #0
 80091ce:	b92b      	cbnz	r3, 80091dc <__ieee754_pow+0x434>
 80091d0:	4bd4      	ldr	r3, [pc, #848]	@ (8009524 <__ieee754_pow+0x77c>)
 80091d2:	f7f7 fa29 	bl	8000628 <__aeabi_dmul>
 80091d6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80091da:	468b      	mov	fp, r1
 80091dc:	ea4f 532b 	mov.w	r3, fp, asr #20
 80091e0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80091e4:	4413      	add	r3, r2
 80091e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80091e8:	4bcf      	ldr	r3, [pc, #828]	@ (8009528 <__ieee754_pow+0x780>)
 80091ea:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80091ee:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80091f2:	459b      	cmp	fp, r3
 80091f4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80091f8:	dd08      	ble.n	800920c <__ieee754_pow+0x464>
 80091fa:	4bcc      	ldr	r3, [pc, #816]	@ (800952c <__ieee754_pow+0x784>)
 80091fc:	459b      	cmp	fp, r3
 80091fe:	f340 81a5 	ble.w	800954c <__ieee754_pow+0x7a4>
 8009202:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009204:	3301      	adds	r3, #1
 8009206:	930a      	str	r3, [sp, #40]	@ 0x28
 8009208:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800920c:	f04f 0a00 	mov.w	sl, #0
 8009210:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009214:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009216:	4bc6      	ldr	r3, [pc, #792]	@ (8009530 <__ieee754_pow+0x788>)
 8009218:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800921c:	ed93 7b00 	vldr	d7, [r3]
 8009220:	4629      	mov	r1, r5
 8009222:	ec53 2b17 	vmov	r2, r3, d7
 8009226:	ed8d 7b06 	vstr	d7, [sp, #24]
 800922a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800922e:	f7f7 f843 	bl	80002b8 <__aeabi_dsub>
 8009232:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009236:	4606      	mov	r6, r0
 8009238:	460f      	mov	r7, r1
 800923a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800923e:	f7f7 f83d 	bl	80002bc <__adddf3>
 8009242:	4602      	mov	r2, r0
 8009244:	460b      	mov	r3, r1
 8009246:	2000      	movs	r0, #0
 8009248:	49ba      	ldr	r1, [pc, #744]	@ (8009534 <__ieee754_pow+0x78c>)
 800924a:	f7f7 fb17 	bl	800087c <__aeabi_ddiv>
 800924e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8009252:	4602      	mov	r2, r0
 8009254:	460b      	mov	r3, r1
 8009256:	4630      	mov	r0, r6
 8009258:	4639      	mov	r1, r7
 800925a:	f7f7 f9e5 	bl	8000628 <__aeabi_dmul>
 800925e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009262:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8009266:	106d      	asrs	r5, r5, #1
 8009268:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800926c:	f04f 0b00 	mov.w	fp, #0
 8009270:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8009274:	4661      	mov	r1, ip
 8009276:	2200      	movs	r2, #0
 8009278:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800927c:	4658      	mov	r0, fp
 800927e:	46e1      	mov	r9, ip
 8009280:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8009284:	4614      	mov	r4, r2
 8009286:	461d      	mov	r5, r3
 8009288:	f7f7 f9ce 	bl	8000628 <__aeabi_dmul>
 800928c:	4602      	mov	r2, r0
 800928e:	460b      	mov	r3, r1
 8009290:	4630      	mov	r0, r6
 8009292:	4639      	mov	r1, r7
 8009294:	f7f7 f810 	bl	80002b8 <__aeabi_dsub>
 8009298:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800929c:	4606      	mov	r6, r0
 800929e:	460f      	mov	r7, r1
 80092a0:	4620      	mov	r0, r4
 80092a2:	4629      	mov	r1, r5
 80092a4:	f7f7 f808 	bl	80002b8 <__aeabi_dsub>
 80092a8:	4602      	mov	r2, r0
 80092aa:	460b      	mov	r3, r1
 80092ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80092b0:	f7f7 f802 	bl	80002b8 <__aeabi_dsub>
 80092b4:	465a      	mov	r2, fp
 80092b6:	464b      	mov	r3, r9
 80092b8:	f7f7 f9b6 	bl	8000628 <__aeabi_dmul>
 80092bc:	4602      	mov	r2, r0
 80092be:	460b      	mov	r3, r1
 80092c0:	4630      	mov	r0, r6
 80092c2:	4639      	mov	r1, r7
 80092c4:	f7f6 fff8 	bl	80002b8 <__aeabi_dsub>
 80092c8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80092cc:	f7f7 f9ac 	bl	8000628 <__aeabi_dmul>
 80092d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80092d8:	4610      	mov	r0, r2
 80092da:	4619      	mov	r1, r3
 80092dc:	f7f7 f9a4 	bl	8000628 <__aeabi_dmul>
 80092e0:	a37d      	add	r3, pc, #500	@ (adr r3, 80094d8 <__ieee754_pow+0x730>)
 80092e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e6:	4604      	mov	r4, r0
 80092e8:	460d      	mov	r5, r1
 80092ea:	f7f7 f99d 	bl	8000628 <__aeabi_dmul>
 80092ee:	a37c      	add	r3, pc, #496	@ (adr r3, 80094e0 <__ieee754_pow+0x738>)
 80092f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f4:	f7f6 ffe2 	bl	80002bc <__adddf3>
 80092f8:	4622      	mov	r2, r4
 80092fa:	462b      	mov	r3, r5
 80092fc:	f7f7 f994 	bl	8000628 <__aeabi_dmul>
 8009300:	a379      	add	r3, pc, #484	@ (adr r3, 80094e8 <__ieee754_pow+0x740>)
 8009302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009306:	f7f6 ffd9 	bl	80002bc <__adddf3>
 800930a:	4622      	mov	r2, r4
 800930c:	462b      	mov	r3, r5
 800930e:	f7f7 f98b 	bl	8000628 <__aeabi_dmul>
 8009312:	a377      	add	r3, pc, #476	@ (adr r3, 80094f0 <__ieee754_pow+0x748>)
 8009314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009318:	f7f6 ffd0 	bl	80002bc <__adddf3>
 800931c:	4622      	mov	r2, r4
 800931e:	462b      	mov	r3, r5
 8009320:	f7f7 f982 	bl	8000628 <__aeabi_dmul>
 8009324:	a374      	add	r3, pc, #464	@ (adr r3, 80094f8 <__ieee754_pow+0x750>)
 8009326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932a:	f7f6 ffc7 	bl	80002bc <__adddf3>
 800932e:	4622      	mov	r2, r4
 8009330:	462b      	mov	r3, r5
 8009332:	f7f7 f979 	bl	8000628 <__aeabi_dmul>
 8009336:	a372      	add	r3, pc, #456	@ (adr r3, 8009500 <__ieee754_pow+0x758>)
 8009338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933c:	f7f6 ffbe 	bl	80002bc <__adddf3>
 8009340:	4622      	mov	r2, r4
 8009342:	4606      	mov	r6, r0
 8009344:	460f      	mov	r7, r1
 8009346:	462b      	mov	r3, r5
 8009348:	4620      	mov	r0, r4
 800934a:	4629      	mov	r1, r5
 800934c:	f7f7 f96c 	bl	8000628 <__aeabi_dmul>
 8009350:	4602      	mov	r2, r0
 8009352:	460b      	mov	r3, r1
 8009354:	4630      	mov	r0, r6
 8009356:	4639      	mov	r1, r7
 8009358:	f7f7 f966 	bl	8000628 <__aeabi_dmul>
 800935c:	465a      	mov	r2, fp
 800935e:	4604      	mov	r4, r0
 8009360:	460d      	mov	r5, r1
 8009362:	464b      	mov	r3, r9
 8009364:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009368:	f7f6 ffa8 	bl	80002bc <__adddf3>
 800936c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009370:	f7f7 f95a 	bl	8000628 <__aeabi_dmul>
 8009374:	4622      	mov	r2, r4
 8009376:	462b      	mov	r3, r5
 8009378:	f7f6 ffa0 	bl	80002bc <__adddf3>
 800937c:	465a      	mov	r2, fp
 800937e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009382:	464b      	mov	r3, r9
 8009384:	4658      	mov	r0, fp
 8009386:	4649      	mov	r1, r9
 8009388:	f7f7 f94e 	bl	8000628 <__aeabi_dmul>
 800938c:	4b6a      	ldr	r3, [pc, #424]	@ (8009538 <__ieee754_pow+0x790>)
 800938e:	2200      	movs	r2, #0
 8009390:	4606      	mov	r6, r0
 8009392:	460f      	mov	r7, r1
 8009394:	f7f6 ff92 	bl	80002bc <__adddf3>
 8009398:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800939c:	f7f6 ff8e 	bl	80002bc <__adddf3>
 80093a0:	46d8      	mov	r8, fp
 80093a2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80093a6:	460d      	mov	r5, r1
 80093a8:	465a      	mov	r2, fp
 80093aa:	460b      	mov	r3, r1
 80093ac:	4640      	mov	r0, r8
 80093ae:	4649      	mov	r1, r9
 80093b0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80093b4:	f7f7 f938 	bl	8000628 <__aeabi_dmul>
 80093b8:	465c      	mov	r4, fp
 80093ba:	4680      	mov	r8, r0
 80093bc:	4689      	mov	r9, r1
 80093be:	4b5e      	ldr	r3, [pc, #376]	@ (8009538 <__ieee754_pow+0x790>)
 80093c0:	2200      	movs	r2, #0
 80093c2:	4620      	mov	r0, r4
 80093c4:	4629      	mov	r1, r5
 80093c6:	f7f6 ff77 	bl	80002b8 <__aeabi_dsub>
 80093ca:	4632      	mov	r2, r6
 80093cc:	463b      	mov	r3, r7
 80093ce:	f7f6 ff73 	bl	80002b8 <__aeabi_dsub>
 80093d2:	4602      	mov	r2, r0
 80093d4:	460b      	mov	r3, r1
 80093d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80093da:	f7f6 ff6d 	bl	80002b8 <__aeabi_dsub>
 80093de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093e2:	f7f7 f921 	bl	8000628 <__aeabi_dmul>
 80093e6:	4622      	mov	r2, r4
 80093e8:	4606      	mov	r6, r0
 80093ea:	460f      	mov	r7, r1
 80093ec:	462b      	mov	r3, r5
 80093ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093f2:	f7f7 f919 	bl	8000628 <__aeabi_dmul>
 80093f6:	4602      	mov	r2, r0
 80093f8:	460b      	mov	r3, r1
 80093fa:	4630      	mov	r0, r6
 80093fc:	4639      	mov	r1, r7
 80093fe:	f7f6 ff5d 	bl	80002bc <__adddf3>
 8009402:	4606      	mov	r6, r0
 8009404:	460f      	mov	r7, r1
 8009406:	4602      	mov	r2, r0
 8009408:	460b      	mov	r3, r1
 800940a:	4640      	mov	r0, r8
 800940c:	4649      	mov	r1, r9
 800940e:	f7f6 ff55 	bl	80002bc <__adddf3>
 8009412:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8009416:	a33c      	add	r3, pc, #240	@ (adr r3, 8009508 <__ieee754_pow+0x760>)
 8009418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941c:	4658      	mov	r0, fp
 800941e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8009422:	460d      	mov	r5, r1
 8009424:	f7f7 f900 	bl	8000628 <__aeabi_dmul>
 8009428:	465c      	mov	r4, fp
 800942a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800942e:	4642      	mov	r2, r8
 8009430:	464b      	mov	r3, r9
 8009432:	4620      	mov	r0, r4
 8009434:	4629      	mov	r1, r5
 8009436:	f7f6 ff3f 	bl	80002b8 <__aeabi_dsub>
 800943a:	4602      	mov	r2, r0
 800943c:	460b      	mov	r3, r1
 800943e:	4630      	mov	r0, r6
 8009440:	4639      	mov	r1, r7
 8009442:	f7f6 ff39 	bl	80002b8 <__aeabi_dsub>
 8009446:	a332      	add	r3, pc, #200	@ (adr r3, 8009510 <__ieee754_pow+0x768>)
 8009448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944c:	f7f7 f8ec 	bl	8000628 <__aeabi_dmul>
 8009450:	a331      	add	r3, pc, #196	@ (adr r3, 8009518 <__ieee754_pow+0x770>)
 8009452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009456:	4606      	mov	r6, r0
 8009458:	460f      	mov	r7, r1
 800945a:	4620      	mov	r0, r4
 800945c:	4629      	mov	r1, r5
 800945e:	f7f7 f8e3 	bl	8000628 <__aeabi_dmul>
 8009462:	4602      	mov	r2, r0
 8009464:	460b      	mov	r3, r1
 8009466:	4630      	mov	r0, r6
 8009468:	4639      	mov	r1, r7
 800946a:	f7f6 ff27 	bl	80002bc <__adddf3>
 800946e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009470:	4b32      	ldr	r3, [pc, #200]	@ (800953c <__ieee754_pow+0x794>)
 8009472:	4413      	add	r3, r2
 8009474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009478:	f7f6 ff20 	bl	80002bc <__adddf3>
 800947c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009480:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009482:	f7f7 f867 	bl	8000554 <__aeabi_i2d>
 8009486:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009488:	4b2d      	ldr	r3, [pc, #180]	@ (8009540 <__ieee754_pow+0x798>)
 800948a:	4413      	add	r3, r2
 800948c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009490:	4606      	mov	r6, r0
 8009492:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009496:	460f      	mov	r7, r1
 8009498:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800949c:	f7f6 ff0e 	bl	80002bc <__adddf3>
 80094a0:	4642      	mov	r2, r8
 80094a2:	464b      	mov	r3, r9
 80094a4:	f7f6 ff0a 	bl	80002bc <__adddf3>
 80094a8:	4632      	mov	r2, r6
 80094aa:	463b      	mov	r3, r7
 80094ac:	f7f6 ff06 	bl	80002bc <__adddf3>
 80094b0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80094b4:	4632      	mov	r2, r6
 80094b6:	463b      	mov	r3, r7
 80094b8:	4658      	mov	r0, fp
 80094ba:	460d      	mov	r5, r1
 80094bc:	f7f6 fefc 	bl	80002b8 <__aeabi_dsub>
 80094c0:	4642      	mov	r2, r8
 80094c2:	464b      	mov	r3, r9
 80094c4:	f7f6 fef8 	bl	80002b8 <__aeabi_dsub>
 80094c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094cc:	f7f6 fef4 	bl	80002b8 <__aeabi_dsub>
 80094d0:	465c      	mov	r4, fp
 80094d2:	4602      	mov	r2, r0
 80094d4:	e036      	b.n	8009544 <__ieee754_pow+0x79c>
 80094d6:	bf00      	nop
 80094d8:	4a454eef 	.word	0x4a454eef
 80094dc:	3fca7e28 	.word	0x3fca7e28
 80094e0:	93c9db65 	.word	0x93c9db65
 80094e4:	3fcd864a 	.word	0x3fcd864a
 80094e8:	a91d4101 	.word	0xa91d4101
 80094ec:	3fd17460 	.word	0x3fd17460
 80094f0:	518f264d 	.word	0x518f264d
 80094f4:	3fd55555 	.word	0x3fd55555
 80094f8:	db6fabff 	.word	0xdb6fabff
 80094fc:	3fdb6db6 	.word	0x3fdb6db6
 8009500:	33333303 	.word	0x33333303
 8009504:	3fe33333 	.word	0x3fe33333
 8009508:	e0000000 	.word	0xe0000000
 800950c:	3feec709 	.word	0x3feec709
 8009510:	dc3a03fd 	.word	0xdc3a03fd
 8009514:	3feec709 	.word	0x3feec709
 8009518:	145b01f5 	.word	0x145b01f5
 800951c:	be3e2fe0 	.word	0xbe3e2fe0
 8009520:	7ff00000 	.word	0x7ff00000
 8009524:	43400000 	.word	0x43400000
 8009528:	0003988e 	.word	0x0003988e
 800952c:	000bb679 	.word	0x000bb679
 8009530:	0800a808 	.word	0x0800a808
 8009534:	3ff00000 	.word	0x3ff00000
 8009538:	40080000 	.word	0x40080000
 800953c:	0800a7e8 	.word	0x0800a7e8
 8009540:	0800a7f8 	.word	0x0800a7f8
 8009544:	460b      	mov	r3, r1
 8009546:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800954a:	e5d7      	b.n	80090fc <__ieee754_pow+0x354>
 800954c:	f04f 0a01 	mov.w	sl, #1
 8009550:	e65e      	b.n	8009210 <__ieee754_pow+0x468>
 8009552:	a3b4      	add	r3, pc, #720	@ (adr r3, 8009824 <__ieee754_pow+0xa7c>)
 8009554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009558:	4630      	mov	r0, r6
 800955a:	4639      	mov	r1, r7
 800955c:	f7f6 feae 	bl	80002bc <__adddf3>
 8009560:	4642      	mov	r2, r8
 8009562:	e9cd 0100 	strd	r0, r1, [sp]
 8009566:	464b      	mov	r3, r9
 8009568:	4620      	mov	r0, r4
 800956a:	4629      	mov	r1, r5
 800956c:	f7f6 fea4 	bl	80002b8 <__aeabi_dsub>
 8009570:	4602      	mov	r2, r0
 8009572:	460b      	mov	r3, r1
 8009574:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009578:	f7f7 fae6 	bl	8000b48 <__aeabi_dcmpgt>
 800957c:	2800      	cmp	r0, #0
 800957e:	f47f ae00 	bne.w	8009182 <__ieee754_pow+0x3da>
 8009582:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8009586:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800958a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800958e:	fa43 fa0a 	asr.w	sl, r3, sl
 8009592:	44da      	add	sl, fp
 8009594:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009598:	489d      	ldr	r0, [pc, #628]	@ (8009810 <__ieee754_pow+0xa68>)
 800959a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800959e:	4108      	asrs	r0, r1
 80095a0:	ea00 030a 	and.w	r3, r0, sl
 80095a4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80095a8:	f1c1 0114 	rsb	r1, r1, #20
 80095ac:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80095b0:	fa4a fa01 	asr.w	sl, sl, r1
 80095b4:	f1bb 0f00 	cmp.w	fp, #0
 80095b8:	4640      	mov	r0, r8
 80095ba:	4649      	mov	r1, r9
 80095bc:	f04f 0200 	mov.w	r2, #0
 80095c0:	bfb8      	it	lt
 80095c2:	f1ca 0a00 	rsblt	sl, sl, #0
 80095c6:	f7f6 fe77 	bl	80002b8 <__aeabi_dsub>
 80095ca:	4680      	mov	r8, r0
 80095cc:	4689      	mov	r9, r1
 80095ce:	4632      	mov	r2, r6
 80095d0:	463b      	mov	r3, r7
 80095d2:	4640      	mov	r0, r8
 80095d4:	4649      	mov	r1, r9
 80095d6:	f7f6 fe71 	bl	80002bc <__adddf3>
 80095da:	2400      	movs	r4, #0
 80095dc:	a37c      	add	r3, pc, #496	@ (adr r3, 80097d0 <__ieee754_pow+0xa28>)
 80095de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e2:	4620      	mov	r0, r4
 80095e4:	460d      	mov	r5, r1
 80095e6:	f7f7 f81f 	bl	8000628 <__aeabi_dmul>
 80095ea:	4642      	mov	r2, r8
 80095ec:	e9cd 0100 	strd	r0, r1, [sp]
 80095f0:	464b      	mov	r3, r9
 80095f2:	4620      	mov	r0, r4
 80095f4:	4629      	mov	r1, r5
 80095f6:	f7f6 fe5f 	bl	80002b8 <__aeabi_dsub>
 80095fa:	4602      	mov	r2, r0
 80095fc:	460b      	mov	r3, r1
 80095fe:	4630      	mov	r0, r6
 8009600:	4639      	mov	r1, r7
 8009602:	f7f6 fe59 	bl	80002b8 <__aeabi_dsub>
 8009606:	a374      	add	r3, pc, #464	@ (adr r3, 80097d8 <__ieee754_pow+0xa30>)
 8009608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960c:	f7f7 f80c 	bl	8000628 <__aeabi_dmul>
 8009610:	a373      	add	r3, pc, #460	@ (adr r3, 80097e0 <__ieee754_pow+0xa38>)
 8009612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009616:	4680      	mov	r8, r0
 8009618:	4689      	mov	r9, r1
 800961a:	4620      	mov	r0, r4
 800961c:	4629      	mov	r1, r5
 800961e:	f7f7 f803 	bl	8000628 <__aeabi_dmul>
 8009622:	4602      	mov	r2, r0
 8009624:	460b      	mov	r3, r1
 8009626:	4640      	mov	r0, r8
 8009628:	4649      	mov	r1, r9
 800962a:	f7f6 fe47 	bl	80002bc <__adddf3>
 800962e:	4604      	mov	r4, r0
 8009630:	460d      	mov	r5, r1
 8009632:	4602      	mov	r2, r0
 8009634:	460b      	mov	r3, r1
 8009636:	e9dd 0100 	ldrd	r0, r1, [sp]
 800963a:	f7f6 fe3f 	bl	80002bc <__adddf3>
 800963e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009642:	4680      	mov	r8, r0
 8009644:	4689      	mov	r9, r1
 8009646:	f7f6 fe37 	bl	80002b8 <__aeabi_dsub>
 800964a:	4602      	mov	r2, r0
 800964c:	460b      	mov	r3, r1
 800964e:	4620      	mov	r0, r4
 8009650:	4629      	mov	r1, r5
 8009652:	f7f6 fe31 	bl	80002b8 <__aeabi_dsub>
 8009656:	4642      	mov	r2, r8
 8009658:	4606      	mov	r6, r0
 800965a:	460f      	mov	r7, r1
 800965c:	464b      	mov	r3, r9
 800965e:	4640      	mov	r0, r8
 8009660:	4649      	mov	r1, r9
 8009662:	f7f6 ffe1 	bl	8000628 <__aeabi_dmul>
 8009666:	a360      	add	r3, pc, #384	@ (adr r3, 80097e8 <__ieee754_pow+0xa40>)
 8009668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966c:	4604      	mov	r4, r0
 800966e:	460d      	mov	r5, r1
 8009670:	f7f6 ffda 	bl	8000628 <__aeabi_dmul>
 8009674:	a35e      	add	r3, pc, #376	@ (adr r3, 80097f0 <__ieee754_pow+0xa48>)
 8009676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967a:	f7f6 fe1d 	bl	80002b8 <__aeabi_dsub>
 800967e:	4622      	mov	r2, r4
 8009680:	462b      	mov	r3, r5
 8009682:	f7f6 ffd1 	bl	8000628 <__aeabi_dmul>
 8009686:	a35c      	add	r3, pc, #368	@ (adr r3, 80097f8 <__ieee754_pow+0xa50>)
 8009688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968c:	f7f6 fe16 	bl	80002bc <__adddf3>
 8009690:	4622      	mov	r2, r4
 8009692:	462b      	mov	r3, r5
 8009694:	f7f6 ffc8 	bl	8000628 <__aeabi_dmul>
 8009698:	a359      	add	r3, pc, #356	@ (adr r3, 8009800 <__ieee754_pow+0xa58>)
 800969a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969e:	f7f6 fe0b 	bl	80002b8 <__aeabi_dsub>
 80096a2:	4622      	mov	r2, r4
 80096a4:	462b      	mov	r3, r5
 80096a6:	f7f6 ffbf 	bl	8000628 <__aeabi_dmul>
 80096aa:	a357      	add	r3, pc, #348	@ (adr r3, 8009808 <__ieee754_pow+0xa60>)
 80096ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b0:	f7f6 fe04 	bl	80002bc <__adddf3>
 80096b4:	4622      	mov	r2, r4
 80096b6:	462b      	mov	r3, r5
 80096b8:	f7f6 ffb6 	bl	8000628 <__aeabi_dmul>
 80096bc:	4602      	mov	r2, r0
 80096be:	460b      	mov	r3, r1
 80096c0:	4640      	mov	r0, r8
 80096c2:	4649      	mov	r1, r9
 80096c4:	f7f6 fdf8 	bl	80002b8 <__aeabi_dsub>
 80096c8:	4604      	mov	r4, r0
 80096ca:	460d      	mov	r5, r1
 80096cc:	4602      	mov	r2, r0
 80096ce:	460b      	mov	r3, r1
 80096d0:	4640      	mov	r0, r8
 80096d2:	4649      	mov	r1, r9
 80096d4:	f7f6 ffa8 	bl	8000628 <__aeabi_dmul>
 80096d8:	2200      	movs	r2, #0
 80096da:	e9cd 0100 	strd	r0, r1, [sp]
 80096de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80096e2:	4620      	mov	r0, r4
 80096e4:	4629      	mov	r1, r5
 80096e6:	f7f6 fde7 	bl	80002b8 <__aeabi_dsub>
 80096ea:	4602      	mov	r2, r0
 80096ec:	460b      	mov	r3, r1
 80096ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096f2:	f7f7 f8c3 	bl	800087c <__aeabi_ddiv>
 80096f6:	4632      	mov	r2, r6
 80096f8:	4604      	mov	r4, r0
 80096fa:	460d      	mov	r5, r1
 80096fc:	463b      	mov	r3, r7
 80096fe:	4640      	mov	r0, r8
 8009700:	4649      	mov	r1, r9
 8009702:	f7f6 ff91 	bl	8000628 <__aeabi_dmul>
 8009706:	4632      	mov	r2, r6
 8009708:	463b      	mov	r3, r7
 800970a:	f7f6 fdd7 	bl	80002bc <__adddf3>
 800970e:	4602      	mov	r2, r0
 8009710:	460b      	mov	r3, r1
 8009712:	4620      	mov	r0, r4
 8009714:	4629      	mov	r1, r5
 8009716:	f7f6 fdcf 	bl	80002b8 <__aeabi_dsub>
 800971a:	4642      	mov	r2, r8
 800971c:	464b      	mov	r3, r9
 800971e:	f7f6 fdcb 	bl	80002b8 <__aeabi_dsub>
 8009722:	460b      	mov	r3, r1
 8009724:	4602      	mov	r2, r0
 8009726:	493b      	ldr	r1, [pc, #236]	@ (8009814 <__ieee754_pow+0xa6c>)
 8009728:	2000      	movs	r0, #0
 800972a:	f7f6 fdc5 	bl	80002b8 <__aeabi_dsub>
 800972e:	ec41 0b10 	vmov	d0, r0, r1
 8009732:	ee10 3a90 	vmov	r3, s1
 8009736:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800973a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800973e:	da30      	bge.n	80097a2 <__ieee754_pow+0x9fa>
 8009740:	4650      	mov	r0, sl
 8009742:	f000 f87d 	bl	8009840 <scalbn>
 8009746:	ec51 0b10 	vmov	r0, r1, d0
 800974a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800974e:	f7ff bbd2 	b.w	8008ef6 <__ieee754_pow+0x14e>
 8009752:	4c31      	ldr	r4, [pc, #196]	@ (8009818 <__ieee754_pow+0xa70>)
 8009754:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009758:	42a3      	cmp	r3, r4
 800975a:	d91a      	bls.n	8009792 <__ieee754_pow+0x9ea>
 800975c:	4b2f      	ldr	r3, [pc, #188]	@ (800981c <__ieee754_pow+0xa74>)
 800975e:	440b      	add	r3, r1
 8009760:	4303      	orrs	r3, r0
 8009762:	d009      	beq.n	8009778 <__ieee754_pow+0x9d0>
 8009764:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009768:	2200      	movs	r2, #0
 800976a:	2300      	movs	r3, #0
 800976c:	f7f7 f9ce 	bl	8000b0c <__aeabi_dcmplt>
 8009770:	3800      	subs	r0, #0
 8009772:	bf18      	it	ne
 8009774:	2001      	movne	r0, #1
 8009776:	e42b      	b.n	8008fd0 <__ieee754_pow+0x228>
 8009778:	4642      	mov	r2, r8
 800977a:	464b      	mov	r3, r9
 800977c:	f7f6 fd9c 	bl	80002b8 <__aeabi_dsub>
 8009780:	4632      	mov	r2, r6
 8009782:	463b      	mov	r3, r7
 8009784:	f7f7 f9d6 	bl	8000b34 <__aeabi_dcmpge>
 8009788:	2800      	cmp	r0, #0
 800978a:	d1eb      	bne.n	8009764 <__ieee754_pow+0x9bc>
 800978c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800982c <__ieee754_pow+0xa84>
 8009790:	e6f7      	b.n	8009582 <__ieee754_pow+0x7da>
 8009792:	469a      	mov	sl, r3
 8009794:	4b22      	ldr	r3, [pc, #136]	@ (8009820 <__ieee754_pow+0xa78>)
 8009796:	459a      	cmp	sl, r3
 8009798:	f63f aef3 	bhi.w	8009582 <__ieee754_pow+0x7da>
 800979c:	f8dd a010 	ldr.w	sl, [sp, #16]
 80097a0:	e715      	b.n	80095ce <__ieee754_pow+0x826>
 80097a2:	ec51 0b10 	vmov	r0, r1, d0
 80097a6:	4619      	mov	r1, r3
 80097a8:	e7cf      	b.n	800974a <__ieee754_pow+0x9a2>
 80097aa:	491a      	ldr	r1, [pc, #104]	@ (8009814 <__ieee754_pow+0xa6c>)
 80097ac:	2000      	movs	r0, #0
 80097ae:	f7ff bb18 	b.w	8008de2 <__ieee754_pow+0x3a>
 80097b2:	2000      	movs	r0, #0
 80097b4:	2100      	movs	r1, #0
 80097b6:	f7ff bb14 	b.w	8008de2 <__ieee754_pow+0x3a>
 80097ba:	4630      	mov	r0, r6
 80097bc:	4639      	mov	r1, r7
 80097be:	f7ff bb10 	b.w	8008de2 <__ieee754_pow+0x3a>
 80097c2:	460c      	mov	r4, r1
 80097c4:	f7ff bb5e 	b.w	8008e84 <__ieee754_pow+0xdc>
 80097c8:	2400      	movs	r4, #0
 80097ca:	f7ff bb49 	b.w	8008e60 <__ieee754_pow+0xb8>
 80097ce:	bf00      	nop
 80097d0:	00000000 	.word	0x00000000
 80097d4:	3fe62e43 	.word	0x3fe62e43
 80097d8:	fefa39ef 	.word	0xfefa39ef
 80097dc:	3fe62e42 	.word	0x3fe62e42
 80097e0:	0ca86c39 	.word	0x0ca86c39
 80097e4:	be205c61 	.word	0xbe205c61
 80097e8:	72bea4d0 	.word	0x72bea4d0
 80097ec:	3e663769 	.word	0x3e663769
 80097f0:	c5d26bf1 	.word	0xc5d26bf1
 80097f4:	3ebbbd41 	.word	0x3ebbbd41
 80097f8:	af25de2c 	.word	0xaf25de2c
 80097fc:	3f11566a 	.word	0x3f11566a
 8009800:	16bebd93 	.word	0x16bebd93
 8009804:	3f66c16c 	.word	0x3f66c16c
 8009808:	5555553e 	.word	0x5555553e
 800980c:	3fc55555 	.word	0x3fc55555
 8009810:	fff00000 	.word	0xfff00000
 8009814:	3ff00000 	.word	0x3ff00000
 8009818:	4090cbff 	.word	0x4090cbff
 800981c:	3f6f3400 	.word	0x3f6f3400
 8009820:	3fe00000 	.word	0x3fe00000
 8009824:	652b82fe 	.word	0x652b82fe
 8009828:	3c971547 	.word	0x3c971547
 800982c:	4090cc00 	.word	0x4090cc00

08009830 <fabs>:
 8009830:	ec51 0b10 	vmov	r0, r1, d0
 8009834:	4602      	mov	r2, r0
 8009836:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800983a:	ec43 2b10 	vmov	d0, r2, r3
 800983e:	4770      	bx	lr

08009840 <scalbn>:
 8009840:	b570      	push	{r4, r5, r6, lr}
 8009842:	ec55 4b10 	vmov	r4, r5, d0
 8009846:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800984a:	4606      	mov	r6, r0
 800984c:	462b      	mov	r3, r5
 800984e:	b991      	cbnz	r1, 8009876 <scalbn+0x36>
 8009850:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009854:	4323      	orrs	r3, r4
 8009856:	d03d      	beq.n	80098d4 <scalbn+0x94>
 8009858:	4b35      	ldr	r3, [pc, #212]	@ (8009930 <scalbn+0xf0>)
 800985a:	4620      	mov	r0, r4
 800985c:	4629      	mov	r1, r5
 800985e:	2200      	movs	r2, #0
 8009860:	f7f6 fee2 	bl	8000628 <__aeabi_dmul>
 8009864:	4b33      	ldr	r3, [pc, #204]	@ (8009934 <scalbn+0xf4>)
 8009866:	429e      	cmp	r6, r3
 8009868:	4604      	mov	r4, r0
 800986a:	460d      	mov	r5, r1
 800986c:	da0f      	bge.n	800988e <scalbn+0x4e>
 800986e:	a328      	add	r3, pc, #160	@ (adr r3, 8009910 <scalbn+0xd0>)
 8009870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009874:	e01e      	b.n	80098b4 <scalbn+0x74>
 8009876:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800987a:	4291      	cmp	r1, r2
 800987c:	d10b      	bne.n	8009896 <scalbn+0x56>
 800987e:	4622      	mov	r2, r4
 8009880:	4620      	mov	r0, r4
 8009882:	4629      	mov	r1, r5
 8009884:	f7f6 fd1a 	bl	80002bc <__adddf3>
 8009888:	4604      	mov	r4, r0
 800988a:	460d      	mov	r5, r1
 800988c:	e022      	b.n	80098d4 <scalbn+0x94>
 800988e:	460b      	mov	r3, r1
 8009890:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009894:	3936      	subs	r1, #54	@ 0x36
 8009896:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800989a:	4296      	cmp	r6, r2
 800989c:	dd0d      	ble.n	80098ba <scalbn+0x7a>
 800989e:	2d00      	cmp	r5, #0
 80098a0:	a11d      	add	r1, pc, #116	@ (adr r1, 8009918 <scalbn+0xd8>)
 80098a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098a6:	da02      	bge.n	80098ae <scalbn+0x6e>
 80098a8:	a11d      	add	r1, pc, #116	@ (adr r1, 8009920 <scalbn+0xe0>)
 80098aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098ae:	a31a      	add	r3, pc, #104	@ (adr r3, 8009918 <scalbn+0xd8>)
 80098b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b4:	f7f6 feb8 	bl	8000628 <__aeabi_dmul>
 80098b8:	e7e6      	b.n	8009888 <scalbn+0x48>
 80098ba:	1872      	adds	r2, r6, r1
 80098bc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80098c0:	428a      	cmp	r2, r1
 80098c2:	dcec      	bgt.n	800989e <scalbn+0x5e>
 80098c4:	2a00      	cmp	r2, #0
 80098c6:	dd08      	ble.n	80098da <scalbn+0x9a>
 80098c8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80098cc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80098d0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80098d4:	ec45 4b10 	vmov	d0, r4, r5
 80098d8:	bd70      	pop	{r4, r5, r6, pc}
 80098da:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80098de:	da08      	bge.n	80098f2 <scalbn+0xb2>
 80098e0:	2d00      	cmp	r5, #0
 80098e2:	a10b      	add	r1, pc, #44	@ (adr r1, 8009910 <scalbn+0xd0>)
 80098e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098e8:	dac1      	bge.n	800986e <scalbn+0x2e>
 80098ea:	a10f      	add	r1, pc, #60	@ (adr r1, 8009928 <scalbn+0xe8>)
 80098ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098f0:	e7bd      	b.n	800986e <scalbn+0x2e>
 80098f2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80098f6:	3236      	adds	r2, #54	@ 0x36
 80098f8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80098fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009900:	4620      	mov	r0, r4
 8009902:	4b0d      	ldr	r3, [pc, #52]	@ (8009938 <scalbn+0xf8>)
 8009904:	4629      	mov	r1, r5
 8009906:	2200      	movs	r2, #0
 8009908:	e7d4      	b.n	80098b4 <scalbn+0x74>
 800990a:	bf00      	nop
 800990c:	f3af 8000 	nop.w
 8009910:	c2f8f359 	.word	0xc2f8f359
 8009914:	01a56e1f 	.word	0x01a56e1f
 8009918:	8800759c 	.word	0x8800759c
 800991c:	7e37e43c 	.word	0x7e37e43c
 8009920:	8800759c 	.word	0x8800759c
 8009924:	fe37e43c 	.word	0xfe37e43c
 8009928:	c2f8f359 	.word	0xc2f8f359
 800992c:	81a56e1f 	.word	0x81a56e1f
 8009930:	43500000 	.word	0x43500000
 8009934:	ffff3cb0 	.word	0xffff3cb0
 8009938:	3c900000 	.word	0x3c900000

0800993c <with_errno>:
 800993c:	b510      	push	{r4, lr}
 800993e:	ed2d 8b02 	vpush	{d8}
 8009942:	eeb0 8a40 	vmov.f32	s16, s0
 8009946:	eef0 8a60 	vmov.f32	s17, s1
 800994a:	4604      	mov	r4, r0
 800994c:	f7fe fa28 	bl	8007da0 <__errno>
 8009950:	eeb0 0a48 	vmov.f32	s0, s16
 8009954:	eef0 0a68 	vmov.f32	s1, s17
 8009958:	ecbd 8b02 	vpop	{d8}
 800995c:	6004      	str	r4, [r0, #0]
 800995e:	bd10      	pop	{r4, pc}

08009960 <xflow>:
 8009960:	4603      	mov	r3, r0
 8009962:	b507      	push	{r0, r1, r2, lr}
 8009964:	ec51 0b10 	vmov	r0, r1, d0
 8009968:	b183      	cbz	r3, 800998c <xflow+0x2c>
 800996a:	4602      	mov	r2, r0
 800996c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009970:	e9cd 2300 	strd	r2, r3, [sp]
 8009974:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009978:	f7f6 fe56 	bl	8000628 <__aeabi_dmul>
 800997c:	ec41 0b10 	vmov	d0, r0, r1
 8009980:	2022      	movs	r0, #34	@ 0x22
 8009982:	b003      	add	sp, #12
 8009984:	f85d eb04 	ldr.w	lr, [sp], #4
 8009988:	f7ff bfd8 	b.w	800993c <with_errno>
 800998c:	4602      	mov	r2, r0
 800998e:	460b      	mov	r3, r1
 8009990:	e7ee      	b.n	8009970 <xflow+0x10>
 8009992:	0000      	movs	r0, r0
 8009994:	0000      	movs	r0, r0
	...

08009998 <__math_uflow>:
 8009998:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80099a0 <__math_uflow+0x8>
 800999c:	f7ff bfe0 	b.w	8009960 <xflow>
 80099a0:	00000000 	.word	0x00000000
 80099a4:	10000000 	.word	0x10000000

080099a8 <__math_oflow>:
 80099a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80099b0 <__math_oflow+0x8>
 80099ac:	f7ff bfd8 	b.w	8009960 <xflow>
 80099b0:	00000000 	.word	0x00000000
 80099b4:	70000000 	.word	0x70000000

080099b8 <__ieee754_sqrt>:
 80099b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099bc:	4a68      	ldr	r2, [pc, #416]	@ (8009b60 <__ieee754_sqrt+0x1a8>)
 80099be:	ec55 4b10 	vmov	r4, r5, d0
 80099c2:	43aa      	bics	r2, r5
 80099c4:	462b      	mov	r3, r5
 80099c6:	4621      	mov	r1, r4
 80099c8:	d110      	bne.n	80099ec <__ieee754_sqrt+0x34>
 80099ca:	4622      	mov	r2, r4
 80099cc:	4620      	mov	r0, r4
 80099ce:	4629      	mov	r1, r5
 80099d0:	f7f6 fe2a 	bl	8000628 <__aeabi_dmul>
 80099d4:	4602      	mov	r2, r0
 80099d6:	460b      	mov	r3, r1
 80099d8:	4620      	mov	r0, r4
 80099da:	4629      	mov	r1, r5
 80099dc:	f7f6 fc6e 	bl	80002bc <__adddf3>
 80099e0:	4604      	mov	r4, r0
 80099e2:	460d      	mov	r5, r1
 80099e4:	ec45 4b10 	vmov	d0, r4, r5
 80099e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ec:	2d00      	cmp	r5, #0
 80099ee:	dc0e      	bgt.n	8009a0e <__ieee754_sqrt+0x56>
 80099f0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80099f4:	4322      	orrs	r2, r4
 80099f6:	d0f5      	beq.n	80099e4 <__ieee754_sqrt+0x2c>
 80099f8:	b19d      	cbz	r5, 8009a22 <__ieee754_sqrt+0x6a>
 80099fa:	4622      	mov	r2, r4
 80099fc:	4620      	mov	r0, r4
 80099fe:	4629      	mov	r1, r5
 8009a00:	f7f6 fc5a 	bl	80002b8 <__aeabi_dsub>
 8009a04:	4602      	mov	r2, r0
 8009a06:	460b      	mov	r3, r1
 8009a08:	f7f6 ff38 	bl	800087c <__aeabi_ddiv>
 8009a0c:	e7e8      	b.n	80099e0 <__ieee754_sqrt+0x28>
 8009a0e:	152a      	asrs	r2, r5, #20
 8009a10:	d115      	bne.n	8009a3e <__ieee754_sqrt+0x86>
 8009a12:	2000      	movs	r0, #0
 8009a14:	e009      	b.n	8009a2a <__ieee754_sqrt+0x72>
 8009a16:	0acb      	lsrs	r3, r1, #11
 8009a18:	3a15      	subs	r2, #21
 8009a1a:	0549      	lsls	r1, r1, #21
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d0fa      	beq.n	8009a16 <__ieee754_sqrt+0x5e>
 8009a20:	e7f7      	b.n	8009a12 <__ieee754_sqrt+0x5a>
 8009a22:	462a      	mov	r2, r5
 8009a24:	e7fa      	b.n	8009a1c <__ieee754_sqrt+0x64>
 8009a26:	005b      	lsls	r3, r3, #1
 8009a28:	3001      	adds	r0, #1
 8009a2a:	02dc      	lsls	r4, r3, #11
 8009a2c:	d5fb      	bpl.n	8009a26 <__ieee754_sqrt+0x6e>
 8009a2e:	1e44      	subs	r4, r0, #1
 8009a30:	1b12      	subs	r2, r2, r4
 8009a32:	f1c0 0420 	rsb	r4, r0, #32
 8009a36:	fa21 f404 	lsr.w	r4, r1, r4
 8009a3a:	4323      	orrs	r3, r4
 8009a3c:	4081      	lsls	r1, r0
 8009a3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a42:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8009a46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a4a:	07d2      	lsls	r2, r2, #31
 8009a4c:	bf5c      	itt	pl
 8009a4e:	005b      	lslpl	r3, r3, #1
 8009a50:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009a54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009a58:	bf58      	it	pl
 8009a5a:	0049      	lslpl	r1, r1, #1
 8009a5c:	2600      	movs	r6, #0
 8009a5e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8009a62:	106d      	asrs	r5, r5, #1
 8009a64:	0049      	lsls	r1, r1, #1
 8009a66:	2016      	movs	r0, #22
 8009a68:	4632      	mov	r2, r6
 8009a6a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8009a6e:	1917      	adds	r7, r2, r4
 8009a70:	429f      	cmp	r7, r3
 8009a72:	bfde      	ittt	le
 8009a74:	193a      	addle	r2, r7, r4
 8009a76:	1bdb      	suble	r3, r3, r7
 8009a78:	1936      	addle	r6, r6, r4
 8009a7a:	0fcf      	lsrs	r7, r1, #31
 8009a7c:	3801      	subs	r0, #1
 8009a7e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8009a82:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009a86:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009a8a:	d1f0      	bne.n	8009a6e <__ieee754_sqrt+0xb6>
 8009a8c:	4604      	mov	r4, r0
 8009a8e:	2720      	movs	r7, #32
 8009a90:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009a94:	429a      	cmp	r2, r3
 8009a96:	eb00 0e0c 	add.w	lr, r0, ip
 8009a9a:	db02      	blt.n	8009aa2 <__ieee754_sqrt+0xea>
 8009a9c:	d113      	bne.n	8009ac6 <__ieee754_sqrt+0x10e>
 8009a9e:	458e      	cmp	lr, r1
 8009aa0:	d811      	bhi.n	8009ac6 <__ieee754_sqrt+0x10e>
 8009aa2:	f1be 0f00 	cmp.w	lr, #0
 8009aa6:	eb0e 000c 	add.w	r0, lr, ip
 8009aaa:	da42      	bge.n	8009b32 <__ieee754_sqrt+0x17a>
 8009aac:	2800      	cmp	r0, #0
 8009aae:	db40      	blt.n	8009b32 <__ieee754_sqrt+0x17a>
 8009ab0:	f102 0801 	add.w	r8, r2, #1
 8009ab4:	1a9b      	subs	r3, r3, r2
 8009ab6:	458e      	cmp	lr, r1
 8009ab8:	bf88      	it	hi
 8009aba:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009abe:	eba1 010e 	sub.w	r1, r1, lr
 8009ac2:	4464      	add	r4, ip
 8009ac4:	4642      	mov	r2, r8
 8009ac6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8009aca:	3f01      	subs	r7, #1
 8009acc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009ad0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009ad4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009ad8:	d1dc      	bne.n	8009a94 <__ieee754_sqrt+0xdc>
 8009ada:	4319      	orrs	r1, r3
 8009adc:	d01b      	beq.n	8009b16 <__ieee754_sqrt+0x15e>
 8009ade:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009b64 <__ieee754_sqrt+0x1ac>
 8009ae2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009b68 <__ieee754_sqrt+0x1b0>
 8009ae6:	e9da 0100 	ldrd	r0, r1, [sl]
 8009aea:	e9db 2300 	ldrd	r2, r3, [fp]
 8009aee:	f7f6 fbe3 	bl	80002b8 <__aeabi_dsub>
 8009af2:	e9da 8900 	ldrd	r8, r9, [sl]
 8009af6:	4602      	mov	r2, r0
 8009af8:	460b      	mov	r3, r1
 8009afa:	4640      	mov	r0, r8
 8009afc:	4649      	mov	r1, r9
 8009afe:	f7f7 f80f 	bl	8000b20 <__aeabi_dcmple>
 8009b02:	b140      	cbz	r0, 8009b16 <__ieee754_sqrt+0x15e>
 8009b04:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009b08:	e9da 0100 	ldrd	r0, r1, [sl]
 8009b0c:	e9db 2300 	ldrd	r2, r3, [fp]
 8009b10:	d111      	bne.n	8009b36 <__ieee754_sqrt+0x17e>
 8009b12:	3601      	adds	r6, #1
 8009b14:	463c      	mov	r4, r7
 8009b16:	1072      	asrs	r2, r6, #1
 8009b18:	0863      	lsrs	r3, r4, #1
 8009b1a:	07f1      	lsls	r1, r6, #31
 8009b1c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009b20:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009b24:	bf48      	it	mi
 8009b26:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009b2a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8009b2e:	4618      	mov	r0, r3
 8009b30:	e756      	b.n	80099e0 <__ieee754_sqrt+0x28>
 8009b32:	4690      	mov	r8, r2
 8009b34:	e7be      	b.n	8009ab4 <__ieee754_sqrt+0xfc>
 8009b36:	f7f6 fbc1 	bl	80002bc <__adddf3>
 8009b3a:	e9da 8900 	ldrd	r8, r9, [sl]
 8009b3e:	4602      	mov	r2, r0
 8009b40:	460b      	mov	r3, r1
 8009b42:	4640      	mov	r0, r8
 8009b44:	4649      	mov	r1, r9
 8009b46:	f7f6 ffe1 	bl	8000b0c <__aeabi_dcmplt>
 8009b4a:	b120      	cbz	r0, 8009b56 <__ieee754_sqrt+0x19e>
 8009b4c:	1ca0      	adds	r0, r4, #2
 8009b4e:	bf08      	it	eq
 8009b50:	3601      	addeq	r6, #1
 8009b52:	3402      	adds	r4, #2
 8009b54:	e7df      	b.n	8009b16 <__ieee754_sqrt+0x15e>
 8009b56:	1c63      	adds	r3, r4, #1
 8009b58:	f023 0401 	bic.w	r4, r3, #1
 8009b5c:	e7db      	b.n	8009b16 <__ieee754_sqrt+0x15e>
 8009b5e:	bf00      	nop
 8009b60:	7ff00000 	.word	0x7ff00000
 8009b64:	20000170 	.word	0x20000170
 8009b68:	20000168 	.word	0x20000168

08009b6c <_init>:
 8009b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b6e:	bf00      	nop
 8009b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b72:	bc08      	pop	{r3}
 8009b74:	469e      	mov	lr, r3
 8009b76:	4770      	bx	lr

08009b78 <_fini>:
 8009b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b7a:	bf00      	nop
 8009b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b7e:	bc08      	pop	{r3}
 8009b80:	469e      	mov	lr, r3
 8009b82:	4770      	bx	lr
